{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bay Wheels Ridership Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Package Importation\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sb\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import datetime as dt\n",
    "import matplotlib as mpl\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3063: DtypeWarning: Columns (14) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n",
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3063: DtypeWarning: Columns (13,14) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n",
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3063: DtypeWarning: Columns (13) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    }
   ],
   "source": [
    "# Importation of Datasets\n",
    "y2017   = pd.read_csv('2017-fordgobike-tripdata.csv')\n",
    "y201801 = pd.read_csv('201801-fordgobike-tripdata.csv')\n",
    "y201802 = pd.read_csv('201802-fordgobike-tripdata.csv')\n",
    "y201803 = pd.read_csv('201803-fordgobike-tripdata.csv')\n",
    "y201804 = pd.read_csv('201804-fordgobike-tripdata.csv')\n",
    "y201805 = pd.read_csv('201805-fordgobike-tripdata.csv')\n",
    "y201806 = pd.read_csv('201806-fordgobike-tripdata.csv')\n",
    "y201807 = pd.read_csv('201807-fordgobike-tripdata.csv')\n",
    "y201808 = pd.read_csv('201808-fordgobike-tripdata.csv')\n",
    "y201809 = pd.read_csv('201809-fordgobike-tripdata.csv')\n",
    "y201810 = pd.read_csv('201810-fordgobike-tripdata.csv')\n",
    "y201811 = pd.read_csv('201811-fordgobike-tripdata.csv')\n",
    "y201812 = pd.read_csv('201812-fordgobike-tripdata.csv')\n",
    "y201901 = pd.read_csv('201901-fordgobike-tripdata.csv')\n",
    "y201902 = pd.read_csv('201902-fordgobike-tripdata.csv')\n",
    "y201903 = pd.read_csv('201903-fordgobike-tripdata.csv')\n",
    "y201904 = pd.read_csv('201904-fordgobike-tripdata.csv')\n",
    "y201905 = pd.read_csv('201905-baywheels-tripdata.csv')\n",
    "y201906 = pd.read_csv('201906-baywheels-tripdata.csv')\n",
    "y201907 = pd.read_csv('201907-baywheels-tripdata.csv')\n",
    "y201908 = pd.read_csv('201908-baywheels-tripdata.csv')\n",
    "y201909 = pd.read_csv('201909-baywheels-tripdata.csv')\n",
    "y201910 = pd.read_csv('201910-baywheels-tripdata.csv')\n",
    "y201911 = pd.read_csv('201911-baywheels-tripdata.csv')\n",
    "y201912 = pd.read_csv('201912-baywheels-tripdata.csv')\n",
    "y202001 = pd.read_csv('202001-baywheels-tripdata.csv')\n",
    "y202002 = pd.read_csv('202002-baywheels-tripdata.csv')\n",
    "y202003 = pd.read_csv('202003-baywheels-tripdata.csv')\n",
    "y202004 = pd.read_csv('202004-baywheels-tripdata.csv')\n",
    "y202005 = pd.read_csv('202005-baywheels-tripdata.csv')\n",
    "y202006 = pd.read_csv('202006-baywheels-tripdata.csv')\n",
    "y202007 = pd.read_csv('202007-baywheels-tripdata.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Combining Datasets\n",
    "bikedata = y2017.append(y201801).append(y201802).append(y201803).append(y201804).append(y201805).append(y201806).append(y201807).append(y201808).append(y201809).append(y201810).append(y201811).append(y201812).append(y201901).append(y201902).append(y201903).append(y201904).append(y201905).append(y201906).append(y201907).append(y201908).append(y201909).append(y201910).append(y201911).append(y201912).append(y202001).append(y202002).append(y202003).append(y202004).append(y202005).append(y202006).append(y202007)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6331056, 25)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikedata.shape"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "bikedata.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration_sec</th>\n",
       "      <th>start_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>...</th>\n",
       "      <th>ride_id</th>\n",
       "      <th>rideable_type</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>member_casual</th>\n",
       "      <th>is_equity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>80110.0</td>\n",
       "      <td>2017-12-31 16:57:39.6540</td>\n",
       "      <td>2018-01-01 15:12:50.2450</td>\n",
       "      <td>74.0</td>\n",
       "      <td>Laguna St at Hayes St</td>\n",
       "      <td>37.776435</td>\n",
       "      <td>-122.426244</td>\n",
       "      <td>43.0</td>\n",
       "      <td>San Francisco Public Library (Grove St at Hyde...</td>\n",
       "      <td>37.778768</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>78800.0</td>\n",
       "      <td>2017-12-31 15:56:34.8420</td>\n",
       "      <td>2018-01-01 13:49:55.6170</td>\n",
       "      <td>284.0</td>\n",
       "      <td>Yerba Buena Center for the Arts (Howard St at ...</td>\n",
       "      <td>37.784872</td>\n",
       "      <td>-122.400876</td>\n",
       "      <td>96.0</td>\n",
       "      <td>Dolores St at 15th St</td>\n",
       "      <td>37.766210</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>45768.0</td>\n",
       "      <td>2017-12-31 22:45:48.4110</td>\n",
       "      <td>2018-01-01 11:28:36.8830</td>\n",
       "      <td>245.0</td>\n",
       "      <td>Downtown Berkeley BART</td>\n",
       "      <td>37.870348</td>\n",
       "      <td>-122.267764</td>\n",
       "      <td>245.0</td>\n",
       "      <td>Downtown Berkeley BART</td>\n",
       "      <td>37.870348</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>62172.0</td>\n",
       "      <td>2017-12-31 17:31:10.6360</td>\n",
       "      <td>2018-01-01 10:47:23.5310</td>\n",
       "      <td>60.0</td>\n",
       "      <td>8th St at Ringold St</td>\n",
       "      <td>37.774520</td>\n",
       "      <td>-122.409449</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Powell St BART Station (Market St at 5th St)</td>\n",
       "      <td>37.783899</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>43603.0</td>\n",
       "      <td>2017-12-31 14:23:14.0010</td>\n",
       "      <td>2018-01-01 02:29:57.5710</td>\n",
       "      <td>239.0</td>\n",
       "      <td>Bancroft Way at Telegraph Ave</td>\n",
       "      <td>37.868813</td>\n",
       "      <td>-122.258764</td>\n",
       "      <td>247.0</td>\n",
       "      <td>Fulton St at Bancroft Way</td>\n",
       "      <td>37.867789</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   duration_sec                start_time                  end_time  \\\n",
       "0       80110.0  2017-12-31 16:57:39.6540  2018-01-01 15:12:50.2450   \n",
       "1       78800.0  2017-12-31 15:56:34.8420  2018-01-01 13:49:55.6170   \n",
       "2       45768.0  2017-12-31 22:45:48.4110  2018-01-01 11:28:36.8830   \n",
       "3       62172.0  2017-12-31 17:31:10.6360  2018-01-01 10:47:23.5310   \n",
       "4       43603.0  2017-12-31 14:23:14.0010  2018-01-01 02:29:57.5710   \n",
       "\n",
       "   start_station_id                                 start_station_name  \\\n",
       "0              74.0                              Laguna St at Hayes St   \n",
       "1             284.0  Yerba Buena Center for the Arts (Howard St at ...   \n",
       "2             245.0                             Downtown Berkeley BART   \n",
       "3              60.0                               8th St at Ringold St   \n",
       "4             239.0                      Bancroft Way at Telegraph Ave   \n",
       "\n",
       "   start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "0               37.776435              -122.426244            43.0   \n",
       "1               37.784872              -122.400876            96.0   \n",
       "2               37.870348              -122.267764           245.0   \n",
       "3               37.774520              -122.409449             5.0   \n",
       "4               37.868813              -122.258764           247.0   \n",
       "\n",
       "                                    end_station_name  end_station_latitude  \\\n",
       "0  San Francisco Public Library (Grove St at Hyde...             37.778768   \n",
       "1                              Dolores St at 15th St             37.766210   \n",
       "2                             Downtown Berkeley BART             37.870348   \n",
       "3       Powell St BART Station (Market St at 5th St)             37.783899   \n",
       "4                          Fulton St at Bancroft Way             37.867789   \n",
       "\n",
       "   ...  ride_id  rideable_type started_at ended_at start_lat start_lng  \\\n",
       "0  ...      NaN            NaN        NaN      NaN       NaN       NaN   \n",
       "1  ...      NaN            NaN        NaN      NaN       NaN       NaN   \n",
       "2  ...      NaN            NaN        NaN      NaN       NaN       NaN   \n",
       "3  ...      NaN            NaN        NaN      NaN       NaN       NaN   \n",
       "4  ...      NaN            NaN        NaN      NaN       NaN       NaN   \n",
       "\n",
       "  end_lat end_lng member_casual  is_equity  \n",
       "0     NaN     NaN           NaN        NaN  \n",
       "1     NaN     NaN           NaN        NaN  \n",
       "2     NaN     NaN           NaN        NaN  \n",
       "3     NaN     NaN           NaN        NaN  \n",
       "4     NaN     NaN           NaN        NaN  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikedata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['duration_sec', 'start_time', 'end_time', 'start_station_id',\n",
       "       'start_station_name', 'start_station_latitude',\n",
       "       'start_station_longitude', 'end_station_id', 'end_station_name',\n",
       "       'end_station_latitude', 'end_station_longitude', 'bike_id', 'user_type',\n",
       "       'bike_share_for_all_trip', 'rental_access_method', 'ride_id',\n",
       "       'rideable_type', 'started_at', 'ended_at', 'start_lat', 'start_lng',\n",
       "       'end_lat', 'end_lng', 'member_casual', 'is_equity'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikedata.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These looks like a lot of columns and even some names that look like they hold the same information, and quite a few columns filled with 'NaN's"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikedata[bikedata['started_at'].isna()]['start_time'].count() + bikedata[bikedata['start_time'].isna()]['started_at'].count() == bikedata.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Counting the the instances of 'start_time' while 'started_at' is not available, and 'started_at' while 'start_time is not available results in the length of the database. \n",
    "\n",
    "Sometime during the start of this database, there was a switch in the formatting of the columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: What columns are switched and when did the change happen"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['duration_sec', 'start_time', 'end_time', 'start_station_id',\n",
       "       'start_station_name', 'start_station_latitude',\n",
       "       'start_station_longitude', 'end_station_id', 'end_station_name',\n",
       "       'end_station_latitude', 'end_station_longitude', 'bike_id',\n",
       "       'user_type'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y2017.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ride_id', 'rideable_type', 'started_at', 'ended_at',\n",
       "       'start_station_name', 'start_station_id', 'end_station_name',\n",
       "       'end_station_id', 'start_lat', 'start_lng', 'end_lat', 'end_lng',\n",
       "       'member_casual'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y202007.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'end_station_id',\n",
       " 'end_station_name',\n",
       " 'start_station_id',\n",
       " 'start_station_name'}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(y2017.columns) & set(y202006.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Used start_time since: 2017-06-28 09:47:36.3470\n",
      "Used start_time until: 2020-04-01 23:59:54\n",
      "Used started_at since: 2020-04-01 00:00:38\n",
      "Used started_at until: 2020-07-31 23:58:49\n"
     ]
    }
   ],
   "source": [
    "print('Used start_time since: ' + bikedata['start_time'].astype(str).str[:].value_counts().index.sort_values(ascending=True)[0])\n",
    "print('Used start_time until: ' + bikedata['start_time'].astype(str).str[:].value_counts().index.sort_values(ascending=False)[1])\n",
    "print('Used started_at since: ' + bikedata['started_at'].astype(str).str[:].value_counts().index.sort_values(ascending=True)[0])\n",
    "print('Used started_at until: ' + bikedata['started_at'].astype(str).str[:].value_counts().index.sort_values(ascending=False)[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Only 4 columns are shared from the old set to the new set, despite that, several columns look to be just renamed while others are slightly rebadged. However, given the end time of the old system and the start time of the new system, there looks to be some overlap."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Remove overlaps / duplicates"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "y2017['dataset'] = 'y2017'\n",
    "y201801['dataset'] = 'y201801'\n",
    "y201802['dataset'] = 'y201802'\n",
    "y201803['dataset'] = 'y201803'\n",
    "y201804['dataset'] = 'y201804'\n",
    "y201805['dataset'] = 'y201805'\n",
    "y201806['dataset'] = 'y201806'\n",
    "y201807['dataset'] = 'y201807'\n",
    "y201808['dataset'] = 'y201808'\n",
    "y201809['dataset'] = 'y201809'\n",
    "y201810['dataset'] = 'y201810'\n",
    "y201811['dataset'] = 'y201811'\n",
    "y201812['dataset'] = 'y201812'\n",
    "y201901['dataset'] = 'y201901'\n",
    "y201902['dataset'] = 'y201902'\n",
    "y201903['dataset'] = 'y201903'\n",
    "y201904['dataset'] = 'y201904'\n",
    "y201905['dataset'] = 'y201905'\n",
    "y201906['dataset'] = 'y201906'\n",
    "y201907['dataset'] = 'y201907'\n",
    "y201908['dataset'] = 'y201908'\n",
    "y201909['dataset'] = 'y201909'\n",
    "y201910['dataset'] = 'y201910'\n",
    "y201911['dataset'] = 'y201911'\n",
    "y201912['dataset'] = 'y201912'\n",
    "y202001['dataset'] = 'y202001'\n",
    "y202002['dataset'] = 'y202002'\n",
    "y202003['dataset'] = 'y202003'\n",
    "y202004['dataset'] = 'y202004'\n",
    "y202005['dataset'] = 'y202005'\n",
    "y202006['dataset'] = 'y202006'\n",
    "y202007['dataset'] = 'y202007'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "oldcols = y2017.append(y201801).append(y201802).append(y201803).append(y201804).append(y201805).append(y201806).append(y201807).append(y201808).append(y201809).append(y201810).append(y201811).append(y201812).append(y201901).append(y201902).append(y201903).append(y201904).append(y201905).append(y201906).append(y201907).append(y201908).append(y201909).append(y201910).append(y201911).append(y201912).append(y202001).append(y202002).append(y202003)\n",
    "newcols = y202004.append(y202005).append(y202006).append(y202007)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['duration_sec', 'start_time', 'end_time', 'start_station_id',\n",
       "       'start_station_name', 'start_station_latitude',\n",
       "       'start_station_longitude', 'end_station_id', 'end_station_name',\n",
       "       'end_station_latitude', 'end_station_longitude', 'bike_id', 'user_type',\n",
       "       'dataset', 'bike_share_for_all_trip', 'rental_access_method'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oldcols.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ride_id', 'rideable_type', 'started_at', 'ended_at',\n",
       "       'start_station_name', 'start_station_id', 'end_station_name',\n",
       "       'end_station_id', 'start_lat', 'start_lng', 'end_lat', 'end_lng',\n",
       "       'member_casual', 'dataset', 'is_equity'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newcols.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "oldcols['start_yymm'] = oldcols['start_time'].astype(str).str[:7]\n",
    "newcols['start_yymm'] = newcols['started_at'].astype(str).str[:7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>duration_sec</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dataset</th>\n",
       "      <th>start_yymm</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>y202001</th>\n",
       "      <th>2020-01</th>\n",
       "      <td>295854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">y202002</th>\n",
       "      <th>2020-02</th>\n",
       "      <td>424789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03</th>\n",
       "      <td>7565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">y202003</th>\n",
       "      <th>2020-03</th>\n",
       "      <td>175067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-04</th>\n",
       "      <td>1732</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    duration_sec\n",
       "dataset start_yymm              \n",
       "y202001 2020-01           295854\n",
       "y202002 2020-02           424789\n",
       "        2020-03             7565\n",
       "y202003 2020-03           175067\n",
       "        2020-04             1732"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oldcols[['dataset', 'start_yymm', 'duration_sec']].groupby(['dataset', 'start_yymm']).count().tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dataset</th>\n",
       "      <th>start_yymm</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>y202004</th>\n",
       "      <th>2020-04</th>\n",
       "      <td>84259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y202005</th>\n",
       "      <th>2020-05</th>\n",
       "      <td>138251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y202006</th>\n",
       "      <th>2020-06</th>\n",
       "      <td>158168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y202007</th>\n",
       "      <th>2020-07</th>\n",
       "      <td>154967</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    ride_id\n",
       "dataset start_yymm         \n",
       "y202004 2020-04       84259\n",
       "y202005 2020-05      138251\n",
       "y202006 2020-06      158168\n",
       "y202007 2020-07      154967"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newcols[['dataset', 'start_yymm', 'ride_id']].groupby(['dataset', 'start_yymm']).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration_sec</th>\n",
       "      <th>start_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>...</th>\n",
       "      <th>ride_id</th>\n",
       "      <th>rideable_type</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>member_casual</th>\n",
       "      <th>is_equity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>62618</th>\n",
       "      <td>184.0</td>\n",
       "      <td>2020-03-01 15:59:07</td>\n",
       "      <td>2020-03-01 16:02:12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.291022</td>\n",
       "      <td>-121.849144</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.294455</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62623</th>\n",
       "      <td>167.0</td>\n",
       "      <td>2020-03-01 21:03:10</td>\n",
       "      <td>2020-03-01 21:05:58</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.291145</td>\n",
       "      <td>-121.849215</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.294452</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62646</th>\n",
       "      <td>515.0</td>\n",
       "      <td>2020-03-01 16:18:04</td>\n",
       "      <td>2020-03-01 16:26:40</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.293233</td>\n",
       "      <td>-121.881765</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.305733</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62657</th>\n",
       "      <td>222.0</td>\n",
       "      <td>2020-03-01 12:51:13</td>\n",
       "      <td>2020-03-01 12:54:56</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.293674</td>\n",
       "      <td>-121.851900</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.291026</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62691</th>\n",
       "      <td>197.0</td>\n",
       "      <td>2020-03-01 16:46:45</td>\n",
       "      <td>2020-03-01 16:50:03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.294480</td>\n",
       "      <td>-121.852444</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.291145</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176765</th>\n",
       "      <td>2101.0</td>\n",
       "      <td>2020-03-01 15:34:57</td>\n",
       "      <td>2020-03-01 16:09:59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.809066</td>\n",
       "      <td>-122.474850</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.805210</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176766</th>\n",
       "      <td>2205.0</td>\n",
       "      <td>2020-03-01 15:36:34</td>\n",
       "      <td>2020-03-01 16:13:19</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.809074</td>\n",
       "      <td>-122.474918</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.805186</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176767</th>\n",
       "      <td>2035.0</td>\n",
       "      <td>2020-03-01 15:36:28</td>\n",
       "      <td>2020-03-01 16:10:23</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.809100</td>\n",
       "      <td>-122.474939</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.805173</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176770</th>\n",
       "      <td>1183.0</td>\n",
       "      <td>2020-03-01 12:26:56</td>\n",
       "      <td>2020-03-01 12:46:40</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.809138</td>\n",
       "      <td>-122.415689</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.806195</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176777</th>\n",
       "      <td>1018.0</td>\n",
       "      <td>2020-03-01 12:29:54</td>\n",
       "      <td>2020-03-01 12:46:53</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.809176</td>\n",
       "      <td>-122.415754</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.806158</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7512 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        duration_sec           start_time             end_time  \\\n",
       "62618          184.0  2020-03-01 15:59:07  2020-03-01 16:02:12   \n",
       "62623          167.0  2020-03-01 21:03:10  2020-03-01 21:05:58   \n",
       "62646          515.0  2020-03-01 16:18:04  2020-03-01 16:26:40   \n",
       "62657          222.0  2020-03-01 12:51:13  2020-03-01 12:54:56   \n",
       "62691          197.0  2020-03-01 16:46:45  2020-03-01 16:50:03   \n",
       "...              ...                  ...                  ...   \n",
       "176765        2101.0  2020-03-01 15:34:57  2020-03-01 16:09:59   \n",
       "176766        2205.0  2020-03-01 15:36:34  2020-03-01 16:13:19   \n",
       "176767        2035.0  2020-03-01 15:36:28  2020-03-01 16:10:23   \n",
       "176770        1183.0  2020-03-01 12:26:56  2020-03-01 12:46:40   \n",
       "176777        1018.0  2020-03-01 12:29:54  2020-03-01 12:46:53   \n",
       "\n",
       "        start_station_id start_station_name  start_station_latitude  \\\n",
       "62618                NaN                NaN               37.291022   \n",
       "62623                NaN                NaN               37.291145   \n",
       "62646                NaN                NaN               37.293233   \n",
       "62657                NaN                NaN               37.293674   \n",
       "62691                NaN                NaN               37.294480   \n",
       "...                  ...                ...                     ...   \n",
       "176765               NaN                NaN               37.809066   \n",
       "176766               NaN                NaN               37.809074   \n",
       "176767               NaN                NaN               37.809100   \n",
       "176770               NaN                NaN               37.809138   \n",
       "176777               NaN                NaN               37.809176   \n",
       "\n",
       "        start_station_longitude  end_station_id end_station_name  \\\n",
       "62618               -121.849144             NaN              NaN   \n",
       "62623               -121.849215             NaN              NaN   \n",
       "62646               -121.881765             NaN              NaN   \n",
       "62657               -121.851900             NaN              NaN   \n",
       "62691               -121.852444             NaN              NaN   \n",
       "...                         ...             ...              ...   \n",
       "176765              -122.474850             NaN              NaN   \n",
       "176766              -122.474918             NaN              NaN   \n",
       "176767              -122.474939             NaN              NaN   \n",
       "176770              -122.415689             NaN              NaN   \n",
       "176777              -122.415754             NaN              NaN   \n",
       "\n",
       "        end_station_latitude  ...  ride_id  rideable_type started_at ended_at  \\\n",
       "62618              37.294455  ...      NaN            NaN        NaN      NaN   \n",
       "62623              37.294452  ...      NaN            NaN        NaN      NaN   \n",
       "62646              37.305733  ...      NaN            NaN        NaN      NaN   \n",
       "62657              37.291026  ...      NaN            NaN        NaN      NaN   \n",
       "62691              37.291145  ...      NaN            NaN        NaN      NaN   \n",
       "...                      ...  ...      ...            ...        ...      ...   \n",
       "176765             37.805210  ...      NaN            NaN        NaN      NaN   \n",
       "176766             37.805186  ...      NaN            NaN        NaN      NaN   \n",
       "176767             37.805173  ...      NaN            NaN        NaN      NaN   \n",
       "176770             37.806195  ...      NaN            NaN        NaN      NaN   \n",
       "176777             37.806158  ...      NaN            NaN        NaN      NaN   \n",
       "\n",
       "       start_lat start_lng end_lat end_lng member_casual  is_equity  \n",
       "62618        NaN       NaN     NaN     NaN           NaN        NaN  \n",
       "62623        NaN       NaN     NaN     NaN           NaN        NaN  \n",
       "62646        NaN       NaN     NaN     NaN           NaN        NaN  \n",
       "62657        NaN       NaN     NaN     NaN           NaN        NaN  \n",
       "62691        NaN       NaN     NaN     NaN           NaN        NaN  \n",
       "...          ...       ...     ...     ...           ...        ...  \n",
       "176765       NaN       NaN     NaN     NaN           NaN        NaN  \n",
       "176766       NaN       NaN     NaN     NaN           NaN        NaN  \n",
       "176767       NaN       NaN     NaN     NaN           NaN        NaN  \n",
       "176770       NaN       NaN     NaN     NaN           NaN        NaN  \n",
       "176777       NaN       NaN     NaN     NaN           NaN        NaN  \n",
       "\n",
       "[7512 rows x 25 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikedata[bikedata.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicates start at: 2020-03-01 00:00:18\n",
      "Duplicates end at: 2020-03-01 23:56:31\n"
     ]
    }
   ],
   "source": [
    "print('Duplicates start at: ' + bikedata[bikedata.duplicated()]['start_time'].min())\n",
    "print('Duplicates end at: ' + bikedata[bikedata.duplicated()]['start_time'].max())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "February has some of March's rides and March has some of April's rides\n",
    "\n",
    "Duplicates only stop in March due to the format change for April's rides\n",
    "\n",
    "Can't use 'oldcols' or 'newcols' here as they have the 'dataset' column which distinguishes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicate times and locations: 7532\n",
      "Duplicate times, locations, and bike_id: 7529\n",
      "Duplicates within individual datasets: 0\n"
     ]
    }
   ],
   "source": [
    "print('Duplicate times and locations: '+ (oldcols[['start_time', 'end_time', 'start_station_longitude', 'start_station_latitude', 'end_station_longitude', 'end_station_latitude']].duplicated().sum()).astype(str))\n",
    "print('Duplicate times, locations, and bike_id: ' + (oldcols[['bike_id', 'start_time', 'end_time', 'start_station_longitude', 'start_station_latitude', 'end_station_longitude', 'end_station_latitude']].duplicated().sum()).astype(str))\n",
    "print('Duplicates within individual datasets: ' + (oldcols[['bike_id', 'dataset', 'start_time', 'end_time', 'start_station_longitude', 'start_station_latitude', 'end_station_longitude', 'end_station_latitude']].duplicated().sum()).astype(str))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7532 rides share their start and end times and locations, while not impossible, 7529 did it while sharing the same bike, (same bike_id). However, within the individual datasets, they don't have duplicates, meaning that they are just duplicates from one month's database base into the other's. \n",
    "\n",
    "The numbers don't fully line up as when aggregating them there are 7565 bike rides in the February dataset that took place in March whiel the duplicated times and locations, and bike_id accounts for 7529 of them, leaving 36 bike rides unaccounted for. However, given that the dataset is over 6 million columns long, missing 36 doesn't seem to be a huge deal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remove the ones that got carried over and create oldcols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing would be duplicates and some entries from April 2020\n",
    "y202002 = y202002[y202002['start_time'].astype(str).str[5:7] == '02']\n",
    "y202003 = y202003[y202003['start_time'].astype(str).str[5:7] == '03']\n",
    "\n",
    "oldcols = y2017.append(y201801).append(y201802).append(y201803).append(y201804).append(y201805).append(y201806).append(y201807).append(y201808).append(y201809).append(y201810).append(y201811).append(y201812).append(y201901).append(y201902).append(y201903).append(y201904).append(y201905).append(y201906).append(y201907).append(y201908).append(y201909).append(y201910).append(y201911).append(y201912).append(y202001).append(y202002).append(y202003)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop the 'start_yymm' column\n",
    "newcols.drop(['start_yymm'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration_sec</th>\n",
       "      <th>start_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>bike_id</th>\n",
       "      <th>user_type</th>\n",
       "      <th>dataset</th>\n",
       "      <th>bike_share_for_all_trip</th>\n",
       "      <th>rental_access_method</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [duration_sec, start_time, end_time, start_station_id, start_station_name, start_station_latitude, start_station_longitude, end_station_id, end_station_name, end_station_latitude, end_station_longitude, bike_id, user_type, dataset, bike_share_for_all_trip, rental_access_method]\n",
       "Index: []"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oldcols[oldcols.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Rename old columns to match new names"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['bike_id', 'bike_share_for_all_trip', 'duration_sec',\n",
       "       'end_station_latitude', 'end_station_longitude', 'end_time',\n",
       "       'rental_access_method', 'start_station_latitude',\n",
       "       'start_station_longitude', 'start_time', 'user_type'], dtype=object)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.setdiff1d(oldcols.columns, newcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['end_lat', 'end_lng', 'ended_at', 'is_equity', 'member_casual',\n",
       "       'ride_id', 'rideable_type', 'start_lat', 'start_lng', 'started_at'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.setdiff1d(newcols.columns, oldcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "oldcols.rename(columns={'start_time': 'started_at', 'end_time': 'ended_at',\n",
    "                        'start_station_latitude': 'start_lat', 'start_station_longitude': 'start_lng',\n",
    "                        'end_station_latitude': 'end_lat', 'end_station_longitude': 'end_lng'}, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['bike_id', 'bike_share_for_all_trip', 'duration_sec',\n",
       "       'rental_access_method', 'user_type'], dtype=object)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.setdiff1d(oldcols.columns, newcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['is_equity', 'member_casual', 'ride_id', 'rideable_type'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.setdiff1d(newcols.columns, oldcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'dataset',\n",
       " 'end_lat',\n",
       " 'end_lng',\n",
       " 'end_station_id',\n",
       " 'end_station_name',\n",
       " 'ended_at',\n",
       " 'start_lat',\n",
       " 'start_lng',\n",
       " 'start_station_id',\n",
       " 'start_station_name',\n",
       " 'started_at'}"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(newcols.columns) & set(oldcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Rename the other columns to make them less 'wordy' to match the renamed ones"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "oldcols.rename(columns = {'start_station_id': 'start_id', 'end_station_id': 'end_id',\n",
    "                         'start_station_name': 'start_name', 'end_station_name': 'end_name'}, inplace=True)\n",
    "\n",
    "newcols.rename(columns = {'start_station_id': 'start_id', 'end_station_id': 'end_id',\n",
    "                         'start_station_name': 'start_name', 'end_station_name': 'end_name'}, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'dataset',\n",
       " 'end_id',\n",
       " 'end_lat',\n",
       " 'end_lng',\n",
       " 'end_name',\n",
       " 'ended_at',\n",
       " 'start_id',\n",
       " 'start_lat',\n",
       " 'start_lng',\n",
       " 'start_name',\n",
       " 'started_at'}"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(newcols.columns) & set(oldcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Find if any of the other columns match up"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['bike_id', 'bike_share_for_all_trip', 'duration_sec',\n",
       "       'rental_access_method', 'user_type'], dtype=object)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.setdiff1d(oldcols.columns, newcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['is_equity', 'member_casual', 'ride_id', 'rideable_type'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.setdiff1d(newcols.columns, oldcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bike_id</th>\n",
       "      <th>bike_share_for_all_trip</th>\n",
       "      <th>duration_sec</th>\n",
       "      <th>rental_access_method</th>\n",
       "      <th>user_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>96</td>\n",
       "      <td>NaN</td>\n",
       "      <td>80110</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>88</td>\n",
       "      <td>NaN</td>\n",
       "      <td>78800</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1094</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45768</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2831</td>\n",
       "      <td>NaN</td>\n",
       "      <td>62172</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3167</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43603</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Subscriber</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176789</th>\n",
       "      <td>633095</td>\n",
       "      <td>NaN</td>\n",
       "      <td>192</td>\n",
       "      <td>app</td>\n",
       "      <td>Subscriber</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176790</th>\n",
       "      <td>999960</td>\n",
       "      <td>NaN</td>\n",
       "      <td>63</td>\n",
       "      <td>app</td>\n",
       "      <td>Subscriber</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176791</th>\n",
       "      <td>633095</td>\n",
       "      <td>NaN</td>\n",
       "      <td>310</td>\n",
       "      <td>clipper</td>\n",
       "      <td>Subscriber</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176795</th>\n",
       "      <td>999960</td>\n",
       "      <td>NaN</td>\n",
       "      <td>78</td>\n",
       "      <td>app</td>\n",
       "      <td>Subscriber</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176798</th>\n",
       "      <td>633095</td>\n",
       "      <td>NaN</td>\n",
       "      <td>333</td>\n",
       "      <td>app</td>\n",
       "      <td>Subscriber</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5786114 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        bike_id bike_share_for_all_trip  duration_sec rental_access_method  \\\n",
       "0            96                     NaN         80110                  NaN   \n",
       "1            88                     NaN         78800                  NaN   \n",
       "2          1094                     NaN         45768                  NaN   \n",
       "3          2831                     NaN         62172                  NaN   \n",
       "4          3167                     NaN         43603                  NaN   \n",
       "...         ...                     ...           ...                  ...   \n",
       "176789   633095                     NaN           192                  app   \n",
       "176790   999960                     NaN            63                  app   \n",
       "176791   633095                     NaN           310              clipper   \n",
       "176795   999960                     NaN            78                  app   \n",
       "176798   633095                     NaN           333                  app   \n",
       "\n",
       "         user_type  \n",
       "0         Customer  \n",
       "1         Customer  \n",
       "2         Customer  \n",
       "3         Customer  \n",
       "4       Subscriber  \n",
       "...            ...  \n",
       "176789  Subscriber  \n",
       "176790  Subscriber  \n",
       "176791  Subscriber  \n",
       "176795  Subscriber  \n",
       "176798  Subscriber  \n",
       "\n",
       "[5786114 rows x 5 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oldcols[['bike_id', 'bike_share_for_all_trip', 'duration_sec', 'rental_access_method', 'user_type']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "      <th>is_equity</th>\n",
       "      <th>member_casual</th>\n",
       "      <th>rideable_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5A1FF31692371859</td>\n",
       "      <td>NaN</td>\n",
       "      <td>casual</td>\n",
       "      <td>electric_bike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>D8D5BA2D4F051133</td>\n",
       "      <td>NaN</td>\n",
       "      <td>casual</td>\n",
       "      <td>electric_bike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>A3633A9140CA4FF8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>casual</td>\n",
       "      <td>electric_bike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>301F57EB0197A5E0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>casual</td>\n",
       "      <td>electric_bike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9429C701AF5744B3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>casual</td>\n",
       "      <td>electric_bike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154962</th>\n",
       "      <td>E084E6C3FA402D75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>casual</td>\n",
       "      <td>docked_bike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154963</th>\n",
       "      <td>007588EAADE2C43D</td>\n",
       "      <td>NaN</td>\n",
       "      <td>casual</td>\n",
       "      <td>docked_bike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154964</th>\n",
       "      <td>7B538D4F6299E5F9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>casual</td>\n",
       "      <td>docked_bike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154965</th>\n",
       "      <td>06B455C0C83B9C16</td>\n",
       "      <td>NaN</td>\n",
       "      <td>casual</td>\n",
       "      <td>docked_bike</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154966</th>\n",
       "      <td>20E2287988214948</td>\n",
       "      <td>NaN</td>\n",
       "      <td>casual</td>\n",
       "      <td>docked_bike</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>535645 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 ride_id is_equity member_casual  rideable_type\n",
       "0       5A1FF31692371859       NaN        casual  electric_bike\n",
       "1       D8D5BA2D4F051133       NaN        casual  electric_bike\n",
       "2       A3633A9140CA4FF8       NaN        casual  electric_bike\n",
       "3       301F57EB0197A5E0       NaN        casual  electric_bike\n",
       "4       9429C701AF5744B3       NaN        casual  electric_bike\n",
       "...                  ...       ...           ...            ...\n",
       "154962  E084E6C3FA402D75       NaN        casual    docked_bike\n",
       "154963  007588EAADE2C43D       NaN        casual    docked_bike\n",
       "154964  7B538D4F6299E5F9       NaN        casual    docked_bike\n",
       "154965  06B455C0C83B9C16       NaN        casual    docked_bike\n",
       "154966  20E2287988214948       NaN        casual    docked_bike\n",
       "\n",
       "[535645 rows x 4 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newcols[['ride_id', 'is_equity', 'member_casual', 'rideable_type']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Subscriber    4551190\n",
       "Customer      1234924\n",
       "Name: user_type, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oldcols['user_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "casual    319097\n",
       "member    216548\n",
       "Name: member_casual, dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newcols['member_casual'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>duration_sec</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_type</th>\n",
       "      <th>bike_share_for_all_trip</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Customer</th>\n",
       "      <th>No</th>\n",
       "      <td>682642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Subscriber</th>\n",
       "      <th>No</th>\n",
       "      <td>3104896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yes</th>\n",
       "      <td>339907</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    duration_sec\n",
       "user_type  bike_share_for_all_trip              \n",
       "Customer   No                             682642\n",
       "Subscriber No                            3104896\n",
       "           Yes                            339907"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oldcols[['user_type', 'bike_share_for_all_trip', 'duration_sec']].groupby(['user_type', 'bike_share_for_all_trip']).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>member_casual</th>\n",
       "      <th>is_equity</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>casual</th>\n",
       "      <th>False</th>\n",
       "      <td>84519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">member</th>\n",
       "      <th>False</th>\n",
       "      <td>45029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>8703</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         ride_id\n",
       "member_casual is_equity         \n",
       "casual        False        84519\n",
       "member        False        45029\n",
       "              True          8703"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newcols[['member_casual', 'is_equity', 'ride_id']].groupby(['member_casual', 'is_equity']).count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While not exact, 'member_casual' looks to be a rebadged 'user_type', and 'bike_share_for_all_trip' looks to be a rebadged 'is_equity'. 'user_type'/'member_casual' has only two values, one value implying that the user is within a group 'Subscriber' and 'member' while 'Customer' and 'casual' imply that they aren't in that group. 'bike_share_for_all_trip'/'is_equity' have two values, the negative one can be a part of both subsets of 'user_type'/'member_casual', while the positive one is only attributed to 'Subscriber'/'member'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Going to use the old column names while the current values, they make the most sense for me\n",
    "oldcols.user_type.replace('Customer', 'Casual', inplace=True)\n",
    "oldcols.user_type.replace('Subscriber', 'Member', inplace=True)\n",
    "\n",
    "newcols.rename(columns={'member_casual': 'user_type', 'is_equity': 'bsfa'}, inplace=True)\n",
    "\n",
    "newcols.user_type.replace('casual', 'Casual', inplace=True)\n",
    "newcols.user_type.replace('member', 'Member', inplace=True)\n",
    "\n",
    "# Also renaming 'bike_share_for_all_trip' to 'bsfa' as it is way too long and prone to spelling errors\n",
    "oldcols.rename(columns={'bike_share_for_all_trip': 'bsfa'}, inplace=True)\n",
    "oldcols.bsfa.replace('No', False, inplace=True)\n",
    "oldcols.bsfa.replace('Yes', True, inplace=True)\n",
    "\n",
    "newcols.bsfa.replace('False', False, inplace=True)\n",
    "newcols.bsfa.replace('True', True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  from ipykernel import kernelapp as app\n",
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  app.launch_new_instance()\n"
     ]
    }
   ],
   "source": [
    "# Creating a new column combines both 'user_type' and 'bsfa' as 'bsfa' is a subset within 'member' in 'user_type'\n",
    "\n",
    "oldcasual = oldcols[oldcols['user_type'] == 'Casual']\n",
    "newcasual = newcols[newcols['user_type'] == 'Casual']\n",
    "\n",
    "oldmember = oldcols[oldcols['user_type'] == 'Member']\n",
    "newmember = newcols[newcols['user_type'] == 'Member']\n",
    "\n",
    "oldbsfa = oldmember[oldmember['bsfa'] == True]\n",
    "newbsfa = newmember[newmember['bsfa'] == True]\n",
    "\n",
    "oldmember = oldmember[oldmember['bsfa'] != True]\n",
    "newmember = newmember[newmember['bsfa'] != True]\n",
    "\n",
    "oldcasual['user_class'] = 'Casual'\n",
    "newcasual['user_class'] = 'Casual'\n",
    "oldmember['user_class'] = 'Member'\n",
    "newmember['user_class'] = 'Member'\n",
    "oldbsfa['user_class'] = 'BSFA'\n",
    "newbsfa['user_class'] = 'BSFA'\n",
    "\n",
    "oldcols = oldcasual.append(oldmember).append(oldbsfa)\n",
    "newcols = newcasual.append(newmember).append(newbsfa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['bike_id', 'duration_sec', 'rental_access_method'], dtype=object)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.setdiff1d(oldcols.columns, newcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['ride_id', 'rideable_type'], dtype=object)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.setdiff1d(newcols.columns, oldcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'bsfa',\n",
       " 'dataset',\n",
       " 'end_id',\n",
       " 'end_lat',\n",
       " 'end_lng',\n",
       " 'end_name',\n",
       " 'ended_at',\n",
       " 'start_id',\n",
       " 'start_lat',\n",
       " 'start_lng',\n",
       " 'start_name',\n",
       " 'started_at',\n",
       " 'user_class',\n",
       " 'user_type'}"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(oldcols.columns) & set(newcols.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The remainder of the columns of 'bike_id', 'duration_sec', and 'rental_access_method' for the old system, and 'ride_id' and 'rideable_type' for the new system don't look like they can be recreated within one another\n",
    "\n",
    "\n",
    "bike_id - bike number used to tag individual bikes that isn't carried over in the new columns\n",
    "\n",
    "duration_sec - seconds of trip, this can be easily recreated with 'ended_at' - 'started_at'\n",
    "\n",
    "rental_access_method - this can't be recreated, represents how the user rented the bike\n",
    "\n",
    "ride_id - unique identifier of each bike trip, looks to be entirely random 16 character hexadecimal code\n",
    "\n",
    "rideable_type - determining if the bike is a 'docked' one or an 'electric' one, possibly a numbering system in bike_id could give some indication if that bike was a docked or electric one"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Find pattern within 'bike_id' to recreate 'rideable_type'\n",
    "\n",
    "Given information from [Bay Wheels](https://medium.com/@baywheels/bringing-ebikes-back-in-san-francisco-and-upcoming-ebike-pricing-changes-b574f621f2db), [TechCrunch](https://techcrunch.com/2019/12/23/after-battery-fires-lyfts-e-bikes-are-back-in-san-francisco/) and the [SFChronicle](https://www.sfchronicle.com/business/article/Lyft-s-Bay-Wheels-to-resume-e-bike-rentals-in-SF-14821170.php), the ebikes first appeared in June of 2019, before being removed the following month due to battery fires. They reappeared in November of 2019 in San Jose before coming back to San Francisco the next month."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    3.436488e+06\n",
       "mean     2.688503e+03\n",
       "std      1.706994e+03\n",
       "min      1.000000e+01\n",
       "25%      1.312000e+03\n",
       "50%      2.541000e+03\n",
       "75%      3.723000e+03\n",
       "max      7.196000e+03\n",
       "Name: bike_id, dtype: float64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oldcols[oldcols['started_at'].astype(str).str[0:7] < '2019-06']['bike_id'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    449874.000000\n",
       "mean      98480.699983\n",
       "std      218268.711581\n",
       "min          12.000000\n",
       "25%        1238.000000\n",
       "50%        2425.000000\n",
       "75%        3585.000000\n",
       "max      999422.000000\n",
       "Name: bike_id, dtype: float64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ebike_trial = ['2019-06', '2019-07']\n",
    "oldcols[oldcols['started_at'].astype(str).str[0:7].isin(ebike_trial)]['bike_id'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    668444.000000\n",
       "mean       6690.365818\n",
       "std        4564.825211\n",
       "min          12.000000\n",
       "25%        2038.000000\n",
       "50%        9551.000000\n",
       "75%       10538.000000\n",
       "max       13112.000000\n",
       "Name: bike_id, dtype: float64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "without_ebikes = ['2019-08', '2019-09', '2019-10']\n",
    "oldcols[oldcols['started_at'].astype(str).str[0:7].isin(without_ebikes)]['bike_id'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1.231308e+06\n",
       "mean     2.637262e+05\n",
       "std      3.025011e+05\n",
       "min      4.000000e+00\n",
       "25%      1.032800e+04\n",
       "50%      1.232740e+05\n",
       "75%      4.841170e+05\n",
       "max      9.999600e+05\n",
       "Name: bike_id, dtype: float64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with_ebikes = ['2019-11', '2019-12', '2020-01', '2020-02', '2020-03']\n",
    "oldcols[oldcols['started_at'].astype(str).str[0:7].isin(with_ebikes)]['bike_id'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The notable difference in months with ebikes is that the maximum digit is in the 6 figure range, while the months without ebikes, they only stick to 5 digits and under. They key periods being from May to November of 2019 as this period saw Bay Wheels operating without, with, without, and finally with ebikes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  import sys\n"
     ]
    }
   ],
   "source": [
    "oldcols['dig_len'] = oldcols['bike_id'].astype(str).str.len()\n",
    "\n",
    "normal = oldcols[oldcols['dig_len'] < 6]\n",
    "ebike = oldcols[oldcols['dig_len'] == 6]\n",
    "\n",
    "normal['ride_type'] = 'Docked'\n",
    "ebike['ride_type'] = 'Electric'\n",
    "oldcols = normal.append(ebike)\n",
    "\n",
    "oldcols.drop(columns = 'dig_len', axis = 1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "newcols.rename(columns={'rideable_type': 'ride_type'}, inplace=True)\n",
    "newcols.ride_type.replace('docked_bike', 'Docked', inplace=True)\n",
    "newcols.ride_type.replace('electric_bike', 'Electric', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['bike_id', 'duration_sec', 'rental_access_method'], dtype=object)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.setdiff1d(oldcols.columns, newcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['ride_id'], dtype=object)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.setdiff1d(newcols.columns, oldcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Drop the 'duration_sec' column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "oldcols.drop(['duration_sec'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['bike_id', 'rental_access_method'], dtype=object)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.setdiff1d(oldcols.columns, newcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['ride_id'], dtype=object)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.setdiff1d(newcols.columns, oldcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'bsfa',\n",
       " 'dataset',\n",
       " 'end_id',\n",
       " 'end_lat',\n",
       " 'end_lng',\n",
       " 'end_name',\n",
       " 'ended_at',\n",
       " 'ride_type',\n",
       " 'start_id',\n",
       " 'start_lat',\n",
       " 'start_lng',\n",
       " 'start_name',\n",
       " 'started_at',\n",
       " 'user_class',\n",
       " 'user_type'}"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(oldcols.columns) & set(newcols.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the only differing columns between 'bike_id', 'rental_access_method', and 'ride_id', none of them can be used to replicate each other, and it is time to merge in a new dataset to fix column types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: rename 'rental_access_method' into something less wordy, and capitalize the values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "oldcols.rename(columns={'rental_access_method': 'rent_method'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "oldcols.rent_method.replace('app', 'App', inplace=True)\n",
    "oldcols.rent_method.replace('clipper', 'Clipper', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['bike_id', 'rent_method'], dtype=object)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.setdiff1d(oldcols.columns, newcols.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Merge Together"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "bikes = oldcols.append(newcols)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6321759, 18)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "started_at      object\n",
       "ended_at        object\n",
       "start_id       float64\n",
       "start_name      object\n",
       "start_lat      float64\n",
       "start_lng      float64\n",
       "end_id         float64\n",
       "end_name        object\n",
       "end_lat        float64\n",
       "end_lng        float64\n",
       "bike_id        float64\n",
       "user_type       object\n",
       "dataset         object\n",
       "bsfa            object\n",
       "rent_method     object\n",
       "user_class      object\n",
       "ride_type       object\n",
       "ride_id         object\n",
       "dtype: object"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_id</th>\n",
       "      <th>start_name</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_id</th>\n",
       "      <th>end_name</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>bike_id</th>\n",
       "      <th>user_type</th>\n",
       "      <th>dataset</th>\n",
       "      <th>bsfa</th>\n",
       "      <th>rent_method</th>\n",
       "      <th>user_class</th>\n",
       "      <th>ride_type</th>\n",
       "      <th>ride_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-12-31 16:57:39.6540</td>\n",
       "      <td>2018-01-01 15:12:50.2450</td>\n",
       "      <td>74.0</td>\n",
       "      <td>Laguna St at Hayes St</td>\n",
       "      <td>37.776435</td>\n",
       "      <td>-122.426244</td>\n",
       "      <td>43.0</td>\n",
       "      <td>San Francisco Public Library (Grove St at Hyde...</td>\n",
       "      <td>37.778768</td>\n",
       "      <td>-122.415929</td>\n",
       "      <td>96.0</td>\n",
       "      <td>Casual</td>\n",
       "      <td>y2017</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-12-31 15:56:34.8420</td>\n",
       "      <td>2018-01-01 13:49:55.6170</td>\n",
       "      <td>284.0</td>\n",
       "      <td>Yerba Buena Center for the Arts (Howard St at ...</td>\n",
       "      <td>37.784872</td>\n",
       "      <td>-122.400876</td>\n",
       "      <td>96.0</td>\n",
       "      <td>Dolores St at 15th St</td>\n",
       "      <td>37.766210</td>\n",
       "      <td>-122.426614</td>\n",
       "      <td>88.0</td>\n",
       "      <td>Casual</td>\n",
       "      <td>y2017</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-12-31 22:45:48.4110</td>\n",
       "      <td>2018-01-01 11:28:36.8830</td>\n",
       "      <td>245.0</td>\n",
       "      <td>Downtown Berkeley BART</td>\n",
       "      <td>37.870348</td>\n",
       "      <td>-122.267764</td>\n",
       "      <td>245.0</td>\n",
       "      <td>Downtown Berkeley BART</td>\n",
       "      <td>37.870348</td>\n",
       "      <td>-122.267764</td>\n",
       "      <td>1094.0</td>\n",
       "      <td>Casual</td>\n",
       "      <td>y2017</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-12-31 17:31:10.6360</td>\n",
       "      <td>2018-01-01 10:47:23.5310</td>\n",
       "      <td>60.0</td>\n",
       "      <td>8th St at Ringold St</td>\n",
       "      <td>37.774520</td>\n",
       "      <td>-122.409449</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Powell St BART Station (Market St at 5th St)</td>\n",
       "      <td>37.783899</td>\n",
       "      <td>-122.408445</td>\n",
       "      <td>2831.0</td>\n",
       "      <td>Casual</td>\n",
       "      <td>y2017</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2017-12-31 22:51:00.9180</td>\n",
       "      <td>2018-01-01 01:24:47.1660</td>\n",
       "      <td>30.0</td>\n",
       "      <td>San Francisco Caltrain (Townsend St at 4th St)</td>\n",
       "      <td>37.776598</td>\n",
       "      <td>-122.395282</td>\n",
       "      <td>30.0</td>\n",
       "      <td>San Francisco Caltrain (Townsend St at 4th St)</td>\n",
       "      <td>37.776598</td>\n",
       "      <td>-122.395282</td>\n",
       "      <td>1487.0</td>\n",
       "      <td>Casual</td>\n",
       "      <td>y2017</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 started_at                  ended_at  start_id  \\\n",
       "0  2017-12-31 16:57:39.6540  2018-01-01 15:12:50.2450      74.0   \n",
       "1  2017-12-31 15:56:34.8420  2018-01-01 13:49:55.6170     284.0   \n",
       "2  2017-12-31 22:45:48.4110  2018-01-01 11:28:36.8830     245.0   \n",
       "3  2017-12-31 17:31:10.6360  2018-01-01 10:47:23.5310      60.0   \n",
       "5  2017-12-31 22:51:00.9180  2018-01-01 01:24:47.1660      30.0   \n",
       "\n",
       "                                          start_name  start_lat   start_lng  \\\n",
       "0                              Laguna St at Hayes St  37.776435 -122.426244   \n",
       "1  Yerba Buena Center for the Arts (Howard St at ...  37.784872 -122.400876   \n",
       "2                             Downtown Berkeley BART  37.870348 -122.267764   \n",
       "3                               8th St at Ringold St  37.774520 -122.409449   \n",
       "5     San Francisco Caltrain (Townsend St at 4th St)  37.776598 -122.395282   \n",
       "\n",
       "   end_id                                           end_name    end_lat  \\\n",
       "0    43.0  San Francisco Public Library (Grove St at Hyde...  37.778768   \n",
       "1    96.0                              Dolores St at 15th St  37.766210   \n",
       "2   245.0                             Downtown Berkeley BART  37.870348   \n",
       "3     5.0       Powell St BART Station (Market St at 5th St)  37.783899   \n",
       "5    30.0     San Francisco Caltrain (Townsend St at 4th St)  37.776598   \n",
       "\n",
       "      end_lng  bike_id user_type dataset bsfa rent_method user_class  \\\n",
       "0 -122.415929     96.0    Casual   y2017  NaN         NaN     Casual   \n",
       "1 -122.426614     88.0    Casual   y2017  NaN         NaN     Casual   \n",
       "2 -122.267764   1094.0    Casual   y2017  NaN         NaN     Casual   \n",
       "3 -122.408445   2831.0    Casual   y2017  NaN         NaN     Casual   \n",
       "5 -122.395282   1487.0    Casual   y2017  NaN         NaN     Casual   \n",
       "\n",
       "  ride_type ride_id  \n",
       "0    Docked     NaN  \n",
       "1    Docked     NaN  \n",
       "2    Docked     NaN  \n",
       "3    Docked     NaN  \n",
       "5    Docked     NaN  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_id</th>\n",
       "      <th>start_name</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_id</th>\n",
       "      <th>end_name</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>bike_id</th>\n",
       "      <th>user_type</th>\n",
       "      <th>dataset</th>\n",
       "      <th>bsfa</th>\n",
       "      <th>rent_method</th>\n",
       "      <th>user_class</th>\n",
       "      <th>ride_type</th>\n",
       "      <th>ride_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>137749</th>\n",
       "      <td>2020-05-17 19:16:11</td>\n",
       "      <td>2020-05-17 19:35:49</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.3504</td>\n",
       "      <td>-121.9090</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.3407</td>\n",
       "      <td>-121.9137</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Member</td>\n",
       "      <td>y202005</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BSFA</td>\n",
       "      <td>Electric</td>\n",
       "      <td>4F57D5D188E2D88B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137750</th>\n",
       "      <td>2020-05-17 19:40:06</td>\n",
       "      <td>2020-05-17 19:46:13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.3407</td>\n",
       "      <td>-121.9137</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.3504</td>\n",
       "      <td>-121.9089</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Member</td>\n",
       "      <td>y202005</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BSFA</td>\n",
       "      <td>Electric</td>\n",
       "      <td>42F50FEB6A756BB1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137751</th>\n",
       "      <td>2020-05-17 17:50:45</td>\n",
       "      <td>2020-05-17 18:23:03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.3505</td>\n",
       "      <td>-121.9088</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.3431</td>\n",
       "      <td>-121.9120</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Member</td>\n",
       "      <td>y202005</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BSFA</td>\n",
       "      <td>Electric</td>\n",
       "      <td>C8962261981BF769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137758</th>\n",
       "      <td>2020-05-28 10:46:55</td>\n",
       "      <td>2020-05-28 11:41:42</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.3504</td>\n",
       "      <td>-121.9089</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.3466</td>\n",
       "      <td>-121.9052</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Member</td>\n",
       "      <td>y202005</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BSFA</td>\n",
       "      <td>Electric</td>\n",
       "      <td>0676A5DEE027CC01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137764</th>\n",
       "      <td>2020-05-27 19:38:10</td>\n",
       "      <td>2020-05-27 19:48:37</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.3498</td>\n",
       "      <td>-121.9148</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.3504</td>\n",
       "      <td>-121.9090</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Member</td>\n",
       "      <td>y202005</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BSFA</td>\n",
       "      <td>Electric</td>\n",
       "      <td>BD37AEC947A715B4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 started_at             ended_at  start_id start_name  \\\n",
       "137749  2020-05-17 19:16:11  2020-05-17 19:35:49       NaN        NaN   \n",
       "137750  2020-05-17 19:40:06  2020-05-17 19:46:13       NaN        NaN   \n",
       "137751  2020-05-17 17:50:45  2020-05-17 18:23:03       NaN        NaN   \n",
       "137758  2020-05-28 10:46:55  2020-05-28 11:41:42       NaN        NaN   \n",
       "137764  2020-05-27 19:38:10  2020-05-27 19:48:37       NaN        NaN   \n",
       "\n",
       "        start_lat  start_lng  end_id end_name  end_lat   end_lng  bike_id  \\\n",
       "137749    37.3504  -121.9090     NaN      NaN  37.3407 -121.9137      NaN   \n",
       "137750    37.3407  -121.9137     NaN      NaN  37.3504 -121.9089      NaN   \n",
       "137751    37.3505  -121.9088     NaN      NaN  37.3431 -121.9120      NaN   \n",
       "137758    37.3504  -121.9089     NaN      NaN  37.3466 -121.9052      NaN   \n",
       "137764    37.3498  -121.9148     NaN      NaN  37.3504 -121.9090      NaN   \n",
       "\n",
       "       user_type  dataset  bsfa rent_method user_class ride_type  \\\n",
       "137749    Member  y202005  True         NaN       BSFA  Electric   \n",
       "137750    Member  y202005  True         NaN       BSFA  Electric   \n",
       "137751    Member  y202005  True         NaN       BSFA  Electric   \n",
       "137758    Member  y202005  True         NaN       BSFA  Electric   \n",
       "137764    Member  y202005  True         NaN       BSFA  Electric   \n",
       "\n",
       "                 ride_id  \n",
       "137749  4F57D5D188E2D88B  \n",
       "137750  42F50FEB6A756BB1  \n",
       "137751  C8962261981BF769  \n",
       "137758  0676A5DEE027CC01  \n",
       "137764  BD37AEC947A715B4  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Drop columns of 'dataset' and 'ride_id'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "bikes.drop(['ride_id', 'dataset'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['started_at', 'ended_at', 'start_id', 'start_name', 'start_lat',\n",
       "       'start_lng', 'end_id', 'end_name', 'end_lat', 'end_lng', 'bike_id',\n",
       "       'user_type', 'bsfa', 'rent_method', 'user_class', 'ride_type'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_id</th>\n",
       "      <th>start_name</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_id</th>\n",
       "      <th>end_name</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>bike_id</th>\n",
       "      <th>user_type</th>\n",
       "      <th>bsfa</th>\n",
       "      <th>rent_method</th>\n",
       "      <th>user_class</th>\n",
       "      <th>ride_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-12-31 16:57:39.6540</td>\n",
       "      <td>2018-01-01 15:12:50.2450</td>\n",
       "      <td>74.0</td>\n",
       "      <td>Laguna St at Hayes St</td>\n",
       "      <td>37.776435</td>\n",
       "      <td>-122.426244</td>\n",
       "      <td>43.0</td>\n",
       "      <td>San Francisco Public Library (Grove St at Hyde...</td>\n",
       "      <td>37.778768</td>\n",
       "      <td>-122.415929</td>\n",
       "      <td>96.0</td>\n",
       "      <td>Casual</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-12-31 15:56:34.8420</td>\n",
       "      <td>2018-01-01 13:49:55.6170</td>\n",
       "      <td>284.0</td>\n",
       "      <td>Yerba Buena Center for the Arts (Howard St at ...</td>\n",
       "      <td>37.784872</td>\n",
       "      <td>-122.400876</td>\n",
       "      <td>96.0</td>\n",
       "      <td>Dolores St at 15th St</td>\n",
       "      <td>37.766210</td>\n",
       "      <td>-122.426614</td>\n",
       "      <td>88.0</td>\n",
       "      <td>Casual</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-12-31 22:45:48.4110</td>\n",
       "      <td>2018-01-01 11:28:36.8830</td>\n",
       "      <td>245.0</td>\n",
       "      <td>Downtown Berkeley BART</td>\n",
       "      <td>37.870348</td>\n",
       "      <td>-122.267764</td>\n",
       "      <td>245.0</td>\n",
       "      <td>Downtown Berkeley BART</td>\n",
       "      <td>37.870348</td>\n",
       "      <td>-122.267764</td>\n",
       "      <td>1094.0</td>\n",
       "      <td>Casual</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-12-31 17:31:10.6360</td>\n",
       "      <td>2018-01-01 10:47:23.5310</td>\n",
       "      <td>60.0</td>\n",
       "      <td>8th St at Ringold St</td>\n",
       "      <td>37.774520</td>\n",
       "      <td>-122.409449</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Powell St BART Station (Market St at 5th St)</td>\n",
       "      <td>37.783899</td>\n",
       "      <td>-122.408445</td>\n",
       "      <td>2831.0</td>\n",
       "      <td>Casual</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2017-12-31 22:51:00.9180</td>\n",
       "      <td>2018-01-01 01:24:47.1660</td>\n",
       "      <td>30.0</td>\n",
       "      <td>San Francisco Caltrain (Townsend St at 4th St)</td>\n",
       "      <td>37.776598</td>\n",
       "      <td>-122.395282</td>\n",
       "      <td>30.0</td>\n",
       "      <td>San Francisco Caltrain (Townsend St at 4th St)</td>\n",
       "      <td>37.776598</td>\n",
       "      <td>-122.395282</td>\n",
       "      <td>1487.0</td>\n",
       "      <td>Casual</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 started_at                  ended_at  start_id  \\\n",
       "0  2017-12-31 16:57:39.6540  2018-01-01 15:12:50.2450      74.0   \n",
       "1  2017-12-31 15:56:34.8420  2018-01-01 13:49:55.6170     284.0   \n",
       "2  2017-12-31 22:45:48.4110  2018-01-01 11:28:36.8830     245.0   \n",
       "3  2017-12-31 17:31:10.6360  2018-01-01 10:47:23.5310      60.0   \n",
       "5  2017-12-31 22:51:00.9180  2018-01-01 01:24:47.1660      30.0   \n",
       "\n",
       "                                          start_name  start_lat   start_lng  \\\n",
       "0                              Laguna St at Hayes St  37.776435 -122.426244   \n",
       "1  Yerba Buena Center for the Arts (Howard St at ...  37.784872 -122.400876   \n",
       "2                             Downtown Berkeley BART  37.870348 -122.267764   \n",
       "3                               8th St at Ringold St  37.774520 -122.409449   \n",
       "5     San Francisco Caltrain (Townsend St at 4th St)  37.776598 -122.395282   \n",
       "\n",
       "   end_id                                           end_name    end_lat  \\\n",
       "0    43.0  San Francisco Public Library (Grove St at Hyde...  37.778768   \n",
       "1    96.0                              Dolores St at 15th St  37.766210   \n",
       "2   245.0                             Downtown Berkeley BART  37.870348   \n",
       "3     5.0       Powell St BART Station (Market St at 5th St)  37.783899   \n",
       "5    30.0     San Francisco Caltrain (Townsend St at 4th St)  37.776598   \n",
       "\n",
       "      end_lng  bike_id user_type bsfa rent_method user_class ride_type  \n",
       "0 -122.415929     96.0    Casual  NaN         NaN     Casual    Docked  \n",
       "1 -122.426614     88.0    Casual  NaN         NaN     Casual    Docked  \n",
       "2 -122.267764   1094.0    Casual  NaN         NaN     Casual    Docked  \n",
       "3 -122.408445   2831.0    Casual  NaN         NaN     Casual    Docked  \n",
       "5 -122.395282   1487.0    Casual  NaN         NaN     Casual    Docked  "
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Change to DateTime types where appropriate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "started_at      object\n",
       "ended_at        object\n",
       "start_id       float64\n",
       "start_name      object\n",
       "start_lat      float64\n",
       "start_lng      float64\n",
       "end_id         float64\n",
       "end_name        object\n",
       "end_lat        float64\n",
       "end_lng        float64\n",
       "bike_id        float64\n",
       "user_type       object\n",
       "bsfa            object\n",
       "rent_method     object\n",
       "user_class      object\n",
       "ride_type       object\n",
       "dtype: object"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "# To drop the milliseconds\n",
    "bikes['started_at'] = bikes['started_at'].astype(str).str[:19]\n",
    "bikes['ended_at'] = bikes['ended_at'].astype(str).str[:19]\n",
    "\n",
    "bikes['started_at'] = pd.to_datetime(bikes['started_at'])\n",
    "bikes['ended_at'] = pd.to_datetime(bikes['ended_at'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "started_at     datetime64[ns]\n",
       "ended_at       datetime64[ns]\n",
       "start_id              float64\n",
       "start_name             object\n",
       "start_lat             float64\n",
       "start_lng             float64\n",
       "end_id                float64\n",
       "end_name               object\n",
       "end_lat               float64\n",
       "end_lng               float64\n",
       "bike_id               float64\n",
       "user_type              object\n",
       "bsfa                   object\n",
       "rent_method            object\n",
       "user_class             object\n",
       "ride_type              object\n",
       "dtype: object"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-12-31 16:57:39</td>\n",
       "      <td>2018-01-01 15:12:50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-12-31 15:56:34</td>\n",
       "      <td>2018-01-01 13:49:55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-12-31 22:45:48</td>\n",
       "      <td>2018-01-01 11:28:36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-12-31 17:31:10</td>\n",
       "      <td>2018-01-01 10:47:23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2017-12-31 22:51:00</td>\n",
       "      <td>2018-01-01 01:24:47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137749</th>\n",
       "      <td>2020-05-17 19:16:11</td>\n",
       "      <td>2020-05-17 19:35:49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137750</th>\n",
       "      <td>2020-05-17 19:40:06</td>\n",
       "      <td>2020-05-17 19:46:13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137751</th>\n",
       "      <td>2020-05-17 17:50:45</td>\n",
       "      <td>2020-05-17 18:23:03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137758</th>\n",
       "      <td>2020-05-28 10:46:55</td>\n",
       "      <td>2020-05-28 11:41:42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137764</th>\n",
       "      <td>2020-05-27 19:38:10</td>\n",
       "      <td>2020-05-27 19:48:37</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6321759 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                started_at            ended_at\n",
       "0      2017-12-31 16:57:39 2018-01-01 15:12:50\n",
       "1      2017-12-31 15:56:34 2018-01-01 13:49:55\n",
       "2      2017-12-31 22:45:48 2018-01-01 11:28:36\n",
       "3      2017-12-31 17:31:10 2018-01-01 10:47:23\n",
       "5      2017-12-31 22:51:00 2018-01-01 01:24:47\n",
       "...                    ...                 ...\n",
       "137749 2020-05-17 19:16:11 2020-05-17 19:35:49\n",
       "137750 2020-05-17 19:40:06 2020-05-17 19:46:13\n",
       "137751 2020-05-17 17:50:45 2020-05-17 18:23:03\n",
       "137758 2020-05-28 10:46:55 2020-05-28 11:41:42\n",
       "137764 2020-05-27 19:38:10 2020-05-27 19:48:37\n",
       "\n",
       "[6321759 rows x 2 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[['started_at', 'ended_at']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Extract additional columns from DateTime (year, month, date, day of week, hour, YY-MM format)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Converting datatypes to DateTime\n",
    "bikes['start_date'] = pd.DatetimeIndex(bikes['started_at']).date\n",
    "\n",
    "bikes['start_year'] = pd.DatetimeIndex(bikes['started_at']).year\n",
    "bikes['start_month'] = pd.DatetimeIndex(bikes['started_at']).month\n",
    "\n",
    "bikes['start_dow'] = pd.DatetimeIndex(bikes['started_at']).dayofweek\n",
    "bikes['start_hour'] = pd.DatetimeIndex(bikes['started_at']).hour\n",
    "\n",
    "bikes['start_yymm'] = bikes['start_year'].map(str)+ '-' + bikes['start_month'].map(str)\n",
    "bikes['start_yymm'] = pd.to_datetime(bikes['start_yymm'], format = '%Y-%m').dt.strftime('%Y-%m')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "bikes['dow'] = bikes['start_dow']\n",
    "\n",
    "bikes.dow.replace(0, 'Mon', inplace=True)\n",
    "bikes.dow.replace(1, 'Tue', inplace=True)\n",
    "bikes.dow.replace(2, 'Wed', inplace=True)\n",
    "bikes.dow.replace(3, 'Thu', inplace=True)\n",
    "bikes.dow.replace(4, 'Fri', inplace=True)\n",
    "bikes.dow.replace(5, 'Sat', inplace=True)\n",
    "bikes.dow.replace(6, 'Sun', inplace=True)\n",
    "\n",
    "dow_class = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n",
    "dows = pd.api.types.CategoricalDtype(ordered = True, categories = dow_class)\n",
    "bikes['dow'] = bikes['dow'].astype(dows)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_id</th>\n",
       "      <th>start_name</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_id</th>\n",
       "      <th>end_name</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>...</th>\n",
       "      <th>rent_method</th>\n",
       "      <th>user_class</th>\n",
       "      <th>ride_type</th>\n",
       "      <th>start_date</th>\n",
       "      <th>start_year</th>\n",
       "      <th>start_month</th>\n",
       "      <th>start_dow</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>start_yymm</th>\n",
       "      <th>dow</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-12-31 16:57:39</td>\n",
       "      <td>2018-01-01 15:12:50</td>\n",
       "      <td>74.0</td>\n",
       "      <td>Laguna St at Hayes St</td>\n",
       "      <td>37.776435</td>\n",
       "      <td>-122.426244</td>\n",
       "      <td>43.0</td>\n",
       "      <td>San Francisco Public Library (Grove St at Hyde...</td>\n",
       "      <td>37.778768</td>\n",
       "      <td>-122.415929</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "      <td>2017-12-31</td>\n",
       "      <td>2017</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>16</td>\n",
       "      <td>2017-12</td>\n",
       "      <td>Sun</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-12-31 15:56:34</td>\n",
       "      <td>2018-01-01 13:49:55</td>\n",
       "      <td>284.0</td>\n",
       "      <td>Yerba Buena Center for the Arts (Howard St at ...</td>\n",
       "      <td>37.784872</td>\n",
       "      <td>-122.400876</td>\n",
       "      <td>96.0</td>\n",
       "      <td>Dolores St at 15th St</td>\n",
       "      <td>37.766210</td>\n",
       "      <td>-122.426614</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "      <td>2017-12-31</td>\n",
       "      <td>2017</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>15</td>\n",
       "      <td>2017-12</td>\n",
       "      <td>Sun</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-12-31 22:45:48</td>\n",
       "      <td>2018-01-01 11:28:36</td>\n",
       "      <td>245.0</td>\n",
       "      <td>Downtown Berkeley BART</td>\n",
       "      <td>37.870348</td>\n",
       "      <td>-122.267764</td>\n",
       "      <td>245.0</td>\n",
       "      <td>Downtown Berkeley BART</td>\n",
       "      <td>37.870348</td>\n",
       "      <td>-122.267764</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "      <td>2017-12-31</td>\n",
       "      <td>2017</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-12</td>\n",
       "      <td>Sun</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-12-31 17:31:10</td>\n",
       "      <td>2018-01-01 10:47:23</td>\n",
       "      <td>60.0</td>\n",
       "      <td>8th St at Ringold St</td>\n",
       "      <td>37.774520</td>\n",
       "      <td>-122.409449</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Powell St BART Station (Market St at 5th St)</td>\n",
       "      <td>37.783899</td>\n",
       "      <td>-122.408445</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "      <td>2017-12-31</td>\n",
       "      <td>2017</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>17</td>\n",
       "      <td>2017-12</td>\n",
       "      <td>Sun</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2017-12-31 22:51:00</td>\n",
       "      <td>2018-01-01 01:24:47</td>\n",
       "      <td>30.0</td>\n",
       "      <td>San Francisco Caltrain (Townsend St at 4th St)</td>\n",
       "      <td>37.776598</td>\n",
       "      <td>-122.395282</td>\n",
       "      <td>30.0</td>\n",
       "      <td>San Francisco Caltrain (Townsend St at 4th St)</td>\n",
       "      <td>37.776598</td>\n",
       "      <td>-122.395282</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Casual</td>\n",
       "      <td>Docked</td>\n",
       "      <td>2017-12-31</td>\n",
       "      <td>2017</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-12</td>\n",
       "      <td>Sun</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           started_at            ended_at  start_id  \\\n",
       "0 2017-12-31 16:57:39 2018-01-01 15:12:50      74.0   \n",
       "1 2017-12-31 15:56:34 2018-01-01 13:49:55     284.0   \n",
       "2 2017-12-31 22:45:48 2018-01-01 11:28:36     245.0   \n",
       "3 2017-12-31 17:31:10 2018-01-01 10:47:23      60.0   \n",
       "5 2017-12-31 22:51:00 2018-01-01 01:24:47      30.0   \n",
       "\n",
       "                                          start_name  start_lat   start_lng  \\\n",
       "0                              Laguna St at Hayes St  37.776435 -122.426244   \n",
       "1  Yerba Buena Center for the Arts (Howard St at ...  37.784872 -122.400876   \n",
       "2                             Downtown Berkeley BART  37.870348 -122.267764   \n",
       "3                               8th St at Ringold St  37.774520 -122.409449   \n",
       "5     San Francisco Caltrain (Townsend St at 4th St)  37.776598 -122.395282   \n",
       "\n",
       "   end_id                                           end_name    end_lat  \\\n",
       "0    43.0  San Francisco Public Library (Grove St at Hyde...  37.778768   \n",
       "1    96.0                              Dolores St at 15th St  37.766210   \n",
       "2   245.0                             Downtown Berkeley BART  37.870348   \n",
       "3     5.0       Powell St BART Station (Market St at 5th St)  37.783899   \n",
       "5    30.0     San Francisco Caltrain (Townsend St at 4th St)  37.776598   \n",
       "\n",
       "      end_lng  ...  rent_method user_class ride_type  start_date start_year  \\\n",
       "0 -122.415929  ...          NaN     Casual    Docked  2017-12-31       2017   \n",
       "1 -122.426614  ...          NaN     Casual    Docked  2017-12-31       2017   \n",
       "2 -122.267764  ...          NaN     Casual    Docked  2017-12-31       2017   \n",
       "3 -122.408445  ...          NaN     Casual    Docked  2017-12-31       2017   \n",
       "5 -122.395282  ...          NaN     Casual    Docked  2017-12-31       2017   \n",
       "\n",
       "  start_month start_dow  start_hour  start_yymm  dow  \n",
       "0          12         6          16     2017-12  Sun  \n",
       "1          12         6          15     2017-12  Sun  \n",
       "2          12         6          22     2017-12  Sun  \n",
       "3          12         6          17     2017-12  Sun  \n",
       "5          12         6          22     2017-12  Sun  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Recreating 'duration' column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "bikes['duration'] = (bikes['ended_at'] - bikes['started_at']).astype('<m8[s]').astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-12-31 16:57:39</td>\n",
       "      <td>2018-01-01 15:12:50</td>\n",
       "      <td>80111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-12-31 15:56:34</td>\n",
       "      <td>2018-01-01 13:49:55</td>\n",
       "      <td>78801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-12-31 22:45:48</td>\n",
       "      <td>2018-01-01 11:28:36</td>\n",
       "      <td>45768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-12-31 17:31:10</td>\n",
       "      <td>2018-01-01 10:47:23</td>\n",
       "      <td>62173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2017-12-31 22:51:00</td>\n",
       "      <td>2018-01-01 01:24:47</td>\n",
       "      <td>9227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137749</th>\n",
       "      <td>2020-05-17 19:16:11</td>\n",
       "      <td>2020-05-17 19:35:49</td>\n",
       "      <td>1178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137750</th>\n",
       "      <td>2020-05-17 19:40:06</td>\n",
       "      <td>2020-05-17 19:46:13</td>\n",
       "      <td>367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137751</th>\n",
       "      <td>2020-05-17 17:50:45</td>\n",
       "      <td>2020-05-17 18:23:03</td>\n",
       "      <td>1938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137758</th>\n",
       "      <td>2020-05-28 10:46:55</td>\n",
       "      <td>2020-05-28 11:41:42</td>\n",
       "      <td>3287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137764</th>\n",
       "      <td>2020-05-27 19:38:10</td>\n",
       "      <td>2020-05-27 19:48:37</td>\n",
       "      <td>627</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6321759 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                started_at            ended_at  duration\n",
       "0      2017-12-31 16:57:39 2018-01-01 15:12:50     80111\n",
       "1      2017-12-31 15:56:34 2018-01-01 13:49:55     78801\n",
       "2      2017-12-31 22:45:48 2018-01-01 11:28:36     45768\n",
       "3      2017-12-31 17:31:10 2018-01-01 10:47:23     62173\n",
       "5      2017-12-31 22:51:00 2018-01-01 01:24:47      9227\n",
       "...                    ...                 ...       ...\n",
       "137749 2020-05-17 19:16:11 2020-05-17 19:35:49      1178\n",
       "137750 2020-05-17 19:40:06 2020-05-17 19:46:13       367\n",
       "137751 2020-05-17 17:50:45 2020-05-17 18:23:03      1938\n",
       "137758 2020-05-28 10:46:55 2020-05-28 11:41:42      3287\n",
       "137764 2020-05-27 19:38:10 2020-05-27 19:48:37       627\n",
       "\n",
       "[6321759 rows x 3 columns]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[['started_at', 'ended_at', 'duration']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Find city at the start of the trip"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.scatterplot(data = bikes, x = 'start_lng', y = 'start_lat');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SF is located at: 37.7749° N, 122.4194° W, or the left most cluster.\n",
    "Other locations, from left to right, correspond to: Minneapolis, Nashville, Philadelphia, New York, Montreal, and the Gulf of Guinea at (0,0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Remove non Bay Area cities:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "bikes = bikes[bikes['start_lng'] < -110]\n",
    "bikes = bikes[bikes['end_lng'] < -110]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.scatterplot(data = bikes, x = 'start_lng', y = 'start_lat');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Find city at the start of the trip"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYkAAAEHCAYAAABbZ7oVAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nOzdeXxU5b348c9zZs9GQgiIBmRRUUQEgxjRagBb9dbWKiioca2EpVW7iLa/e6labu8V0duqVRZtXcAFilordS2CGyISUSooIpvEBZKQyTKZ9Zzn98fMHDLJDItmZPH7fr3yImfOMs8k5HzPs3yfR2mtEUIIIdIx9ncBhBBCHLgkSAghhMhIgoQQQoiMJEgIIYTISIKEEEKIjJz7uwCdqVu3brpPnz77uxiHjE21AQD6leTu55KIzia/W9FWdXV1nda6JN2+QypI9OnTh1WrVu3vYhwyxs15G4AFE0/dzyURnU1+t6ItpdTWTPukuUkIIURGEiSEEEJkJEFCCCFERhIkhBBCZCRBQgghREYSJIQQQmQkQUIIIURGEiSEEEJklNUgoZTyKqVWKqU+UEqtVUrdlnj9DaXU+4mvL5RSf89w/gyl1IeJr3HZLKsQQoiOsp1xHQZGaa1blFIu4E2l1Ata6+8lD1BKPQU82/5EpdQPgZOAIYAHeC1xblOWyyyEECIhqzUJHdeS2HQlvuyl8JRS+cAoIF1NYiDwmtY6prUOAB8A52SzvOLAYVma2uYwnze0UtscxrJkBUUh9oes90kopRxKqfeBHcArWut32uy+AFiSoXbwAXCuUipHKdUNGAn0SnP9KqXUKqXUqtra2mx8BPEtaBsU/K1hPvqqiQvuf4vTZizlgvvfYv32ZgkUQuwHWQ8SWmtTaz0EKAWGK6UGtdl9CfBEhvNeBp4HlieOeRuIpTlurtZ6mNZ6WElJ2kkMxQHOsjTrtzdzwf1v8fPHV7MzEGXivGpqGoIA1DQEmfDoKmqbw1K7EOJb9q2NbtJa+4FlJJqMlFLFwHDgn7s55w9a6yFa6+8DCtjwLRRVZEksZvGFP8jW+gBf+IPEYhYAdS1hJjy6ipqGIJMq+rMzELEDRFJNQ5DWqMl/PrNGahdCfIuy2nGtlCoBolprv1LKB5wFzEjsvghYrLUOZTjXARRqreuVUoOBwcDL2Syv6ByWpakPRIjETAyl8LkV4aimLhCxawilRT7mXF5GSZ6bQMS0g0Khz0V9IMLaW0fjD1rELI3TUBT6DFZuaWJMWS9eXrfDrl08M+U0SvI9+/kTC3Hoyvbopp7AI4kbvgEs1FovTuwbD9ze9mCl1DBgktb6WuKd3G8opQCagEqtdYfmJnFgSTYdJWsGpUU+ZlWWYZoWP39idUoT0sR51cz76XC21LVSWuSjpiGIPxjl9P6FbKoPM3l+dco1hvcp4MMvAvZ71TQEicTM/fVRhfhOyGqQ0FqvAYZm2FeR5rVVwLWJ70PERziJg0hdYFfTEcRv5JPnVzP/p6ekbUIylGJ4nwIWVJXbtQZ/0LIDRNtrLKgq57AuXt66eSSFPoOz716Ow1A0BUM0hyxKct243YfUOlpC7HfyFyU6TSxmEWzTdJRU0xCkJM/BWzePtAOB12XgdYI/aFEXMHEaii4+B/6giQJK8jxMO28ghT4X/mCU2cs2EjEtfrXgA64ffTR9uuWwsKqcfI+iMWjx3tZ6+pQUMKAkVwKFEJ1I/ppEp7AsTVM4AmA3HSWtvXV0h+O9TtI2KfUscGNacNM5A5i6aI29775Lh+J2GPzfuBMxLWgJxdjSEqG0q4/DC1wMPbKY8XNXsKCqnCMkSAjRaWTuJtEpGoJhWiMWf/jnOu679CRKi3wA9r+b6sOMm7uCM2cuY9zcFWypD3Pvkk86NCmFY5qIqe0AAfFaRWvEZNzcFYy88zWuemglTaEYT6zcSl1zmJawxrQ0NQ1BYjLaSYhOJY9colOEoxaRmMXL63ZQ6HMz/6enUNcSJhQ10/YxTJxfzbTzBvLyuh32NZI3+ahppdREJlX0TwkaNQ1Bbn5qDdPOG8jURWt4sqoch6EoLfLhNNS3+8GFOMRJTUJ0iqgZf5ovLfKxsLqG+5d+Svd8Dz0KvMQST/lt1TQEKc51p7yWvMnXtUTsGgjEh8WmOz/5umVpVm+tZ1ZlGbkeg1BIBsEJ0VkkSIhO4TAUi1Z9xv2XnWQHirrmIHleJ87EU35bpUU+SvI9Kc1SsyrL8DgVxXlu/njxifa+1oiZ9nx/MEppkQ+30+CkI4vpUeCmNWJRH4xIkp0QnUSam0SncBmKimN78M8PPuehq07GYSg8ToM8j8JAMauyrEMntWnGeLKqHDMx4qnAZ1DbHOPwAhcFHqe9TwGzK8uY1Ob8GWMG88jyzcy67CQchiLfE29m8sc0sUQynyTZCfHNSZAQncJhxGsA5f1L2BmI0BoxOaLIS6HPjT9o0a/Yk5IL4XIqWkImwYjJA69vYvmmeh6fUM6ou17jzZtHYlqacDSGx+VkR3OYfK+DJyaUo7XGYSiUgikVR5HjduBxQktY43Qq8n0GzUFLkuyE6CTS3CQ6RRevC4/LQa+uOZTke+jVNQePy4HLcFKcCBQxS9Mt10Fr1GTt583UNoepaQhy7Rl9GdGvGK3jTUTJmsU1j1TT2BqmZxcvXpcTQ0GXHAcAToeiJN9DYa6L+17dSMzSGApawhaFPgO307E/fxxCHDIkSIhO4XI56JnnwecycBgKt9Ng6bqv2FAbwB+OUugz4p3SAROfy0FLKIw/GCXf68RpGPzyB0ej1K4RSht3NDGrsowpj7/PaTOWctmD77CzNcrKTQ18sr2FQNgiampmPL+eOW9swbQ0WkMXj8H2pmiHTnEhxNcjzU2i0/jDMcbNXZEyEqm0yMdLN4xISZz7wcDuXDf6mJQ+ijmVZfQp9nDfpUNxORVFeT4aWoIpTVROB4SjHnp28fJ0dQ13/WuD/R6GoWiNWMQcijyvC0OGwgrRKaQmITpNKJp+So72eRJjynqlzZtoDGm65XkIRiy65rgYeHghSsX7O6KmJhzTdC/wUNcS4dzBhzO0VyGlRT5mjh2My1DMW76ZqKkJRaU/QojOIjUJ0Wkcieai9jWJ9nkSmfIewjGTy/+y0q5dPD7hFBxKxWsSDkVTKErVo7tqH7MrywhGTLrkODEMxXlDSnE5FcqUWoQQnUVqEqLT+NwOZo4dnJL7MHPs4A55Esn8hrZKi3xsqWu1g8eIfsX4W6OMm7uCipnLGD93BY2tUUry4sNaaxqCTJpfzRFFXh58fTOtEZPDCtw0BWN08cp/ayE6i/w1iU5T6HPTo8DL9PMHsaCqnOnnD4qPQPIZzKosswPDU9XbUraTtYJ7luxaeHDCGf2Y8th7KU1SUxetYVJFf/uYmoYgUVOzfFM9LkMBihx3fCZZIUTnkOYmkRVupxHvUFagoUOeRI7HSJkKPN/rpLYlzNBehUyq6I/LaaRtkjrusHyenDCc8Q+spLTIh8NQzK4so4sv/rzjj0HM0mxvDFLodeHxyH9xIb4J+QsSnaY+EOGKv67s0CfxzJTTyHc58DhjFLriiW+tYYvpi9fZx15cVspfrxpGY2uUXy78gGnnDUzbv7GxNkC3fA9PTzqFXsW5RGKafK8TfzCeH1HoM/AHLTbVxY/rnu/Co5x4vfJfXYivQ/5yOkkoFKM+GEEp0BosrTGUsreLfW7qgxH7SXpft5M3v0zb6c7/tm+MkVj60U0+l2ZbUxCHUgSjBl1zDGg3VcfyTfXccNbR3PnSeqadN5DDu3i579KT+Nnj71GS57EXGqpviXDvkk/4/fmD+KopwuL3axg7rDemoWgIQpHPIM9rMHXRGqafP4gcl4PPWgP0K/YQiEI0ZuF2OijOdcswWSH2ggSJThAKxdhQH+DeJZ9w5Yi+3PzUGvvG1rs4h9rmMK1Rk8MLXBx/6xLW3jqaDfWBlBucPxzFUPBVYwgNtEZNrn7oXWoagrz6q9Ops5yEoia5biempfEHLZyGis9tpGB7a5jLHngnZW6ko4tzv9VA4XY60j79NwYtanYGyfc6Oe6wHDtn4qUbRrCgqtwOqIbC/vkl8ykWTiynviXK5MdS530C2FLbxA9PPIKrH343ZV+/Yg81DUFy3A5ilraXPk3mcJQW+XjgimEM6JEvgUKIPZAg0QnqgxEmJ9ZHSAaIG88eYN/skqN8CjxOXptagT9oJQJEr/hEdHkeoqbmq8YQKzfVc83pvfEHLR679hS71tAUtmgOacY/sCIlAH3pD2JZJv27F6Qcf8+SjVwxoi9HdFKQiEZNdrSE7ZpK9zwPLld86otYzGJHS5ioafFkVTnzlm9mzhtb7JtxzNLkuB3UByJADl1zXDx27Sl2E1HEgtawRcTU9CnO4c6xJ9AYMin0uWiNWHaAgF2LE00/f5C9Gl26tbBLi3y0RuLLoibXqWh73IRHV/H0lBF0z/d2ys9HiENVVoOEUsoLvA54Eu+1SGt9i1LqDSA/cVh3YKXW+idpzr8D+CHxUVivADfo5AQ/B5DkDajQ56Ikz8MdYwfbT7ewa2TOgsTiODFLc/Xp/di2s5Ub//ZByrj/a07vnXZZz37FHi6aXW0HoEeWb2ZMWS9Ki3xoTcpT8qzKMq4b3R/Tgq31gW/c/BSNmny8o6VDmQaU5BI0TT7bGeqwb8IZ/dEoinPdfNkYpDVicnr/wg6f7bnrRlDT0PHzLv24hjlvbGHRpFPTNmHluB1EYlbafTFLM3PsYLrle8jzGmkXI6ppCBKKmPhbwxR4pelJiEyyPQQ2DIzSWp8IDAHOUUqVa62/p7UeorUeArwNPN3+RKXUCOA0YDAwCDgZODPL5f1aPImRPJbW3HTOABqD0bQ3r4hpMT6xhGfM0vxy4QcpgWTS/Oq0q7jdu+QTu2Zx36VDMc0YV47oy/TF63Ao8LocPHrNcF755RmM6FfM5MR1WsIW3XIdjJu7gg31ga+9GM+OlnCHMk2eX82OQISmoJl2X8TUlOR7MAxFF59BaVdf2s/WGu742uT51Ywd1huId4ZnWksiuchR+31OQ9GvWy5dc11YGmZVllHoMzocZ2rNtp1BPve3yvoTQmSQ1SCh41oSm67El/3XqJTKB0YBf093OuAF3MRrIi5gezbL+3VYifUOZo4djFKKqYvWZLyxJZPFhvYqxNLpV2trn508tFchV47oa68PffHcFXTN89Grq4/rR/YnasFVD61k1F2vcfXD73LtGX3507ghRGIWn2xv4cumKC/dMILJ86upD0a+1mfMtLKcmWapUftzmFab86FngSvtdTJd25F4sp+9bCMzxqQm6P1p3BBmL9vIolWfdci3SAYEDXgd8WasfsUedrREU46bOXYwXzWGmPzYe4Rjmq+aQny2M0BNQyvbG4PsDIQlcAjBt9AnoZRyANXAUcB9Wut32uy+AFiitW5qf57W+m2l1FLgS0ABf9Zaf5Tm+lVAFUDv3r2z8AnikqOX0o0m8joN+nbLJZxo/kje2Nr2ScyuLGPa3z8E4ms2Z5rCIpmdnHx9UkV/+zqwq8bxZFU5I44uSWmTL8nzUN8SsdeDLi3y8ceLT6TA4+SlG0ZQF/h6SWbty5Qsq6EUEctK/zkcu54/FNAa1Wmvk+naZuIGvXqbn0eWb+ahq06216mImha1LWF+eOIRfPS5386/sLQm1xPvJ3E5FQ1BC4eh+Oubn/HvLxp57NpTUEBzKIbTofjNU/+mpiGIoeALf5Cxs9/e1X/kdRKOmlgaGQ0lvtOynnGttTYTzUqlwHCl1KA2uy8Bnkh3nlLqKOC4xHlHAKOUUmekuf5crfUwrfWwkpKSTi9/NGoSCIX4tD5gP80X+gy2t4YJRi0srQnFLH737Id8/FUzpUU+Vm/z20M5F006lSeryume7+b60UcztFchI/oX4jQUc9o9Bc8cOxiPU6U8HRfnujM+xbd/Cp9U0d8OEMnjfrnwA6KWpi5g0i3X8bWanLrnedI+sTcFoylLlrbd1z1v16pw+V4PjkSHevvr5Hg6vjarsoxFqz6zt68c0ZebFq1h3NwVXP3wuxxe6OOhq05m/ttbuWfpRgDue/VTLv/LSkyLeFNbyEQBBR7Fj4cewS0/Op58rwOXU+FzO/jLG5tZvc2faCYk0am+q/9oR3OEj79q4bQZS7ng/rdYv71ZahbiO+lbG92ktfYrpZYB5wAfKqWKgeHEaxPpXACsSDZXKaVeAMqJd4RnXfu8h0lt2s0B0OBvjVAfiPBU9TauHNGXZ1d/btcgVm/zM33xOv586VBqGoL0KPAwtHcBf750KDsDJg5D0RyK8Ni1p+ByxKe5bg5Fqf6skbLeXVKyk9M9aTsMhaVJ2Zdp4rxg1OSqh95lzuVl9OkKkQi43Xv/q3e5HBzbPS+lTCW5bmoaQx2WLHU7DXrkeXA6dz1/GIaiyOfBHwx3yLx2G9Cn3Wv1LSFGHncYl5b3YVNtgDtfWs/qbX77s2+qDXD1w+/aASVqmizfVM+cy8toCcfsocNtO/39QYvmUHy0U498Jwura+L7LzuJmGUye9nGlJ9ZjtuRsj3h0VU8M+U0WRJVfOdke3RTCRBNBAgfcBYwI7H7ImCx1jqU4fTPgAlKqf8l3mJxJvCnbJY3KRSKYRJ/4o6a8eakRZNOJRyz6OJzsLk+nHa95TFlvXhvy04eTyyzaShFKBrj/qWfcsNZxxAImynnzaksI8ftYHtTx+vd+dJ67q8cSiBsMnPs4JQmpNmVZbRGYqz/sjElIa01YqYPKCo+DHTivGr+NvFULB3hiH0IEhAPFEcU5aS81qc4l8IcF7275mBq8LoMuuV60jbLGIaia258uGmuNz5sti4Qpj5gUpzrYGdrNGWE0+zKMvK9Drrne6htCdufZe7lZRTnunltaoU93LcuYLKgqhynoRgz++20Q2Lbj/56b9poPA4Im/Cbp/5tB6Hk+7RGTCJt+lVqGoKyJKr4Tsp2TaIn8EiiX8IAFmqtFyf2jQdub3uwUmoYMElrfS2wiHin9r+Jd2K/qLV+LsvltQPEpvow9y75hCtO7UPPQh+f1bdyz5IN3HPJ0JRaRU1DkJufWsO08wbSr1sOPbt4ufSBXTek+dcO57rRx7CjKcy0Zz/ssIbCw1cPT3u96ecPoiVk8uK/v2Tc8N4sqConYmq21AWY9vcPqW0JM6uyjB4FLvsp3OM0uHv8EG548v2U/IyvmkL2taOmRdfczlnaM37j90Duvp/rdBoc1sWHZWlqmzvWMLbtDPDjP+9KuGubaQ4QisX/U/iDFpc9GE8ifG1qRcbBAI9dewoOQ7F8Qy2T51fzxIRyPg9G6Vfs4brRx7Duy+aUn1mO28Gt/1hnX6e0yCdLoorvpKwGCa31GmBohn0VaV5bBVyb+N4EJmazfOkkRwAtfr+GX5x1DFXzdj3dzr28DIdB2htRca4bj8vJ1Q+ndiRrDZPnV3PXRSfarycnsSv0uXA5VNrr9e2Wy8pNdVQc14MLZy3noatOTsm9gPh1n6wqx+2IP7lbWtPF54pPR+F20Box8bkd3Ja42SVXcAuENXkHSA6ZYSh6dPEm+koidMt14A9a9CzMYUFVORCfLLCLK16dhHhggPh2jtuwa1OO3TTNnT5jqV2LuH5kfyy9KxN7S20Tt194Aj27+HA7DTxOg8ZgJKUG88AVw2RJVPGdJBnX7cQsjcuhuPr0foxt13RRNW9XNm/7G1FJvgetO3Yk17dEqGkI2msotM/Gfuiqk9NeD+Cs43sQCFvMT2RSl+R5Uo5LdmAPn7GUob0K+X//cSwPvLGJMWW96FuQS47boCVsctfFJ2JpcDrA5zL4sjFMSb73gBqt4/U67exwn1tTH4igiE8/YlqaSCze3xGMWsS7C+JJiaa1a4bZZCd4+8S85RtqgV3NT09WlWPpXbWMI7vlo4DPdrbSNddFJKYpynWxcOKp9pQhDgV1LWFipoUyQGuF1lpGPolDngSJdpyJdQnCGbJ5TUt3uBHNrizjH6s/58Ky0g4dycmcidnLNvL8DSNoTkzKt6CqHMOAP768oUOfw4wxg1n28VeMPO4wapvDduf4TecM4I4XUztxAd757UgCEYvbX/iIl9ft4OV1O3jntyPZ3hRmcmJNhmQnbb7HSd9iT3w6kAO0E9YwVMayhUIxGsNRNPH8lJiliVnxG3Rj0OzQbPXWhlpuevpD+/zk7/Afqz+ntMiHUoopj73HvGuGU9cSIdfj5NZ/rKG2Jcz08wfRLd/D4vdrWLnFz03nDOChtzanzC8l80CJQ50EiXYKfQaNIStj04VhKBa/X2OP5nE5DN7+tJZhfbuiFMz76XC21MX7L1ojJk9Vb2PGmMGcUJrH1nZTUtx/2UlMGdWf+1/dyLxrhrOjOYw/GOXZ1Z9zWfmRdlt7aZGP+y49iefXfM7Mi05k6t8+oLYlzIwxg/nDP9fx23OP4/YXPuLKEX2pbY4kgoiiriXCXRediD8YZfayjUx+7D0WVJUTiu6/n+835fXumvY7FrP4eHszqzbXcc4Jh6OB+oCJ06HwOg1ilraHyCYlc1EWVNcwq7KMZ9+roaYhiAaOLM7BtCw7COe4HUyeX83jE8q56GSTbTuDXHFqnw55KzLySRzKZGW6NJJTfadbitNhKOa8sYXv//F1Rt31Gpc8sIJTj+oGwMVzVjDyzteY9uyHTP/JIAYclsekM4/ikeWbaU4zJcWUx94jZsK5J/RkS30r4+auYOK8akYP7MHPHk9dle1nj7/HFSP60jXXye/PP56ZY+MjoF5etyO+jkPi5jWpoj9DexVS2xJh2rMfMm7uCqYvXseNZw+gJM+TePLWuBwH/6/e6TQ4tkc+Zw86nEgs3k/hD0bJdccDRLq8jGRG9uMTyln20Xbu+teGRKe0we0vfMSmulb7WH9iepWYaXHW/73OtGc/pGehL20NU0Y+iUOV1CTaaY3Gp9/+86ufMmVUfx6+ejiGAkvHs3gXvbst5fhku3b7JLZJiZlK71mygf/+yaCM008YCvp0yyXWJnM5UwLdl40hvC4H0ViMplDMTgarD0ToX5Jrnzupon/GEVMuh4HWmsZQlCKfy57J9WDldBr0LIyPkvrcH7/B//De5dxy3nGc2KuoQ/NToc9gy84wE+elNhfOW76ZCd/rx/88/7Fdy7vl2bUp2d81DUE+q29NW8OUkU/iUCVBop3iXDdfxUz8wQh1zRF+sWDXcNI5l5fx7y8aU45P3kTS3dT7leRy+5gTiJqZk+IsDR6H4sl3PuOJCeV84Q/SxeeitMjHLecdx8DDu9g3OI1m/Nx3WFhVTlGumZKj8dtzj6O0yEdRrpuuGYLMkcU5OA1FrlvxytovyTm+Z4fch4OVYSiOKMwhzxO2g0LUtIiYBrc9t5ba5gg3n3sspuWlR35q4HA5FFeO6IsG7rzoRByG4v6ln1LbEub+y07igdc32e9zz5INzLrspJS+njmJ3A0hDkUSJNoxDAUK/vOHA+0+AcBORnvs2lNSxtTPriyjriWSIQDER8ZMmr+Kf14/okOH9/2XnYTbqWgKRZnzxhZO6lPM9MXrKMnz8OzPR/CFP9whCeyW844jamlaIhZ/ubKMu17+hKtP60tdS4SZYwfTHIoSiqafT+kLf5BeXXOImoofDT2CltCh1URiGIqiXC9FbfI2olGTW350vB0QglGTP7/4KVeO6EO+1xmfbVKD02HQEo7hMMBhxEem/Xz00Tz29mYWVtfY16ttCdMt38Mj1wynKRhlR3OYbonRTZYVH5UViZky6kkcMiRIpKE1GWsHGuynUIeh+OiLRvqW5HV4upwxJj7LaI8CLzUNQU68bQkf3DI65QnW5zYIRS0KEzWHthMDhiLpp9BeUFWOZleOxCXDj6Qk30NzKMr/PL+e2pYwT006lTmVZUxMkxV+y4+OZ9zcFcyqLKN3kQfL0of0jaxtpnhycaSfjzoKp8Mgx23QGIyx+osm+pfkcdVDqetz/2Bgd24YfQz//HB7mxFiZUyZ/17KCLNnppyGZWnWb29mwqOrZNSTOKRIkEgjx21gtpsXCRJtz4Yiamk21Qa4Z8kGVm/zs+zGMyjJ9zD/p6ewvSmEPxjlzpfWA3DPJUPt65x42xL7Ok9WlfPjPy+nJM/DvZcOiY90euw97nxpPdPPz9yHEbM04cRa0qal6V2cw5xlG1OedoNRi8MK3Tx27Sn2ENpHlm/mutHH4HEa9gp2TgO2NbTiczsyTqdxKHE6DQ4vTJ3CPWrCU9Xb+NUPjrF/B8mb/HWjjqYk38208wYmVskzKcl3p02yqw9E7AABMupJHDokSKTRFDJ5Z2Mdcy4vS+ngnDl2MC2RGA++vpnlm+rtOZZqGkK88ckOLi3vw6//9kHKzX3Jui/TJnjtbAnZtYIN21tYsbGW+T89BdPSGCrzFNpOQ/GLRf+2v2/bJJY8xu1UmDFwKDisi5euuW5++x/HoRT85P7lHSa/qwuYfBkLfqPV6w5WRT4X148+hv97+RN+NvIonpgQX3Nba1AG/OWNTfZSrDPGDEYBz0w5rUOTUiQRuNuSUU/iUHDwj4PMAqehuGfpRgq8Tu686ET+9aszmHfNcADufGk9E87oR0meh0jM4k/jh9CnOJcLy0rRaGa1mzZ7QM8u5HkMHrlmOK/++kwevno4PQs8THn8fT78oonPG4Lcs2QDZwzowf88v46WcBSnw8g4fNPnNux5m3I9BvcmairJY2YnXq8NRNiwI8D4uSsYdddrxExN5YMrOzRf+YMWZ85c9o1XrztYNQSj3LPkE8aU9cIw4osVGQpcDsXSdV9xUp9iFlSVM+28gTyyfDOGYVCS7+GIohx75T2IrzmR/D0kyagncSj4bj027iWXQ/HXq4ZhGPHhsFe1mXp6xpjB5HkdKVNrJGd0vevlj6htjvCncUPolufB6Yiff9+rn6Y0B702tYKnJ5cTNeMZw/dcMpS3P63lZyOPwjAMLklMELj21tEdhm/WBUyemFBOrsfgpkX/Zvr5g1jYpo+k0GfQGLSYOC91viiHkX6OqJileee3o8jzKM6+ezkLqsrt6TG+CyIx085Sb+u5n5/G0Yd16V+XFXkAACAASURBVJBZnWkUU3GumweuGNahT0JGPYmDndQk0oiamtawiWXRIbv25qfWYKZ5feL8asaU9QIgHLOo/Ms7nD5jKZc9+A7nDz2Cob0KgfjTZbdchx0gkkNbT+rTlZ5dvCmd1cffuoRCn0FTKMa4uSs4/tYlXPbgO/iDUTwOeHndDrbUt3Lx3BU0h2O8svZLjr91CV80hlLmiwIyrgcdNTXrvmxmU32Yl24YQew7trBOphrAF40he+GoBVXlPFlVvttOaMNQDOiRzzNTTuOtm0fyzJTTpNNaHBIkSKRR6DPokuOyM27bik+3nb5TOZnIli6wTKroT2mRj+dvGMGm+rC9yt24uStoDMbwugzQHWeYrfxLtZ0Q9trUChZUldOv2EPlX6pTsoInzqum4tjDGNqrkFDUTBktVVrk44HXN3Vovrr/spOY+9pGe/oJf9Ai1+0gGv3utKMnawDtM+tnL9vI6m1+Js6r5td/+wBDqT3e8JNzTrVvihLiYPbdaVfYB3UBE7fDoK45Q3atI7VTeWivQq4ffTQl+R5K8j1pA8ixh+Xzx4uHpJ2eIzmcNZJ42m97fm1LmJ2tJkrFV6L7ZHsL9yzZYM/dlBxFlRzt9OsfHEOe12kPyU2OlupdnEOO27AzyE1L88Drm1i+qZ7RA3vYTU8qMUz0UEmy25O2NYBIzMTlMGgKRVNGMM1utxyrEN8lUpNIw2kobntuLUW5rg7zN9110Yk8XV1jr+s8tFchN50zgCdWbuXjr5qxdPpmnU21AXa2RjIObTUtjWnpDutF33/ZSZha8/vn1uJxKiKmxcyLBjP9/EEdlvU0EqOZfv74alrCMaafP4jfnHssEdPixoUfcMuzawmEY1zx15V8/4+v2yO0Zi/baI+WiibmdvouaVsD6F7gpU/XXBZOPJXXp1awcOKpHNsjP2U5ViG+S6QmkUb3vPhqZfcuiWczP1lVjmlpvmwMcfsLH1PbEuYHg3rYQ1h//9xae/rokjxPh6m/Z1WW8bu/f8hvzj12t2tWm5Zm/ttb7c5qQyl2BsLc/+pGLhl+JFpjZ2TfePaAlKfdmWMHU9cSoVtefEqOO15cz41nD7CH5JYW+fjDBYN4+K0tTD9/EH265eJQcMOT79ujpQp9hr2gz3dZunwKIb6rJEik4XI5OLZ7Hrf9eBARM77ozS+efJ9JFf35zbnH4g9G+c1TH/Kn8UMAGFPWy+6HSN6gp58/iH4luVg6XkMoyXfjMBTbG1vT5k24nYo7X9zA8k31/Mo4hpil2d4Uoj4QwR+MkON2sG1nwD432YzUp1su0ZhJMBpfhc6VaApbvc1vd7wW57opyffgdRr8bNRR9kgpfzA+hDe5vXVnmCO7enA7XPv5NyCEOFBIkMjA5XLQs9BHOByjrjW+lOXEedX2/mTzjKXpMGvr6m1+rn74XV6bWgEarnroXR69ZjhOh+LzhiAQTRnamuMx+N9/rmf5pnoevvpkvmwMcd0Tq1Pmh3ru/RrmvLGFOy4cZNdsnIYix20QiCgKfC4mz38PwJ7aY/U2P9MXr+PPlw7lF0++z5/GD+HMmcvswHRksYemxMpvzWFtB4iDfWZYIUTnkYbWPfB4nBkT27btDOB0xNuz0/VDOA2FmVjStDEYxbLgjhfXUxuIUdMQ5OOvmrn7XxtoCVlMqujPo9cMx98atQME7Jp2/NLyPpQW+bjp6Q8ZP3cFTaEYtz23Fn9rjPFzV/BBTSO1LeGUGsSiSafyyDXDue0f66htCSdW3dvVWd4ctDh9xlLOmLmMsbPfxh+0JEAIIVJktSahlPICrwOexHst0lrfopR6A8hPHNYdWKm1/km7c0cCf2zz0rHAeK3137NZ5nSawzrjsph3XDiIiuO6M7uyzF7DIfn0/97WeopyvZQW+djRHCbf60pbI7lu9NFsbwpxx4vr+c25x6bt2FbA4xPK0XrX+8ezhONJcm0nB0zWIGaOHcyNCz9IydBue822HdTtt4UQArLf3BQGRmmtW5RSLuBNpdQLWuvvJQ9QSj0FPNv+RK31UmBI4piuwKfAy1kub1oOw+CXC9cwpqyXPWNrclnMm57+kIvLSrn53AEps8Ou3lpP94Ic/vLmJnsG1v86b2CH2WJnV5YRs0y7o7s1Yqbt2N5YG+Dqh98F4JVfnsE9SzdS0xBk/k+Hp+2DKC3yocDuc8jzGvYEg8lrOtuM42+/LYQQkOXmJh3Xkth0Jb7sx1WlVD4wCthT7WAs8ILWujUrBd2D4lw3v/z+AKYvXse4uSs6ND8t31TPF41hCn1G/EarNUOPLKYwx8XUs4+lMMfFf/5wIF1zHMx7eyuPXjOc16ZW8PDVw3l0+Rb+9/mPeezaU1jyqzPwugzuuzR1GOwfLz6R0q4++7VFqz6z3/+ulz+J708EiumL16G1pjkc4/OGALXNYXI9Bp/tDHdoLtve2JqyXSJTSAgh2lFaZ7eJQSnlAKqBo4D7tNY3t9l3BfBjrfXYPVzjVeD/tNaL0+yrAqoAevfuXbZ169bOLL6t/YIy+S4H9cFIyrxK/qBFvs8gFIFcN/iDVof9e7PtdcYnmovELAxD4TIUeR61T8f7PIrmoIVS4HYYuJ3QHMr8/iW5btzu1IrluDlvA7Bg4qlZ+ZmK/Ud+t6ItpVS11npYun1ZH92ktTaBIUqpQuAZpdQgrfWHid2XAA/u7nylVE/gBOClDNefC8wFGDZsWNYiXjLhqq32E+HleuP/FnjjK6K5HFE08dFDjYkbttcZX6uiLmDiNBSHF3jtzmKfe1cgcjkN8rxOghETwzBwGQ4gQp7HQShq2efneRwYClojFhpQQBePC6/XSYE39TMUtBv6n9tuvxBCtPetDYHVWvuVUsuAc4APlVLFwHDggj2cejHwjNY6muUidiqXy0H3fRwplC4Q0WYpziPcmX9dbZfsFEKIzpLVPgmlVEmiBoFSygecBXyc2H0RsFhrHdrDZS4BnsheKYUQQmSS7TyJnsBSpdQa4F3glTb9CuNpd/NXSg1TSj3YZrsP0At4LcvlFEIIkUZWm5u01muAoRn2VaR5bRVwbZvtLcARWSqeEEKIPZCMayGEEBlJkBBCCJGRBAkhhBAZSZAQQgiRkQQJIYQQGUmQEEIIkZEECSGEEBlJkBBCCJGRBAkhhBAZSZAQQgiRkQQJIYQQGUmQEEIIkZEECSGEEBlJkBBCCJHRXgcJpdSSvXlNCCHEoWOP60kopbxADtBNKVVEfBllgALg8CyWTQghxH62N4sOTQR+QTwgVLMrSDQB92WpXEIIIQ4AewwSWuu7gbuVUtdpre/9FsokhBDiALHXy5dqre9VSg0CBgLeNq8/mo2CCSGE2P/2OkgopW4BKogHieeBc4E3gYxBItGf8TrgSbzXIq31LUqpN4D8xGHdgZVa65+kOb838CDQC9DAfyTWvRZCCPEt2OsgAYwFTgRWa62vVkr1IH4D350wMEpr3aKUcgFvKqVe0Fp/L3mAUuop4NkM5z8K/EFr/YpSKg+w9qG8QgghvqF9yZMIaq0tIKaUKgB2AP12d4KOa0lsuhJfOrlfKZUPjAL+3v5cpdRAwKm1fiVxrRatdes+lFcIIcQ3tC9BYpVSqhB4gPgop/eAlXs6SSnlUEq9TzyovKK1fqfN7guAJVrrpjSnHgP4lVJPK6VWK6VmKqUc+1BeIYQQ39BeBwmt9RSttV9rPRv4PnCl1vrqvTjP1FoPAUqB4YnO76RLgCcynOoEvgfcCJxMvNZyVfuDlFJVSqlVSqlVtbW1e/txhBBC7IU9Bgml1Entv4CugDPx/V7RWvuBZcA5iesWA8OBf2Y4pYZ4/8cmrXWMeJNUh/fTWs/VWg/TWg8rKSnZ2+IIIYTYC3vTcX3XbvZp4n0KaSmlSoCo1tqvlPIBZwEzErsvAhZrrUMZTn8XKFJKlWitaxPvs2ovyiuEEKKT7E0y3ci9uZBS6vvJTuY2egKPJPoSDGCh1npxYt944PZ21xgGTNJaX6u1NpVSNwJLlFKKeD/IA3tTFiGEEJ1jX4bA7skMICVIaK3XAEPTHay1rkjz2irg2jbbrwCDO7GMQggh9kFnThWu9nyIEEKIg0lnBgm950OEEEIcTGTRISGEEBnty6JDnj28tqUzCiSEEOLAsS81ibd395rW+sJvXhwhhBAHkr1Zme4w4AjAp5QaSurKdDlZLJsQQoj9bG+GwJ5NfDqMUuKJdW1Xpvt/2SmWEEKIA8HeJNM9opSaB1yitX7sWyiTEEKIA8Re9UkkpgifmOWyCCGEOMDsS8f1K0qpG5VSvZRSXZNfWSuZEEKI/W5fpuW4JvHvz9q8ptnDwkNCCCEOXnsdJLTWfbNZECGEEAeefZrgL7Fg0EDAm3xNa/1oZxdKCCHEgWGvg4RS6haggniQeB44F3gTkCAhhBCHqH3puB4LjAa+SixbeiLQYaoOIYQQh459CRLBxFDYmFKqANiBdFoLIcQhbV/6JFYppQqJrw5XDbQAK7NSKiGEEAeEfRndNCXx7Wyl1ItAQWLlOSGEEIeofZkqfEnye631Fq31mravCSGEOPTszSywXuKzvXZTShWROgvs4VksmxBCiP1sb5qbJgK/IB4QqokHCQ00A3/e3YmJAPM68VFQTmCR1voWpdQbQH7isO7ASq31T9KcbwL/Tmx+prX+8V6UVwghRCfZm1lg7wbuVkr9DviT1rpJKTUNOIn0CxG1FQZGaa1blFIu4E2l1Ata6+8lD1BKPQU8m+H8oNZ6yF59EiGEEJ1un/IkEgHidOD7wMPArN2doONaEpuuxJdO7ldK5QOjgL/vS6GFEEJ8O/YlSJiJf38IzNZaPwu493SSUsqhlHqfeF7FK1rrd9rsvgBYorVuynC6Vym1Sim1QinVoTlKCCFEdu1LkPhcKTUHuBh4Xinl2ZvztdZmosmoFBiemP8p6RLgid2c3ltrPQy4FPiTUqp/+wOUUlWJQLKqtrZ2Hz6OEEKIPdmXIHEx8BJwjtbaD3QFpu7tyYlzlgHnACilioHhwD93c84XiX83Jc4dmuaYuVrrYVrrYSUlJXtbHCGEEHthr4OE1rpVa/201npDYvtLrfXLuztHKVWSyNJGKeUDzgI+Tuy+CFistQ5lOLcoUVtBKdUNOA1Yt7flFUII8c3tS03i6+gJLFVKrQHeJd4nsTixbzztmpqUUsOUUg8mNo8jPhXIB8BS4HattQQJIYT4Fu3TehL7KjFtR4cmosS+ijSvrQKuTXy/HDghm+UTQgixe9muSQghhDiISZAQQgiRkQQJIYQQGUmQEEIIkZEECSGEEBlJkBBCCJFRVofACiGEZWnqAxEiMRO300FxrhvDUHs+URwQJEgIIbLGsjTrtzcz4dFV1DQEKS3y8cAVwxjQI18CxUFCmpuEEFlTH4jYAQKgpiHIhEdXUR+I7OeSib0lNQkhRNZEYqYdIJJqGoJEYmaGM/a/aNRkR0uYmKVxGorueR5cLsf+LtZ+I0FCCJE1bqeD0iJfSqAoLfLhdh6YN91o1OTjHS1Mnl9tN4/Nqizj2O5539lAIc1NQoisKc5188AVwygt8gHYfRLFuXtcr2y/2NEStgMExGs9k+dXs6MlvJ9Ltv9ITUIIkTWGoehblMOCqnK7+abY5+arphBR08LlMOie58Hp/PrPq7GYxY6WsH29klw3/lDsa42milk6bfNYzNIZzjj0SZAQQmRNKBRjQ32gQ/NNv2IPx9+6jNIiH7Mryzi2R/7XChSxmMXH25uZ1O76i9+vYc4bW/Z5NJXTUGmbx5zf4ZFY0twkhMia+mAkbfONP2jZ25O+QXPOjpawHSDaXn/ssN729r6Mpuqe52FWZVlK89isyjK653m+VvkOBVKTEEJkze6ab16bWoHTUBT6DPxBi631gZTtZPNU++1in5vmqEkkZqKBkjxPynvUNARxtHnyH9GvmEjMZGt9YI/NWy6Xg2O756U0j8noJiGEyJLdNd+cNmMpa28dzab6XZ3FPxjYnetGH9OheerIrh5aI5qmUJTWqEmPAhehKGg0fxw3hPuXfsrC6hr7+p5EELi4rJTKU49k3NwV9vX21Lzlcjk4oign+z+cg4QECSFE1hT6DGZVlnW46UO8I9gftKjeXMfjE8qxdPzJ/ffPre3QfJR8ss91O+niM2gKWvbxxXkGv/rBMfz2PwYQiFg4DDCI1ySqzuzPVQ+tTLnepPnVLJx4KocX+vbLz+RgI0FCCJE1rVHoW+xJab4BzWkzlgHgdRmU9e3GpQ/setKfMWYwtc0RVm/zA/Eb+5eNIcbOfjttx/SsyjKOLPZQszPMyk11lPXtxpFd4+/pcqj0zV2m9S3/JA5e0nEthMiaSMzinLuXc9qMpZw5cxkA4+a+Y+8PRa0OHds3P7WGSRX97WNeuH4EPbt4eW1qBQuqynEqK6VjevL8alqCFtubwvzHCYczeX41zSGLcXNX2M1dbZUW+VL6LMTuZbUmoZTyAq8DnsR7LdJa36KUegPITxzWHViptf5JhmsUAB8Bz2itf57N8gohvrm2s75q4h3Howf2oNDnwmEo7rroRH79tw/sDux0T/rJZLsXrh9BTBspfQqzKsso7eJi2dQKDKWwrPj79CvJJWppXrphBGETXv31mR3eL1lTkRix97Ld3BQGRmmtW5RSLuBNpdQLWuvvJQ9QSj0FPLuba0wHXstyOYUQnaD9rK8/GNidn486mimPvWffpO+7dCi3X3gCLoeRsWO7MMfNgqpyCnweO0BAah9FxcxldtC4d8nHvLxuR0oeRr7XyZeNIQpznPb7+YNRHlm+mVt+dPz++hEddLLa3KTjWhKbrsSXnbqolMoHRgF/T3e+UqoM6AG8nM1yCiE6R/tZX8eU9bIDBMRv8j97fDVRUzNu7gq7Y7ttXsLMsYOZ+rcPGDd3xW6H0A7tVWgHjTFlvYB4rcXnclAXMAnHLDxORczUeJwOxs1dwfTF67hu9DGUpJkWxLI0tc1hPm9opbY5jPUdzrJuK+sd10opB1ANHAXcp7V+p83uC4AlWuumNOcZwF3A5cDo3Vy/CqgC6N27dyeWXAixr9rP+lroc6W9yffq6mNBVTl1AZN+bTq2HYbiusdX253WuxtCe+PZA7jzpfWs3uan0Oeyh7smRzPtqlV48QctOy+j2OemNhAh1hy2t+uDEbtjPddj8NnOIM2hKH2Kc7EsnTLtR1evK+X4Ap+DpqCJqTVel4NuuZ5Daq2MrHdca61NrfUQoBQYrpQa1Gb3JcATGU6dAjyvtd62h+vP1VoP01oPKykp6ZxCCyG+luSsr0lR00rbcfxVY8juWD777uXkeQ176ovaNtnX9S2htBnQ9S0hu4O7tMhH1LSYcEa/DrWWyfOraQhaFPoMeuZ7KPa52VAfYNzcFZw5cxnj5q5gQ32A255ba29vawjTPd9NMBKjoTXMx9ubuXjO25w5cxnVW+o6nL+lPsQra7/kjDuWceH9y/n4qyZ2NIXYWh/gC3+QWOzgHkn1rY1u0lr7gWXAOQBKqWJgOPDPDKecCvxcKbUFuBO4Qil1e/ZLKoT4utrP+upxOpg5dnCH5iRPYqrwcDTKrMoyfnhPfARUoc9gzuW7gsKUx9+nd2I4a3J0k7ZMfnzf23YHd/J6DiP9cNdIzMIftNgZjKadJuTeJZ8w9exjWVBVzrTzBnLvkk8wLWiNWASjFjluBw9ddTK/PutoTjqyOO00I6MG9rS3q+ZVEzEtvvAHufUfH/Lx9uaDOlBke3RTCRDVWvuVUj7gLGBGYvdFwGKtdSjduVrry9pc5ypgmNb6N9ksrxDimzEMxYAe+Twz5TQiMZOYpfnFk+8z7byBFPpc+INR7nhxPTMvGsyCqnI21AY5vX+h3dxUHzBxGbAwsW0Yimgs3jdw2YPvdGh26uJzcdOiNdw9fgiODE1TKtHyE45ZOAyVMo3H0F6FXDmiL1c//G7K6CeloHuBBwVs3NFMSb6XHw89AqXg9gtP4LAuXhxK8VVTiFWbd+JQ2M1ZeV6DuuYYh3XxcsuPjueVtV/SNdd90CbvZbtPoifwSKJfwgAWaq0XJ/aNB1JqBkqpYcAkrfW1WS6XECJLDENRkh+fEO/LxiC1LWEmzqu295cW+dhYG7BfKy3yMe28gUycV81bN4/kskd2Pam//7vRbGsIc++ST5gxZjA3P7Um5WZ+06I1lOS7sTSEoyZPVpVT3xLhq6YQT1Vv47pRR6MU9gipHwzszp/GD8HSmpipaQxG+cWC97lz7An06ppr9zPkew1OuHWJ3bxVvbmOZz/4iv++YBC/efrfKSO1Rh7Xo8O0HyV5bha+u40F1TXMrizjG8yEvt9lNUhordcAQzPsq0jz2iqgQ4DQWj8MPNy5pRNCZJtDqfhopUVrUjqT713yCUCH7fbTeATCu5Ltapsj3H7hCRxe6GNrfSt3vrSeknw31406mv95fh1XjuibEkRmV5bRvcDNhffHm6aG9irkp6f3s2skpUU+5v10OHeOPYFcr7tDLsbaW0dz/K1LmDy/mscnlNOzKJeJ8+Jl+fVZR3NhWWm8tqMU914yhN8/9xGrt/mZNL+a6ecPouK4HgBMSgzZPVgprQ+dYV7Dhg3Tq1at2t/FOGSMm/M2AAsmnrqfSyI627f1u91aH+AXT77PpIr+dnNTYyDMaUeX2E/tb22oZeiRXXEYCtPSHN7FZc/6CtiZ2klDexVy76VD+bwhSEm+hyv+upJp5w1k+uJ1HZqanqwq5/QZSwGY/9Phdi0g6aGrTuaYHnkpuRjJc5M39nVfNHLMYQV2WdbeOprN9WHuWfIJV5zah8O6xCcUdDoUPpfC3xrF6XBgtpnFti5gcmRxblZ+xp1BKVWttR6Wbp/M3SSEyBqXw0hpbhraq5CbzhmQ8tQ+c2y82Sg57LW0yMczU07jiHwPnze0duhnqG0JY+l4E9LrUyuoaQhS6HMxol8xE87oh9dloFE0BqNAvMnqs/pWCnM9TDtvIN3zPeR5nISiJnlex25zMTbVBuhbkke3XAf+oMUbN1XQEtYEI2aH2Wpnjh1MSb6HHI+DUDjKqP97MyW5z0r0sRxsDuKWMiHEga57nofZbYawXj/6aLvpCeI346mL1nD96KOBjmtgF/vcaYfAvrruSyDe/1Fa5MPrMqg89UhmvvQxn+0McukDK/jRvW8yfu4KahrCHNkth+ZQjOmL13HB/cu5+uF3aQrF8LqcGed3chqKac9+SChq0RLWdPEZbK1vpTVqUpTr5t4ln3T4HNt2BjFN8LjieRsPXXUyue54gAlGDs4EPWluEhlJc9Oh69v83SbXoI6ZFpqOzUcAr980Eoci7ZrUoVAsJXmt7SJEHqfBjuYweR7nbpudFlaVU721nqFHFmMmkvZWJ7Zbw1HCJh2mM+9V5GHI7+Od19PPH0RJvofDCz38a+12/vXxDn533kAcDgPT0vY1vU6DcCxeNpfDoHpLHdc9uca+5uFdPLid4HO6v9G63p1NmpuEEPuN02nYwz9rm8Nph6n6XA57RFR7Xq+TI7zxW9XnDa2cffdyXrphBA1BCwXkenblSKTL8L5+ZH8chqJvSUGiZrErEOS6DcbPreavV5alTGde6DM4/tYlQLyWkON2MGl+NY9dewqnHNWNHwzqQSBsobUmGc5C0fgaF/+9eJ09j9TsyjIeuPwkLBThqEkwahGJgfZGyOHAChSZHPglFEIcMton27VvXtrj+YnmJ4Ain0GeR6H1ruk7/MGofe13fjuSt24eySn9uxExNfe0ax6aPL+a1ojFQ1efzDWPVHPajKVc9uA77GyN8tc3P7PfMzm1+ENXnYwGungdbGsIc9tza9lc12pnX1/10Er8rVFuOudYID6PlNfl4JjDChjYs4C3P61j/NwVbKlvZUdTlJbI3q27vb9JTUII8a1pn2yXrnmp7VTjbqeDQq+T2kDEnjvp6OJcu/kJIN/jIM9j8NDVJxMIxXjs2lPs5UtjloXTUFja5MoRfTssZhRvFlI8NelUQrH4sYYBC9oshTrn8jJKct0EE8l4kRgU+pz813nH89jbm1MCz5TH3mNBVXnGeaQApi5aw/TzB+F1OQiEWyn2ufF6D9xb8YFbMiHEIaltsl177acan/i9Ppw3pNTuL6ieNoptTUFqdsabgEqLfEx7di1nHdudQaWF/PyJ1Smjje54cT21LWFmVZbRu6uHSRX9U5L4nIYiGNVYDghF4x3ZLqVYUFVO1NIEQjE8ToMLZ7+dct3CHBd/fOUTrht9DFed3peWkMkDr29iYXUNpqW54ayj005x/viEcl5dX0uf4hwiMYut9a2UdvXRC98BGyikuUkIccBoP9X42GG97QCx7MYziMWgrjnMtGc/ZNzcFdz23Fr+84cDOf2YEqrmVXcYbTSpor99gzaUI6WZ6/7LTsLUGo9TETUtfG6nnauxrSFIY2uErnlurnro3Q7X/aoxzJiyXty75BOiJjQGo/xs1FG8flMFEVMTMa20w2q11tx0zgAu/+tKfr3wAyDeVLYzGCEUin1bP+Z9cmCGLiHEd1IkZvLXK8vI9bjsTuSXbhhBS1gTteJfySG0yXmX/vDPdfznDwemvSkX+lz298nRUG/dPJJYYu2I/168jt/96HiiiQn5PE4H3fLdlBb5sHS8YzzddXPcDrq53Vw5om/K+tyzK8u4Z8kn/Obc49J20DsMxdRFayjJ83Dj2QNSMsRnVZZxdHHuAVejkJqEEOKAUehzcFhhalOUBWyqCzB+7goaWqP2jXdSRX8eWb6ZK0f0ZVNtIG2ugz+RUJdsWmoIROyO5l8seJ8rR/SlMRhl1F2v8Zun/03MsvjVgg8YP3cFTUETtzN9DkVrxMTrctg3eYgHj0nzq7ni1D7c/sJHKfkhySDgMBLHVfTvcO7k+dXUBw+8zuwDK2QJIb7TNJqo2fH13l1zMZR1UwAAGeNJREFUeOzaU+xRTNeP7M/xhxdwTPfjuPyvKylJJO1NapcBfceL6+0btNMBv1z4QcqN+ean1vDINcPt7amL1tiTDU6aX83CqnKe/fkIQhHLrtnkeAxaQhZmhkztw7p4eXndDv7rvIFMP38Q/UtycRiKp6trOG/I4fHlWTMsxhQ7AJPtJEgIIQ4YpoaWsEk0pjEURE1NTGv+kMg9mPi9Pjw95dT/3965x0lVXfn+u069uvoB3TTdCAKCEdTG8QEdbHTMIBhj5mpMLj4wqFejPKLRcT7R8ZMxjjjOzJUoN8nVGMD5qIwgonI1CblER0d8oSItGhVQ5GHoNIGmpYF+VXdVrfnjnCqqu6sabLq6S1nfz6c+Vp299zk/qsuzzl5r77XYvb+N6YveYv6lp1Gzt4WavS2UFQa55+JTyA+6+ybKikLMv+w0Qn6HHZ83sT0STXtjlk6fU11U7XGlviHSZaPd3sYWhg8qTO9SEteQ1Ta0MtgL0NfsbWH+i5uZfFI586adSnNbLGPFvVzD3E2GYfQL8bjS0NxK7d5mPqtvomZvM+1R2NfczjWPrmXK/Fe45tG17Gtu58ZzTwDg+m8cT3tUkzOG1H0RoAwuCvHjp9/nkgVvMuPf36apLcYbm+uY/vDa5I05leEl4Q5GYnhJmEEFQc4YUZyMIaQrMvS18gHcu2ojD80Y36Wg0p7GNhZeOYHjSvMZXBhEhOQ5a/e1snjNNsoHhNK6o0rDh7dfpC+xmYRhGH1KNBqnzqsZrZBMnheNK5FovEsJ0huWvsuymVU8OXMif9nfxsCwP9m+YPWWZJ2JOUvWs/i6gzunRYT/2rCTMccM5PyKckYMcvc8JNJ9J27MexrdOECiRsV9z2/iHy44kfygj6DPyegWemHDbm6aMobHr5vI7v0RmttilBWFKAj5eez1rSx8bXsymD0g7OcXV5xOY0uUm6aMYfbj1Vw+YTjLZlYRV03W2s61oDWYkTAMow+JRuNs2nUgORNYdfNZbG11kk/rL9/6N2lvynFVRgwq4PJFb7F8VlXSVbN+RwP3P/8x91x8CmOGFLKvOc4VD6dP+53nd8gLwLKZVcTUdWdF2mMMDId4Zs4k6pvauP/5j1m/o4ENOw+wbGYVPoeMbqHhJWH2NLYxqCDIMQPz8DuC3xGmeXsqEtoT9SVKC91+LW0xHrjidNqiyoad+1lRvYO7LhpHfUtbMv1ILmHuJsMw+ozdjZGkgQAYEA51cOf4HCetS8jnSDKltwjMm3awbnZdY4Sg30FViWnmtN/b6pvZsqcV9Z7cQz6HgpAfVbhkwZvMfry6w25s9arXpctCmx9yuO+SUxkxKExe0GF/a5TLF71F7b7WDtc/Y0Qxd15YwXGl+dQ3tqFeYLq8KI9wQLhn5QZumjqWcNDJyaA12EzCMIw+pL3TJrPOtRwi7VF+PWM8P/RcTsNLwvx6xnhCfoe2aJzhJWFUYfGabR3qZi9es41/umgcPjI/+S96dQt/d95Ygt652nE3wRWHA2nHOI7QGo1TvW1P0oWV53eIKxxodYsI5QeFgAPxeJxlM6sQOXj9M0YUd9gLcX5FOXf8jwr2t0bZcyDC8EFh/v/fncVfGiIcaI3lZNAazEgYhtGHBHxOhxtywm2T+Oy6bwI8du1EHIG4gt8Hdzz7AT84213ZFIsrN08d22G564IrJxBwhDjaofxp4sm/OOww9zvj8IlQGBIifh/tUWVgOEBhyEk7Zv1n9Yw/rpTK0YO9MqWuvtmdrltWGGTkoDDb65sZMiAvuRQ3dS9EYuNfaunUBVdOIBqDSAyGDPSR5+Tm7Tg3VRmG8ZWkvDDU4YYcDna8QYsI1y2u7vJUf+eFFUx/eC3VP53KXw5EePC/NnPnhRWUFgQpKwoxIM/H65vrOPNrgxleEuqQ9ntA2OHpdX9m7spNSQMQaY9xy/L3ktf5aO7U5JhErYlRZQPICzoUxf20ReM0Rtq5adl7aeMNg4tCHFsS5v4/fELF0MLkuVI3/qXbeLf0+jNZ+V4NV581mjZ/jLJQ7t2Ss6pIRPKAV4GQd61nVPUuEXkNKPK6lQNrVfW7ncYeB/w/wAcEgAdUdUE29RqGkV38foexgwt4clYV8bhyoDXG6o27eGJmFYkCaIkypIk8Sg+/ujW5d6G1/eDqpxc27AYOBqYfeeNPjCgt5KGXP2XahBFJA7L+swbmrtwEHFzCuvT6M5Oromr2tvCtX67h6TlVOOpe8/SRpTiOcvGDazrNGkIdDFgiRccPl1SzbGYVV581ivZYjLt/9xFzvzMuOUvKtHmu7kCESypHuvGIaJpdhDlAts1WBJiiqo0iEgBeF5FVqnpOooOIrAB+k2bsTuAsVY2ISCHwoYj8VlVrs6zZMIwsEgr5GeIItftb8TvC8uoa5r+4GYDqn07lyknHce1j7yRvzg/NGE9+0Ad0jWHAwcD0zVPH8KMn1ncxIHdeWNGlfyyuLF6zjeWzqtjT2EZRnp/nP9jJ+FGl3LD0XR695utJDYkxiVnDtY+9kzxXIvVHYgXWnCXVPDmrihc27KY4HEzGVxL7OTrPkOqb3NVRfkcI+n29/2X3Alld3aQujd7HgPdKhvBFpAiYAjyXZmybqka8j6FsazUMo+8IBHzJCnCpq4dSZwpwcJ9EOODeQLurRz1qcH5aAzIiTf+4ws1Tx5IfdHAE7l21kaElBRTl+Vk+q4qgP/3+iFGDCzqsdJo37VQWrN7ibsoTSRqgZ+ZMYmrFEFZv2s2j13ydiqFFLOy0SmretFNZUb2DoN+hOOwcduGlvibrDjAR8QHVwAnAr1T17ZTm7wEvqer+DGNHAL/3xt6WbhYhIrOAWQAjR47sZfWGYWSL4rDDnqYYx5cejCF0N1N45bbJFOWlDzIX5jk0tcL5FeVMmzAiueppRfUOBqasXkqNSdz53IeUFQW548IK/uGCk3EEgj6Hu3/3EXddNC7tk3/AJ9z7P/+KocVh/lTfzP3PH6xX8Zt3axheEmZrXRPXPvYOw0vC/Or743lm3Z/4xolD+PPnTSy9/kzqDkSob2pj8Zpt3DR1LCVhh4Dj71B4KZfIupFQ1RhwuogUA8+KyCmq+qHXfAXw792M3QGcKiLDgOdE5BlV3dWpzyJgEUBlZWVuLjQ2DKML+1rdwPK3fun6/ROb5DItYT173su8cfu5tLe3dwhM79rXTN0BH0V5Pn40ZUxyJpJwVQV8wpOzqmiLxvH7HJa+uY2Fr20HYOFVE5jx8NvJ6/34vDHcNHUsjkNaY/Ss5xo7Y0QxN08dwy+mn44jwnPv1rC8uiaZVBBc43bjE++y5LozeejlT3mquobZ54ziykmjKSsKcddF4wj5XQMRDOZewDpBn7lwVLUBWA1cACAipcBE3JnCocbWAh8B5xyqr2EYXw7KC0ME/JJ0NzW0tDOwk/spdQkruLOPQCCQTPd9+aK38Pv9ROMx2mOa1lXVHlOicTdra1w1aSDc83UMKM9/cTOrN+7CQRhW7M5wXrltMstnVVEYcpJlTesaI5QVhfhszwE27NzPxONLefwHE/nZHz5ObshLaNjTGGFqxRCGl4SZfNIQWqMxSvJ9iAjF4WBOGwjI/uqmMqBdVRtEJAycB8zzmi8FVqpqa4axw4F6VW0RkRLgbOD/ZFOvYRh9h9/vEPQ5HOvdjEWgrjHKoHx/h5kCKB/WNgF0cU/5HXE32sXiRGPpXVUxVQQh6Bd8nfZlpAsoL6+uYezQAayo3sE//m0FiuJ3HIL+AE/OqiIWVwKO4PcLFz7wenLcwqsmUNcY6XD9RHD6pGOKeHJWFQHH3adR3xwnrsquA62UFeS2oci2sqHAYi8u4QBPqepKr206cG9qZxGpBOao6vXAycB8EVFAgPtV9YMs6zUMow8ZkBfsUNP6jdvP7VAbGjquUEp1T6W2L59V1cUAJNricfh41wFmP17NGSOKue+SU5PV7VZU7+jiVlpw5QT8DkybMIK/X/4edY0Rls+qoigkCA4NLVFiccWvHTcGLli9pcO5E8HpxWu2ccPkE/juQ2uSM6PtdfsJBgKUFgSJxpWhReSsociqKlX9I3BGhrbJaY6tA6733v8ncGo29RmG0b84jnDikCKeveFs2qIxwkEfD19VyczH13WIBTzw0icA7NrXnDZWsGtfM5/ubupSeOjXM8YjDqyo3gG4bqLBRSHuv/Q0BCgfEKItGkvWoWhuixEKONz3h028sGF38vz1ja3c/bst3HLe2GQt7fMrynloxvikiyvhglpy3ZnsaTwYnL727NGUeCuXava28MBLn3TZMb7wygmcPHRATgavJbGB5atAZWWlrlu3rr9lfGW4fOGbACyfPamflRi9TS7/beNxpb6pjbZojKDfx8CQj7qmtqR7qTQcpL6lrZM76gDF4QDlA4KEfD7aU1xR4QDJVOSJZbeJzz5HmJ5m5pLqzmqKtLOtvoWx5YVc9cjaDn3Pryhn7kXjaI8rW+uaOPGYQm5cup45k7+WXGG1YPUW5l92GlPmvwK4bql7Vm7ocs1nbzibsqKOpVv7ChGpVtXKdG25Ob8xDOOoxfGqyqVybCdXzLF5fuJxpXZfC9MXvd3lhvvU7EmUFQTZtLuRHy6ppqwwxF0XVVBSEOT1LQ0sWL2F9TsaWH3r5LRxjJb2GAGfw4+eWM+t3zqRe1ZuSFbBS+WFDbu55byxFIT8XPvYO6y7Yyr3XXoajkAsrqyorqGuMUIsJcNraUEw7TXbjtId14ZhGFnBcYQhnXJBJWIK5YUh/H6Hk8oLOwXB6fAUv6cxkjaOsaexjRElYW6eOiaZuiPTrumCkJ+AI8w+ZxQ793csdfrQjPHcOPUEnnhze7J/WVEo7XmOyh3XhmEY2SQQ8HHykCKemj2JV2+bzFOzJ3HSkCL8fifZfmxJPseVFjB0YJi4aoeSo4te3cLCqzouuf35ZacRDjiE/E6HXdyJKnipfRdeOYHBBT7yQw5XnTW6S6nTG5a+i1+EGZNG88ptk1k2s4qBYR+/+v74LueJx+PUHYgQz7G6EjaTMAzjS43f7zCsOHzIfo4jHFucT1FeW3J2EfA5lIYDLJvpbrZLpAMvCPkpDgdpj2vaKnjHlxUQ9DmUFYbY29JO3NuHkc6NFInGmTL/lWQQvCAUYu5vP+LOCysoLwoxMBzg3lUbk4Hyh6+u5MQhRTkTxLaZhGEYRw2OIxTnh5Kzi2HFYUIhP0MH5BEO+vA5wrElYUYNKsDvdygrCLEgZXNfXWOEvIBDeyxOWaEbN2mPxWmNxjPmlQr5neSGvJGDQuz43F0JNfvxahqa27n6kbXJhIQ1e1uY+R/rqG9q69svphtsJmEYxlFPptmI3+9w0pAinp49ibZYHJ8jBH0Og/LdJa2p9brnXnhS1+W5M8ZzoLWdcNCPAk2ROHN/uyFZVa+0MPeD2GYkDMMwusHvdxiaxoDUNrR0qNc9d+Um3vzJucmqeolaGGu21vPU7EkMKw5T23BwFgEk4yG5HMQ2d5NhGEYP6FyvG+DnL2ympT3G1Y+s5Zs/f5U1W+uTq63AzVeV6r5K7PhODWI/fHVlt2nDo9E4tQ0tfFbfRG1DC9FoPEv/QhebSRiGYfSAzvW6AdZsref2b5/IU7MnEY25WWcTy3HhoPsqtb2sIJjccR70+ygtCKYNWkejcfa1tlG7L9JlyW/qiq7exmYShmEYPaDzrCBxwx6YF2RYcZiRXmC88807Ef9ItAcCPsqK3GB6WVEoo4HYtOsAe5ujXZbZzllSze5OiQV7E5tJGIZh9IB0s4LUWUNvsrsxwpwl1fzHDyamL8oUy57LyYyEYRhGDzncPRpHSiL+EUvZt5FgeEkYvy97TiFzNxmGYeQ4ifjHw69u7bBjPDUNSbawmYRhGEaOk4h/zFniLp197NqJBHxCIIsurgRmJAzDMHKcvox/dLl21q9gGIZhHDF9Ff/ojMUkDMMwjIyYkTAMwzAyYkbCMAzDyEhWjYSI5InIWhF5X0Q+EpG7veOvich73qtWRJ5LM/Z0EXnTG/dHEbk8m1oNwzCMrmQ7cB0Bpqhqo4gEgNdFZJWqnpPoICIrgN+kGdsMXK2qm0VkGFAtIs+rakOWNRuGYRgeWTUSqqpAo/cx4L2StflEpAiYAlybZuwnKe9rRWQ3UAaYkTAMw+gjsh6TEBGfiLwH7Ab+U1XfTmn+HvCSqu4/xDkmAkFgS5q2WSKyTkTW1dXV9aZ0wzCMo56sGwlVjanq6cBwYKKInJLSfAWwrLvxIjIUeBy4VlW7ZLFS1UWqWqmqlWVlZb0p3TAM46inz1Y3ebGE1cAFACJSCkwEfp9pjIgM8Np/qqpv9YFMwzAMIwVxwwZZOrlIGdCuqg0iEgZeAOap6koRmQNMUtX/lWFsEFgF/E5Vf3GY16sDPusl+ZkYDOzJ8jWOBNN3ZJi+npPL2sD0dcdxqprWFZPt1U1DgcUi4sOdtTylqiu9tunAvamdRaQSmKOq1wOXAd8ASkXkGq/LNar6XqaLZfpH9iYisk5VK7N9nZ5i+o4M09dzclkbmL6eku3VTX8EzsjQNjnNsXXA9d77JcCSbOozDMMwusd2XBuGYRgZMSPxxVnU3wIOgek7Mkxfz8llbWD6ekRWA9eGYRjGlxubSRiGYRgZMSNhGIZhZMSMhIeIXOplnI17S3ETx78pItUi8oH33yne8XwR+b2IbPLG3ZvhvKNEpCUl6+2CXNKXcp6RItIoIrfmijYRmZjyvb0vIt/7otqyrC/t+BzSVyoiL3t/1wd7oi2b+ry+PxGRT0XkYxH5Vl/o89r+VUR2iEhj+rO6e7VE5FFv/PsiMjnH9AVEZLE3fqOI/KQn+g6JqtrLjcucDJyIuyu8MuX4GcAw7/0pwJ+99/nAud77IPAa8O005x0FfJir+lLOswJ4Grg1V7R5/fze+6G4+b/8OaQv7fgc0lcA/DUwB3gw1357QAXwPhACRuPmZvNlW5/3ucr7TTV2c94bgUe99+VANeDkkL7vA0+mfOfbgVE9/TtnelmNaw9V3QggIp2Pr0/5+BGQJyIhVW0GXvb6tInIu7j5qb50+kTku8BWoCmXtHn9EuSRkkE4R/RlGh/JEX1NuOn5T/gievpKH3Ax7k0uAmwTkU9xU/W8mWV9EfXS/HQe04kK4CXvXLtFpAGoBNbmiD4FCkTED4SBNqDbZKk9wdxNX4xpwPrONwERKQYuwvtBpWG0iKwXkVdE5JwMffpFn4gUALcDd2dRV4+0ee1nishHwAe4u/GjuaTvUONzSF+26Ym+Y4EdKZ9rvGN9pu8QvA9cLCJ+ERkNTABGZEVdz/Q9g/tgtxP4E3C/qn7e28KOqpmEiLwIHJOm6Q5VTVf4KHXsOGAecH6n437cTLb/V1W3phm6ExipqvUiMgF4TkTGaZr06P2k727g5+oWhuru/P2hDXVTy48TkZNxU7ysUtXWXNHX3fhc0Xc49JO+dD+4tLPFbOg7DB7BdRWtw80JtwZI+5DST/omAjFgGFACvCYiLx7pb6EzR5WRUNXzejJORIYDz+JWyutc02IRsFkzJCH0ngwi3vtqEdkCjMX94fW7PuBM4BIR+RlQDMRFpFVVOwQ6+0lb6vU3ikgTru82V767Q43vd32HSz/pq6Hjk/lwoLYP9XWLN2v9+5RzrQE254o+3JjEH1S1HdgtIm/gusN61UiYu+kQeNPl3wM/UdU3OrX9CzAQuKWb8WXiJjhERI4HxtCLf8Qj1aeq56jqKFUdBfwC+LfOBqK/tInIaO9pFBE5Djf4t703tPWSvozjc0FftukFfb8FpotIyHPnjOEL+vt7qu8wx+d77lhE5JtAVFU35Io+XBfTFHEpwA12b+otfUmONPL9VXnhVsmrwX3q3wU87x3/Ka7f772UVznuU48CG1OOX++N+Q7wz977abhBqfeBd4GLcklfp2vMpWerm7L13V3lfXfved/dd3Ppu8s0Plf0eZ+3A5/jlhGuASpyTN8duKuaPqab1Xe9qc9r+5k3Ju79d26av+8oT9dG4EXcdNq5pK8Qd0XiR8AG4Lae6DvUy9JyGIZhGBkxd5NhGIaRETMShmEYRkbMSBiGYRgZMSNhGIZhZMSMhGEYhpERMxKGYRhGRsxIGMZhICK3iEh+D8ZdIyLDDtFntaSkkDaMXMKMhGEcHrfgpmM+bLyd9tfg5tYxjC8lZiQMoxMiUiBu0Zz3ReRDEbkL90b/soi87PX5tYisE7eYzN0pY7eLyD+JyOvAFbi5dJaKWzgpfBjXbhS34Mz7IvKWiAzxjn/N+/yOiPyzdFOMxjB6EzMShtGVC4BaVT1NVU/BzWlVi1tI51yvzx2qWgmcCvyNiJyaMr5VVf9aVZfgJiOcoaqnq2rLYVy7AHhLVU8DXgVmesd/CfxSVb9OhiR4hpENzEgYRlc+AM4TkXkico6q7kvT5zJxi+msB8bhFqhJsPwIrt0GrPTeV+PmDwKYhJunB+CJIzi/YXwhjqpU4YZxOKjqJ17tj78F/reIvJDa7mUsvRX4uqruFZHHcCvnJehRhT+Pdj2YUC2G/T9q9DM2kzCMTnirkZo9d9H9wHjgAFDkdRmAawj2eTGDb3dzutRxR8JbuBmFAab3wvkM47CwpxTD6MpfAfeJSBxoB36I6+5ZJSI7VfVcEVmPm6J5K9BdLYDHgAUi0gJMOsy4RDpuAZaIyI9xaxCkc4EZRq9jqcIN40uAt0ejRVVVRKYDV6jqxf2ty/jqYzMJw/hyMAF4UNxC5A3AD/pZj3GUYDMJw+gjRORZYHSnw7er6vP9occwDgczEoZhGEZGbHWTYRiGkREzEoZhGEZGzEgYhmEYGTEjYRiGYWTkvwGeLtuLt2TE6AAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.scatterplot(data = bikes, x = 'start_lng', y = 'start_lat')\n",
    "\n",
    "plt.axvline(-122.35)\n",
    "plt.axvline(-122.05)\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n",
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  import sys\n"
     ]
    }
   ],
   "source": [
    "sanfran = bikes[bikes['start_lng'] < -122.35]\n",
    "oakland = bikes[bikes['start_lng'].between(-122.35,-122.05)]\n",
    "sanjose = bikes[bikes['start_lng'] > -122.05]\n",
    "\n",
    "sanfran['start_city'] = 'San Francisco'\n",
    "oakland['start_city'] = 'Oakland'\n",
    "sanjose['start_city'] = 'San Jose'\n",
    "\n",
    "bikes = sanfran.append(oakland.append(sanjose))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.scatterplot(data = bikes, x = 'start_lng', y = 'start_lat', hue = 'start_city')\n",
    " \n",
    "plt.axvline(-122.35)\n",
    "plt.axvline(-122.05)\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Find Distance travelled from start to end of the trip"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "bikes['delta_lat'] = abs(bikes['start_lat'] - bikes['end_lat'])\n",
    "bikes['delta_lng'] = abs(bikes['start_lng'] - bikes['end_lng'])\n",
    "\n",
    "bikes['distance'] = np.sqrt(((bikes['delta_lat']*1.26)**2) + bikes['delta_lng']**2)*88.2\n",
    "\n",
    "bikes.drop(['delta_lat', 'delta_lng'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The distance between points on map differs based on the longitude and latitude as the distance between each degree of change in longitude and latitude are not equal.\n",
    "\n",
    "(37.5N, 122.0W) to (37.6N, 122.0W) is 11.12km\n",
    "\n",
    "(37.5N, 122.0W) to (37.5N, 122.1W) is 8.82km\n",
    "\n",
    "Each 0.1 change in latitude amounts to 26% more distance than the same change in longitude.\n",
    "After scaling the to increase the latitude delta by the same value and using the Pythagorean theorem then multiplying by a factor of 88.2 (8.82 * 10) we can find the difference between two points in km. \n",
    "\n",
    "By using the [calculator](http://www.meridianoutpost.com/resources/etools/calculators/calculator-latitude-longitude-distance.php?) on Meridian Outpost, and using some samples to test the formula, I was able to minimize the difference between the actual result and the calculation. \n",
    "\n",
    "<br>\n",
    "\n",
    "Note: The formula only works for shorter distances as it assumes the surface of the map is flat. Which with close enough distances, will get decently close results without doing too much work. It is by no means perfect, but for this instance, it is enough. Additionally, the distance measured is a straight line difference between the start and end coordinates, should someone undock a bike and redock at the same location, distance travelled will be 0. The calculation also does not count for the actual route taken, just a straight line, which is improbable as bike riders to tend to take the occasional turn while on a bike.  \n",
    "\n",
    "\n",
    "The average error is 0.06%, with a range is from -0.70% to +0.40%\n",
    "\n",
    "i.e. Results within range of short by 7m and long by 4m per kilometer. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>37.776435</td>\n",
       "      <td>-122.426244</td>\n",
       "      <td>37.778768</td>\n",
       "      <td>-122.415929</td>\n",
       "      <td>0.945987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37.784872</td>\n",
       "      <td>-122.400876</td>\n",
       "      <td>37.766210</td>\n",
       "      <td>-122.426614</td>\n",
       "      <td>3.074813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.774520</td>\n",
       "      <td>-122.409449</td>\n",
       "      <td>37.783899</td>\n",
       "      <td>-122.408445</td>\n",
       "      <td>1.046061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>37.776598</td>\n",
       "      <td>-122.395282</td>\n",
       "      <td>37.776598</td>\n",
       "      <td>-122.395282</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>37.784872</td>\n",
       "      <td>-122.400876</td>\n",
       "      <td>37.784872</td>\n",
       "      <td>-122.400876</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   start_lat   start_lng    end_lat     end_lng  distance\n",
       "0  37.776435 -122.426244  37.778768 -122.415929  0.945987\n",
       "1  37.784872 -122.400876  37.766210 -122.426614  3.074813\n",
       "3  37.774520 -122.409449  37.783899 -122.408445  1.046061\n",
       "5  37.776598 -122.395282  37.776598 -122.395282  0.000000\n",
       "7  37.784872 -122.400876  37.784872 -122.400876  0.000000"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[['start_lat', 'start_lng', 'end_lat', 'end_lng', 'distance']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Calculate average speed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "bikes['speed'] = (bikes['distance'] / (bikes['duration'] / 3600))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As stated in distance, should the trip start and end in the same location, the speed will also be 0, replace these with NaNs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>distance</th>\n",
       "      <th>duration</th>\n",
       "      <th>speed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.945987</td>\n",
       "      <td>80111</td>\n",
       "      <td>0.042510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.074813</td>\n",
       "      <td>78801</td>\n",
       "      <td>0.140472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.046061</td>\n",
       "      <td>62173</td>\n",
       "      <td>0.060570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>9227</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>4334</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   distance  duration     speed\n",
       "0  0.945987     80111  0.042510\n",
       "1  3.074813     78801  0.140472\n",
       "3  1.046061     62173  0.060570\n",
       "5  0.000000      9227  0.000000\n",
       "7  0.000000      4334  0.000000"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[['distance', 'duration', 'speed']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6.320688e+06\n",
       "mean              inf\n",
       "std               NaN\n",
       "min     -1.454138e+04\n",
       "25%      7.492633e+00\n",
       "50%      9.839946e+00\n",
       "75%      1.206434e+01\n",
       "max               inf\n",
       "Name: speed, dtype: float64"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes['speed'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-14541.377173340301"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.speed.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "inf"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.speed.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Remove the trips that don't seem possible "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_id</th>\n",
       "      <th>start_name</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_id</th>\n",
       "      <th>end_name</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>...</th>\n",
       "      <th>start_year</th>\n",
       "      <th>start_month</th>\n",
       "      <th>start_dow</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>start_yymm</th>\n",
       "      <th>dow</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_city</th>\n",
       "      <th>distance</th>\n",
       "      <th>speed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>115415</th>\n",
       "      <td>2018-11-04 01:59:54</td>\n",
       "      <td>2018-11-04 01:07:50</td>\n",
       "      <td>67.0</td>\n",
       "      <td>San Francisco Caltrain Station 2  (Townsend St...</td>\n",
       "      <td>37.776639</td>\n",
       "      <td>-122.395526</td>\n",
       "      <td>37.0</td>\n",
       "      <td>2nd St at Folsom St</td>\n",
       "      <td>37.785000</td>\n",
       "      <td>-122.395936</td>\n",
       "      <td>...</td>\n",
       "      <td>2018</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>Sun</td>\n",
       "      <td>-3124</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>0.929823</td>\n",
       "      <td>-1.071499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170726</th>\n",
       "      <td>2019-11-03 01:59:09</td>\n",
       "      <td>2019-11-03 01:27:49</td>\n",
       "      <td>284.0</td>\n",
       "      <td>Yerba Buena Center for the Arts (Howard St at ...</td>\n",
       "      <td>37.784872</td>\n",
       "      <td>-122.400876</td>\n",
       "      <td>356.0</td>\n",
       "      <td>Valencia St at Clinton Park</td>\n",
       "      <td>37.769188</td>\n",
       "      <td>-122.422285</td>\n",
       "      <td>...</td>\n",
       "      <td>2019</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>2019-11</td>\n",
       "      <td>Sun</td>\n",
       "      <td>-1880</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>2.569767</td>\n",
       "      <td>-4.920830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170749</th>\n",
       "      <td>2019-11-03 01:59:13</td>\n",
       "      <td>2019-11-03 01:09:56</td>\n",
       "      <td>139.0</td>\n",
       "      <td>Garfield Square (25th St at Harrison St)</td>\n",
       "      <td>37.751017</td>\n",
       "      <td>-122.411901</td>\n",
       "      <td>130.0</td>\n",
       "      <td>22nd St Caltrain Station</td>\n",
       "      <td>37.757704</td>\n",
       "      <td>-122.391885</td>\n",
       "      <td>...</td>\n",
       "      <td>2019</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>2019-11</td>\n",
       "      <td>Sun</td>\n",
       "      <td>-2957</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>1.915442</td>\n",
       "      <td>-2.331955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170751</th>\n",
       "      <td>2019-11-03 01:50:02</td>\n",
       "      <td>2019-11-03 01:05:57</td>\n",
       "      <td>98.0</td>\n",
       "      <td>Valencia St at 16th St</td>\n",
       "      <td>37.765052</td>\n",
       "      <td>-122.421866</td>\n",
       "      <td>321.0</td>\n",
       "      <td>Folsom St at 5th St</td>\n",
       "      <td>37.780645</td>\n",
       "      <td>-122.402866</td>\n",
       "      <td>...</td>\n",
       "      <td>2019</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>2019-11</td>\n",
       "      <td>Sun</td>\n",
       "      <td>-2645</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>2.410660</td>\n",
       "      <td>-3.281050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170752</th>\n",
       "      <td>2019-11-03 01:49:43</td>\n",
       "      <td>2019-11-03 01:05:50</td>\n",
       "      <td>98.0</td>\n",
       "      <td>Valencia St at 16th St</td>\n",
       "      <td>37.765052</td>\n",
       "      <td>-122.421866</td>\n",
       "      <td>321.0</td>\n",
       "      <td>Folsom St at 5th St</td>\n",
       "      <td>37.780645</td>\n",
       "      <td>-122.402866</td>\n",
       "      <td>...</td>\n",
       "      <td>2019</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>2019-11</td>\n",
       "      <td>Sun</td>\n",
       "      <td>-2633</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>2.410660</td>\n",
       "      <td>-3.296003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95775</th>\n",
       "      <td>2020-06-17 18:26:22</td>\n",
       "      <td>2020-06-17 18:26:22</td>\n",
       "      <td>278.0</td>\n",
       "      <td>The Alameda at Bush St</td>\n",
       "      <td>37.331955</td>\n",
       "      <td>-121.904980</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.330000</td>\n",
       "      <td>-121.900000</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>2020-06</td>\n",
       "      <td>Wed</td>\n",
       "      <td>0</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>0.490042</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105739</th>\n",
       "      <td>2020-06-09 16:56:30</td>\n",
       "      <td>2020-06-09 16:56:30</td>\n",
       "      <td>427.0</td>\n",
       "      <td>Auzerais Ave at Lincoln Ave</td>\n",
       "      <td>37.321021</td>\n",
       "      <td>-121.908093</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.320000</td>\n",
       "      <td>-121.910000</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>2020-06</td>\n",
       "      <td>Tue</td>\n",
       "      <td>0</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>0.202856</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147204</th>\n",
       "      <td>2020-06-19 05:05:09</td>\n",
       "      <td>2020-06-19 05:05:09</td>\n",
       "      <td>35.0</td>\n",
       "      <td>Cahill Park</td>\n",
       "      <td>37.329068</td>\n",
       "      <td>-121.904654</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.330000</td>\n",
       "      <td>-121.900000</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2020-06</td>\n",
       "      <td>Fri</td>\n",
       "      <td>0</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>0.423306</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154345</th>\n",
       "      <td>2020-06-17 19:48:02</td>\n",
       "      <td>2020-06-17 19:48:02</td>\n",
       "      <td>276.0</td>\n",
       "      <td>Julian St at The Alameda</td>\n",
       "      <td>37.332226</td>\n",
       "      <td>-121.912410</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.330000</td>\n",
       "      <td>-121.910000</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>19</td>\n",
       "      <td>2020-06</td>\n",
       "      <td>Wed</td>\n",
       "      <td>0</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>0.326125</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120257</th>\n",
       "      <td>2020-07-29 21:55:37</td>\n",
       "      <td>2020-07-29 21:55:37</td>\n",
       "      <td>312.0</td>\n",
       "      <td>San Jose Diridon Station</td>\n",
       "      <td>37.329729</td>\n",
       "      <td>-121.901666</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.330000</td>\n",
       "      <td>-121.900000</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>2020-07</td>\n",
       "      <td>Wed</td>\n",
       "      <td>0</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>0.150003</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>527 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                started_at            ended_at  start_id  \\\n",
       "115415 2018-11-04 01:59:54 2018-11-04 01:07:50      67.0   \n",
       "170726 2019-11-03 01:59:09 2019-11-03 01:27:49     284.0   \n",
       "170749 2019-11-03 01:59:13 2019-11-03 01:09:56     139.0   \n",
       "170751 2019-11-03 01:50:02 2019-11-03 01:05:57      98.0   \n",
       "170752 2019-11-03 01:49:43 2019-11-03 01:05:50      98.0   \n",
       "...                    ...                 ...       ...   \n",
       "95775  2020-06-17 18:26:22 2020-06-17 18:26:22     278.0   \n",
       "105739 2020-06-09 16:56:30 2020-06-09 16:56:30     427.0   \n",
       "147204 2020-06-19 05:05:09 2020-06-19 05:05:09      35.0   \n",
       "154345 2020-06-17 19:48:02 2020-06-17 19:48:02     276.0   \n",
       "120257 2020-07-29 21:55:37 2020-07-29 21:55:37     312.0   \n",
       "\n",
       "                                               start_name  start_lat  \\\n",
       "115415  San Francisco Caltrain Station 2  (Townsend St...  37.776639   \n",
       "170726  Yerba Buena Center for the Arts (Howard St at ...  37.784872   \n",
       "170749           Garfield Square (25th St at Harrison St)  37.751017   \n",
       "170751                             Valencia St at 16th St  37.765052   \n",
       "170752                             Valencia St at 16th St  37.765052   \n",
       "...                                                   ...        ...   \n",
       "95775                              The Alameda at Bush St  37.331955   \n",
       "105739                        Auzerais Ave at Lincoln Ave  37.321021   \n",
       "147204                                        Cahill Park  37.329068   \n",
       "154345                           Julian St at The Alameda  37.332226   \n",
       "120257                           San Jose Diridon Station  37.329729   \n",
       "\n",
       "         start_lng  end_id                     end_name    end_lat  \\\n",
       "115415 -122.395526    37.0          2nd St at Folsom St  37.785000   \n",
       "170726 -122.400876   356.0  Valencia St at Clinton Park  37.769188   \n",
       "170749 -122.411901   130.0     22nd St Caltrain Station  37.757704   \n",
       "170751 -122.421866   321.0          Folsom St at 5th St  37.780645   \n",
       "170752 -122.421866   321.0          Folsom St at 5th St  37.780645   \n",
       "...            ...     ...                          ...        ...   \n",
       "95775  -121.904980     NaN                          NaN  37.330000   \n",
       "105739 -121.908093     NaN                          NaN  37.320000   \n",
       "147204 -121.904654     NaN                          NaN  37.330000   \n",
       "154345 -121.912410     NaN                          NaN  37.330000   \n",
       "120257 -121.901666     NaN                          NaN  37.330000   \n",
       "\n",
       "           end_lng  ...  start_year start_month start_dow start_hour  \\\n",
       "115415 -122.395936  ...        2018          11         6          1   \n",
       "170726 -122.422285  ...        2019          11         6          1   \n",
       "170749 -122.391885  ...        2019          11         6          1   \n",
       "170751 -122.402866  ...        2019          11         6          1   \n",
       "170752 -122.402866  ...        2019          11         6          1   \n",
       "...            ...  ...         ...         ...       ...        ...   \n",
       "95775  -121.900000  ...        2020           6         2         18   \n",
       "105739 -121.910000  ...        2020           6         1         16   \n",
       "147204 -121.900000  ...        2020           6         4          5   \n",
       "154345 -121.910000  ...        2020           6         2         19   \n",
       "120257 -121.900000  ...        2020           7         2         21   \n",
       "\n",
       "       start_yymm  dow duration     start_city  distance     speed  \n",
       "115415    2018-11  Sun    -3124  San Francisco  0.929823 -1.071499  \n",
       "170726    2019-11  Sun    -1880  San Francisco  2.569767 -4.920830  \n",
       "170749    2019-11  Sun    -2957  San Francisco  1.915442 -2.331955  \n",
       "170751    2019-11  Sun    -2645  San Francisco  2.410660 -3.281050  \n",
       "170752    2019-11  Sun    -2633  San Francisco  2.410660 -3.296003  \n",
       "...           ...  ...      ...            ...       ...       ...  \n",
       "95775     2020-06  Wed        0       San Jose  0.490042       inf  \n",
       "105739    2020-06  Tue        0       San Jose  0.202856       inf  \n",
       "147204    2020-06  Fri        0       San Jose  0.423306       inf  \n",
       "154345    2020-06  Wed        0       San Jose  0.326125       inf  \n",
       "120257    2020-07  Wed        0       San Jose  0.150003       inf  \n",
       "\n",
       "[527 rows x 27 columns]"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[bikes['duration'] <= 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tip for people using Time Turners or TARDISes, please ensure that sufficient time has elapsed to prevent issues where vehicles are returned before they are borrowed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "bikes = bikes[bikes['duration'] > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_id</th>\n",
       "      <th>start_name</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_id</th>\n",
       "      <th>end_name</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>...</th>\n",
       "      <th>start_year</th>\n",
       "      <th>start_month</th>\n",
       "      <th>start_dow</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>start_yymm</th>\n",
       "      <th>dow</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_city</th>\n",
       "      <th>distance</th>\n",
       "      <th>speed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>35862</th>\n",
       "      <td>2020-04-17 19:59:45</td>\n",
       "      <td>2020-04-20 20:21:58</td>\n",
       "      <td>521.0</td>\n",
       "      <td>48th Ave at Cabrillo St</td>\n",
       "      <td>37.773000</td>\n",
       "      <td>-122.509100</td>\n",
       "      <td>490.0</td>\n",
       "      <td>9th Ave at Geary Blvd</td>\n",
       "      <td>37.781800</td>\n",
       "      <td>-122.467600</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>19</td>\n",
       "      <td>2020-04</td>\n",
       "      <td>Fri</td>\n",
       "      <td>260533</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>3.788694</td>\n",
       "      <td>0.052352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36826</th>\n",
       "      <td>2020-04-15 07:31:01</td>\n",
       "      <td>2020-04-21 11:32:02</td>\n",
       "      <td>130.0</td>\n",
       "      <td>22nd St Caltrain Station</td>\n",
       "      <td>37.757700</td>\n",
       "      <td>-122.391900</td>\n",
       "      <td>130.0</td>\n",
       "      <td>22nd St Caltrain Station</td>\n",
       "      <td>37.757700</td>\n",
       "      <td>-122.391900</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>2020-04</td>\n",
       "      <td>Wed</td>\n",
       "      <td>532861</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37511</th>\n",
       "      <td>2020-04-13 18:52:51</td>\n",
       "      <td>2020-05-14 21:13:51</td>\n",
       "      <td>14.0</td>\n",
       "      <td>Clay St at Battery St</td>\n",
       "      <td>37.795000</td>\n",
       "      <td>-122.400000</td>\n",
       "      <td>344.0</td>\n",
       "      <td>16th St Depot</td>\n",
       "      <td>37.766300</td>\n",
       "      <td>-122.396300</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>2020-04</td>\n",
       "      <td>Mon</td>\n",
       "      <td>2686860</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>3.206140</td>\n",
       "      <td>0.004296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37711</th>\n",
       "      <td>2020-04-01 18:44:19</td>\n",
       "      <td>2020-04-19 19:07:46</td>\n",
       "      <td>85.0</td>\n",
       "      <td>Church St at Duboce Ave</td>\n",
       "      <td>37.770100</td>\n",
       "      <td>-122.429200</td>\n",
       "      <td>50.0</td>\n",
       "      <td>2nd St at Townsend St</td>\n",
       "      <td>37.780500</td>\n",
       "      <td>-122.390300</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>2020-04</td>\n",
       "      <td>Wed</td>\n",
       "      <td>1556607</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>3.620419</td>\n",
       "      <td>0.008373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38407</th>\n",
       "      <td>2020-04-09 20:42:58</td>\n",
       "      <td>2020-05-01 18:55:16</td>\n",
       "      <td>413.0</td>\n",
       "      <td>Balboa Park BART Station</td>\n",
       "      <td>37.720600</td>\n",
       "      <td>-122.447700</td>\n",
       "      <td>344.0</td>\n",
       "      <td>16th St Depot</td>\n",
       "      <td>37.766300</td>\n",
       "      <td>-122.396300</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>2020-04</td>\n",
       "      <td>Thu</td>\n",
       "      <td>1894338</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>6.807787</td>\n",
       "      <td>0.012938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143282</th>\n",
       "      <td>2020-07-20 17:56:44</td>\n",
       "      <td>2020-08-08 12:27:42</td>\n",
       "      <td>307.0</td>\n",
       "      <td>SAP Center</td>\n",
       "      <td>37.332692</td>\n",
       "      <td>-121.900084</td>\n",
       "      <td>307.0</td>\n",
       "      <td>SAP Center</td>\n",
       "      <td>37.332692</td>\n",
       "      <td>-121.900084</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>2020-07</td>\n",
       "      <td>Mon</td>\n",
       "      <td>1621858</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143890</th>\n",
       "      <td>2020-07-13 07:14:25</td>\n",
       "      <td>2020-07-15 13:39:49</td>\n",
       "      <td>388.0</td>\n",
       "      <td>Backesto Park (Jackson St at 13th St)</td>\n",
       "      <td>37.352887</td>\n",
       "      <td>-121.886050</td>\n",
       "      <td>388.0</td>\n",
       "      <td>Backesto Park (Jackson St at 13th St)</td>\n",
       "      <td>37.352887</td>\n",
       "      <td>-121.886050</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2020-07</td>\n",
       "      <td>Mon</td>\n",
       "      <td>195924</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151523</th>\n",
       "      <td>2020-07-18 02:25:36</td>\n",
       "      <td>2020-07-19 03:25:26</td>\n",
       "      <td>291.0</td>\n",
       "      <td>Autumn Parkway at Coleman Ave</td>\n",
       "      <td>37.341334</td>\n",
       "      <td>-121.903182</td>\n",
       "      <td>291.0</td>\n",
       "      <td>Autumn Parkway at Coleman Ave</td>\n",
       "      <td>37.341335</td>\n",
       "      <td>-121.903183</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2020-07</td>\n",
       "      <td>Sat</td>\n",
       "      <td>89990</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>0.000119</td>\n",
       "      <td>0.000005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152804</th>\n",
       "      <td>2020-07-19 18:46:02</td>\n",
       "      <td>2020-07-20 19:45:53</td>\n",
       "      <td>301.0</td>\n",
       "      <td>Willow St at Vine St</td>\n",
       "      <td>37.318449</td>\n",
       "      <td>-121.883172</td>\n",
       "      <td>425.0</td>\n",
       "      <td>Bird Ave at Willow St</td>\n",
       "      <td>37.311284</td>\n",
       "      <td>-121.896325</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>18</td>\n",
       "      <td>2020-07</td>\n",
       "      <td>Sun</td>\n",
       "      <td>89991</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>1.407072</td>\n",
       "      <td>0.056288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153070</th>\n",
       "      <td>2020-07-08 02:11:51</td>\n",
       "      <td>2020-07-14 17:43:29</td>\n",
       "      <td>313.0</td>\n",
       "      <td>Almaden Blvd at San Fernando St</td>\n",
       "      <td>37.331415</td>\n",
       "      <td>-121.893200</td>\n",
       "      <td>329.0</td>\n",
       "      <td>San Jose Depot</td>\n",
       "      <td>37.344018</td>\n",
       "      <td>-121.915063</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2020-07</td>\n",
       "      <td>Wed</td>\n",
       "      <td>574298</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>2.383291</td>\n",
       "      <td>0.014940</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>465 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                started_at            ended_at  start_id  \\\n",
       "35862  2020-04-17 19:59:45 2020-04-20 20:21:58     521.0   \n",
       "36826  2020-04-15 07:31:01 2020-04-21 11:32:02     130.0   \n",
       "37511  2020-04-13 18:52:51 2020-05-14 21:13:51      14.0   \n",
       "37711  2020-04-01 18:44:19 2020-04-19 19:07:46      85.0   \n",
       "38407  2020-04-09 20:42:58 2020-05-01 18:55:16     413.0   \n",
       "...                    ...                 ...       ...   \n",
       "143282 2020-07-20 17:56:44 2020-08-08 12:27:42     307.0   \n",
       "143890 2020-07-13 07:14:25 2020-07-15 13:39:49     388.0   \n",
       "151523 2020-07-18 02:25:36 2020-07-19 03:25:26     291.0   \n",
       "152804 2020-07-19 18:46:02 2020-07-20 19:45:53     301.0   \n",
       "153070 2020-07-08 02:11:51 2020-07-14 17:43:29     313.0   \n",
       "\n",
       "                                   start_name  start_lat   start_lng  end_id  \\\n",
       "35862                 48th Ave at Cabrillo St  37.773000 -122.509100   490.0   \n",
       "36826                22nd St Caltrain Station  37.757700 -122.391900   130.0   \n",
       "37511                   Clay St at Battery St  37.795000 -122.400000   344.0   \n",
       "37711                 Church St at Duboce Ave  37.770100 -122.429200    50.0   \n",
       "38407                Balboa Park BART Station  37.720600 -122.447700   344.0   \n",
       "...                                       ...        ...         ...     ...   \n",
       "143282                             SAP Center  37.332692 -121.900084   307.0   \n",
       "143890  Backesto Park (Jackson St at 13th St)  37.352887 -121.886050   388.0   \n",
       "151523          Autumn Parkway at Coleman Ave  37.341334 -121.903182   291.0   \n",
       "152804                   Willow St at Vine St  37.318449 -121.883172   425.0   \n",
       "153070        Almaden Blvd at San Fernando St  37.331415 -121.893200   329.0   \n",
       "\n",
       "                                     end_name    end_lat     end_lng  ...  \\\n",
       "35862                   9th Ave at Geary Blvd  37.781800 -122.467600  ...   \n",
       "36826                22nd St Caltrain Station  37.757700 -122.391900  ...   \n",
       "37511                           16th St Depot  37.766300 -122.396300  ...   \n",
       "37711                   2nd St at Townsend St  37.780500 -122.390300  ...   \n",
       "38407                           16th St Depot  37.766300 -122.396300  ...   \n",
       "...                                       ...        ...         ...  ...   \n",
       "143282                             SAP Center  37.332692 -121.900084  ...   \n",
       "143890  Backesto Park (Jackson St at 13th St)  37.352887 -121.886050  ...   \n",
       "151523          Autumn Parkway at Coleman Ave  37.341335 -121.903183  ...   \n",
       "152804                  Bird Ave at Willow St  37.311284 -121.896325  ...   \n",
       "153070                         San Jose Depot  37.344018 -121.915063  ...   \n",
       "\n",
       "        start_year start_month start_dow start_hour start_yymm  dow duration  \\\n",
       "35862         2020           4         4         19    2020-04  Fri   260533   \n",
       "36826         2020           4         2          7    2020-04  Wed   532861   \n",
       "37511         2020           4         0         18    2020-04  Mon  2686860   \n",
       "37711         2020           4         2         18    2020-04  Wed  1556607   \n",
       "38407         2020           4         3         20    2020-04  Thu  1894338   \n",
       "...            ...         ...       ...        ...        ...  ...      ...   \n",
       "143282        2020           7         0         17    2020-07  Mon  1621858   \n",
       "143890        2020           7         0          7    2020-07  Mon   195924   \n",
       "151523        2020           7         5          2    2020-07  Sat    89990   \n",
       "152804        2020           7         6         18    2020-07  Sun    89991   \n",
       "153070        2020           7         2          2    2020-07  Wed   574298   \n",
       "\n",
       "           start_city  distance     speed  \n",
       "35862   San Francisco  3.788694  0.052352  \n",
       "36826   San Francisco  0.000000  0.000000  \n",
       "37511   San Francisco  3.206140  0.004296  \n",
       "37711   San Francisco  3.620419  0.008373  \n",
       "38407   San Francisco  6.807787  0.012938  \n",
       "...               ...       ...       ...  \n",
       "143282       San Jose  0.000000  0.000000  \n",
       "143890       San Jose  0.000000  0.000000  \n",
       "151523       San Jose  0.000119  0.000005  \n",
       "152804       San Jose  1.407072  0.056288  \n",
       "153070       San Jose  2.383291  0.014940  \n",
       "\n",
       "[465 rows x 27 columns]"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[bikes['duration'] > 86400]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "38.00615740740741"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes['duration'].max()/(24*60*60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_id</th>\n",
       "      <th>start_name</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_id</th>\n",
       "      <th>end_name</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>...</th>\n",
       "      <th>start_year</th>\n",
       "      <th>start_month</th>\n",
       "      <th>start_dow</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>start_yymm</th>\n",
       "      <th>dow</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_city</th>\n",
       "      <th>distance</th>\n",
       "      <th>speed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44993</th>\n",
       "      <td>2020-04-09 11:25:30</td>\n",
       "      <td>2020-05-17 11:34:22</td>\n",
       "      <td>386.0</td>\n",
       "      <td>24th St at Bartlett St</td>\n",
       "      <td>37.7521</td>\n",
       "      <td>-122.4197</td>\n",
       "      <td>86.0</td>\n",
       "      <td>Market St at Dolores St</td>\n",
       "      <td>37.7693</td>\n",
       "      <td>-122.4268</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>2020-04</td>\n",
       "      <td>Thu</td>\n",
       "      <td>3283732</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>2.011435</td>\n",
       "      <td>0.002205</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               started_at            ended_at  start_id  \\\n",
       "44993 2020-04-09 11:25:30 2020-05-17 11:34:22     386.0   \n",
       "\n",
       "                   start_name  start_lat  start_lng  end_id  \\\n",
       "44993  24th St at Bartlett St    37.7521  -122.4197    86.0   \n",
       "\n",
       "                      end_name  end_lat   end_lng  ...  start_year  \\\n",
       "44993  Market St at Dolores St  37.7693 -122.4268  ...        2020   \n",
       "\n",
       "      start_month start_dow start_hour start_yymm  dow duration  \\\n",
       "44993           4         3         11    2020-04  Thu  3283732   \n",
       "\n",
       "          start_city  distance     speed  \n",
       "44993  San Francisco  2.011435  0.002205  \n",
       "\n",
       "[1 rows x 27 columns]"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[bikes['duration'] == bikes['duration'].max()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ride_type</th>\n",
       "      <th>user_class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44993</th>\n",
       "      <td>Docked</td>\n",
       "      <td>Casual</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      ride_type user_class\n",
       "44993    Docked     Casual"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[bikes['duration'] == bikes['duration'].max()][['ride_type', 'user_class']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tip for people using Time Turners or TARDISes, please return to the correct date when returning a vehicle to prevent overcharges. Better yet, find a vehicle after the time jump, as calibration seems to be wonky at times, and one doesn't want to be charged for 38 days of usage for the bike. \n",
    "\n",
    "Given the current prices of \\\\$2 per usage, and \\\\$3 for every 15 minutes beyond the first 30 for casual users, that amounts to just under \\\\$11,000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10941.773333333334"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "((bikes['duration'].max()/60 - 30)/15)*3 + 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "284"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(24*4 - 2)*3 + 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Not sure who intended to rent a bike for longer than a day as for casual users that amounts to $284\n",
    "\n",
    "bikes = bikes[bikes['duration'] < 86400]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_id</th>\n",
       "      <th>start_name</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_id</th>\n",
       "      <th>end_name</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>...</th>\n",
       "      <th>start_year</th>\n",
       "      <th>start_month</th>\n",
       "      <th>start_dow</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>start_yymm</th>\n",
       "      <th>dow</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_city</th>\n",
       "      <th>distance</th>\n",
       "      <th>speed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>146094</th>\n",
       "      <td>2019-08-10 22:34:00</td>\n",
       "      <td>2019-08-10 22:37:24</td>\n",
       "      <td>446.0</td>\n",
       "      <td>Mint St at Mission St</td>\n",
       "      <td>37.782280</td>\n",
       "      <td>-122.407313</td>\n",
       "      <td>367.0</td>\n",
       "      <td>Outside Lands (Temporary Station)</td>\n",
       "      <td>37.771104</td>\n",
       "      <td>-122.473658</td>\n",
       "      <td>...</td>\n",
       "      <td>2019</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>22</td>\n",
       "      <td>2019-08</td>\n",
       "      <td>Sat</td>\n",
       "      <td>204</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>5.981976</td>\n",
       "      <td>105.564280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142906</th>\n",
       "      <td>2020-03-28 12:02:54</td>\n",
       "      <td>2020-03-28 12:04:35</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Powell St BART Station (Market St at 5th St)</td>\n",
       "      <td>37.783899</td>\n",
       "      <td>-122.408445</td>\n",
       "      <td>400.0</td>\n",
       "      <td>Buchanan St at North Point St</td>\n",
       "      <td>37.804272</td>\n",
       "      <td>-122.433537</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>2020-03</td>\n",
       "      <td>Sat</td>\n",
       "      <td>101</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>3.166046</td>\n",
       "      <td>112.849151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>225</th>\n",
       "      <td>2020-06-21 11:21:35</td>\n",
       "      <td>2020-06-21 11:21:41</td>\n",
       "      <td>53.0</td>\n",
       "      <td>Grove St at Divisadero</td>\n",
       "      <td>37.775965</td>\n",
       "      <td>-122.437724</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.780000</td>\n",
       "      <td>-122.440000</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>2020-06</td>\n",
       "      <td>Sun</td>\n",
       "      <td>6</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>0.491284</td>\n",
       "      <td>294.770165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>932</th>\n",
       "      <td>2020-06-01 08:47:39</td>\n",
       "      <td>2020-06-01 08:47:46</td>\n",
       "      <td>458.0</td>\n",
       "      <td>Frederick St at Arguello Blvd</td>\n",
       "      <td>37.765802</td>\n",
       "      <td>-122.457583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.770000</td>\n",
       "      <td>-122.460000</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-06</td>\n",
       "      <td>Mon</td>\n",
       "      <td>7</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>0.512983</td>\n",
       "      <td>263.819579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2075</th>\n",
       "      <td>2020-06-05 19:47:35</td>\n",
       "      <td>2020-06-05 19:47:48</td>\n",
       "      <td>106.0</td>\n",
       "      <td>Sanchez St at 17th St</td>\n",
       "      <td>37.763289</td>\n",
       "      <td>-122.430576</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.760000</td>\n",
       "      <td>-122.430000</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>19</td>\n",
       "      <td>2020-06</td>\n",
       "      <td>Fri</td>\n",
       "      <td>13</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>0.369025</td>\n",
       "      <td>102.191494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123931</th>\n",
       "      <td>2020-07-16 20:37:46</td>\n",
       "      <td>2020-07-16 20:37:55</td>\n",
       "      <td>298.0</td>\n",
       "      <td>Oak St at 1st St</td>\n",
       "      <td>37.322136</td>\n",
       "      <td>-121.881092</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.320000</td>\n",
       "      <td>-121.880000</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>2020-07</td>\n",
       "      <td>Thu</td>\n",
       "      <td>9</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>0.256179</td>\n",
       "      <td>102.471528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134269</th>\n",
       "      <td>2020-07-22 13:12:45</td>\n",
       "      <td>2020-07-22 13:12:46</td>\n",
       "      <td>305.0</td>\n",
       "      <td>Ryland Park</td>\n",
       "      <td>37.342770</td>\n",
       "      <td>-121.895681</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.340000</td>\n",
       "      <td>-121.900000</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>2020-07</td>\n",
       "      <td>Wed</td>\n",
       "      <td>1</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>0.489816</td>\n",
       "      <td>1763.338920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134892</th>\n",
       "      <td>2020-07-10 17:39:39</td>\n",
       "      <td>2020-07-10 17:39:43</td>\n",
       "      <td>296.0</td>\n",
       "      <td>5th St at Virginia St</td>\n",
       "      <td>37.325825</td>\n",
       "      <td>-121.877082</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.330000</td>\n",
       "      <td>-121.880000</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>17</td>\n",
       "      <td>2020-07</td>\n",
       "      <td>Fri</td>\n",
       "      <td>4</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>0.530611</td>\n",
       "      <td>477.550157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136708</th>\n",
       "      <td>2020-07-28 18:42:33</td>\n",
       "      <td>2020-07-28 18:42:35</td>\n",
       "      <td>403.0</td>\n",
       "      <td>10th St at Mission St</td>\n",
       "      <td>37.355337</td>\n",
       "      <td>-121.892075</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.360000</td>\n",
       "      <td>-121.890000</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>2020-07</td>\n",
       "      <td>Tue</td>\n",
       "      <td>2</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>0.549515</td>\n",
       "      <td>989.126139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150341</th>\n",
       "      <td>2020-07-21 12:31:05</td>\n",
       "      <td>2020-07-21 12:31:15</td>\n",
       "      <td>280.0</td>\n",
       "      <td>San Fernando St at 7th St</td>\n",
       "      <td>37.337091</td>\n",
       "      <td>-121.883318</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.340000</td>\n",
       "      <td>-121.880000</td>\n",
       "      <td>...</td>\n",
       "      <td>2020</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>2020-07</td>\n",
       "      <td>Tue</td>\n",
       "      <td>10</td>\n",
       "      <td>San Jose</td>\n",
       "      <td>0.436095</td>\n",
       "      <td>156.994040</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>295 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                started_at            ended_at  start_id  \\\n",
       "146094 2019-08-10 22:34:00 2019-08-10 22:37:24     446.0   \n",
       "142906 2020-03-28 12:02:54 2020-03-28 12:04:35       5.0   \n",
       "225    2020-06-21 11:21:35 2020-06-21 11:21:41      53.0   \n",
       "932    2020-06-01 08:47:39 2020-06-01 08:47:46     458.0   \n",
       "2075   2020-06-05 19:47:35 2020-06-05 19:47:48     106.0   \n",
       "...                    ...                 ...       ...   \n",
       "123931 2020-07-16 20:37:46 2020-07-16 20:37:55     298.0   \n",
       "134269 2020-07-22 13:12:45 2020-07-22 13:12:46     305.0   \n",
       "134892 2020-07-10 17:39:39 2020-07-10 17:39:43     296.0   \n",
       "136708 2020-07-28 18:42:33 2020-07-28 18:42:35     403.0   \n",
       "150341 2020-07-21 12:31:05 2020-07-21 12:31:15     280.0   \n",
       "\n",
       "                                          start_name  start_lat   start_lng  \\\n",
       "146094                         Mint St at Mission St  37.782280 -122.407313   \n",
       "142906  Powell St BART Station (Market St at 5th St)  37.783899 -122.408445   \n",
       "225                           Grove St at Divisadero  37.775965 -122.437724   \n",
       "932                    Frederick St at Arguello Blvd  37.765802 -122.457583   \n",
       "2075                           Sanchez St at 17th St  37.763289 -122.430576   \n",
       "...                                              ...        ...         ...   \n",
       "123931                              Oak St at 1st St  37.322136 -121.881092   \n",
       "134269                                   Ryland Park  37.342770 -121.895681   \n",
       "134892                         5th St at Virginia St  37.325825 -121.877082   \n",
       "136708                         10th St at Mission St  37.355337 -121.892075   \n",
       "150341                     San Fernando St at 7th St  37.337091 -121.883318   \n",
       "\n",
       "        end_id                           end_name    end_lat     end_lng  ...  \\\n",
       "146094   367.0  Outside Lands (Temporary Station)  37.771104 -122.473658  ...   \n",
       "142906   400.0      Buchanan St at North Point St  37.804272 -122.433537  ...   \n",
       "225        NaN                                NaN  37.780000 -122.440000  ...   \n",
       "932        NaN                                NaN  37.770000 -122.460000  ...   \n",
       "2075       NaN                                NaN  37.760000 -122.430000  ...   \n",
       "...        ...                                ...        ...         ...  ...   \n",
       "123931     NaN                                NaN  37.320000 -121.880000  ...   \n",
       "134269     NaN                                NaN  37.340000 -121.900000  ...   \n",
       "134892     NaN                                NaN  37.330000 -121.880000  ...   \n",
       "136708     NaN                                NaN  37.360000 -121.890000  ...   \n",
       "150341     NaN                                NaN  37.340000 -121.880000  ...   \n",
       "\n",
       "        start_year start_month start_dow start_hour start_yymm  dow duration  \\\n",
       "146094        2019           8         5         22    2019-08  Sat      204   \n",
       "142906        2020           3         5         12    2020-03  Sat      101   \n",
       "225           2020           6         6         11    2020-06  Sun        6   \n",
       "932           2020           6         0          8    2020-06  Mon        7   \n",
       "2075          2020           6         4         19    2020-06  Fri       13   \n",
       "...            ...         ...       ...        ...        ...  ...      ...   \n",
       "123931        2020           7         3         20    2020-07  Thu        9   \n",
       "134269        2020           7         2         13    2020-07  Wed        1   \n",
       "134892        2020           7         4         17    2020-07  Fri        4   \n",
       "136708        2020           7         1         18    2020-07  Tue        2   \n",
       "150341        2020           7         1         12    2020-07  Tue       10   \n",
       "\n",
       "           start_city  distance        speed  \n",
       "146094  San Francisco  5.981976   105.564280  \n",
       "142906  San Francisco  3.166046   112.849151  \n",
       "225     San Francisco  0.491284   294.770165  \n",
       "932     San Francisco  0.512983   263.819579  \n",
       "2075    San Francisco  0.369025   102.191494  \n",
       "...               ...       ...          ...  \n",
       "123931       San Jose  0.256179   102.471528  \n",
       "134269       San Jose  0.489816  1763.338920  \n",
       "134892       San Jose  0.530611   477.550157  \n",
       "136708       San Jose  0.549515   989.126139  \n",
       "150341       San Jose  0.436095   156.994040  \n",
       "\n",
       "[295 rows x 27 columns]"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[bikes['speed'] > 100]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Can one get a speeding ticket for riding a bike too fast?\n",
    "\n",
    "Even then, while travelling at such speeds, how do they catch you?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Not sure if you can rent these bikes for racing.\n",
    "# But for that one person in Oakland who travelled 5.7km in 23 seconds, they should enter the Tour de Bay Area\n",
    "\n",
    "bikes = bikes[bikes['speed'] < 100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_id</th>\n",
       "      <th>start_name</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_id</th>\n",
       "      <th>end_name</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>...</th>\n",
       "      <th>start_year</th>\n",
       "      <th>start_month</th>\n",
       "      <th>start_dow</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>start_yymm</th>\n",
       "      <th>dow</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_city</th>\n",
       "      <th>distance</th>\n",
       "      <th>speed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>226544</th>\n",
       "      <td>2019-07-24 09:29:16</td>\n",
       "      <td>2019-07-24 11:40:47</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.789527</td>\n",
       "      <td>-122.401979</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>36.739538</td>\n",
       "      <td>-121.469453</td>\n",
       "      <td>...</td>\n",
       "      <td>2019</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>2019-07</td>\n",
       "      <td>Wed</td>\n",
       "      <td>7891</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>142.761337</td>\n",
       "      <td>65.129998</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                started_at            ended_at  start_id start_name  \\\n",
       "226544 2019-07-24 09:29:16 2019-07-24 11:40:47       NaN        NaN   \n",
       "\n",
       "        start_lat   start_lng  end_id end_name    end_lat     end_lng  ...  \\\n",
       "226544  37.789527 -122.401979     NaN      NaN  36.739538 -121.469453  ...   \n",
       "\n",
       "        start_year start_month start_dow start_hour start_yymm  dow duration  \\\n",
       "226544        2019           7         2          9    2019-07  Wed     7891   \n",
       "\n",
       "           start_city    distance      speed  \n",
       "226544  San Francisco  142.761337  65.129998  \n",
       "\n",
       "[1 rows x 27 columns]"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[bikes['distance'] > 100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "226544    131.516667\n",
       "Name: duration, dtype: float64"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[bikes['distance'] == bikes['distance'].max()]['duration']/60"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To the person who was able to travel 142km in just over 2 hours, well done!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "bikes = bikes[bikes['distance'] < 100]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start_id</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_id</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>bike_id</th>\n",
       "      <th>start_year</th>\n",
       "      <th>start_month</th>\n",
       "      <th>start_dow</th>\n",
       "      <th>start_hour</th>\n",
       "      <th>duration</th>\n",
       "      <th>distance</th>\n",
       "      <th>speed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5.555037e+06</td>\n",
       "      <td>6.319450e+06</td>\n",
       "      <td>6.319450e+06</td>\n",
       "      <td>5.546182e+06</td>\n",
       "      <td>6.319450e+06</td>\n",
       "      <td>6.319450e+06</td>\n",
       "      <td>5.785916e+06</td>\n",
       "      <td>6.319450e+06</td>\n",
       "      <td>6.319450e+06</td>\n",
       "      <td>6.319450e+06</td>\n",
       "      <td>6.319450e+06</td>\n",
       "      <td>6.319450e+06</td>\n",
       "      <td>6.319450e+06</td>\n",
       "      <td>6.319450e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.397188e+02</td>\n",
       "      <td>3.776056e+01</td>\n",
       "      <td>-1.223524e+02</td>\n",
       "      <td>1.364872e+02</td>\n",
       "      <td>3.776069e+01</td>\n",
       "      <td>-1.223519e+02</td>\n",
       "      <td>6.614439e+04</td>\n",
       "      <td>2.018767e+03</td>\n",
       "      <td>6.128540e+00</td>\n",
       "      <td>2.690796e+00</td>\n",
       "      <td>1.360590e+01</td>\n",
       "      <td>8.822760e+02</td>\n",
       "      <td>1.705805e+00</td>\n",
       "      <td>9.546226e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.218699e+02</td>\n",
       "      <td>1.120140e-01</td>\n",
       "      <td>1.310544e-01</td>\n",
       "      <td>1.210521e+02</td>\n",
       "      <td>1.119445e-01</td>\n",
       "      <td>1.306030e-01</td>\n",
       "      <td>1.853858e+05</td>\n",
       "      <td>8.919780e-01</td>\n",
       "      <td>3.390801e+00</td>\n",
       "      <td>1.873703e+00</td>\n",
       "      <td>4.736343e+00</td>\n",
       "      <td>2.155018e+03</td>\n",
       "      <td>1.173500e+00</td>\n",
       "      <td>4.015147e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>3.723920e+01</td>\n",
       "      <td>-1.225143e+02</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>3.700460e+01</td>\n",
       "      <td>-1.225758e+02</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>2.017000e+03</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.200000e+01</td>\n",
       "      <td>3.776920e+01</td>\n",
       "      <td>-1.224159e+02</td>\n",
       "      <td>3.600000e+01</td>\n",
       "      <td>3.776922e+01</td>\n",
       "      <td>-1.224135e+02</td>\n",
       "      <td>1.634000e+03</td>\n",
       "      <td>2.018000e+03</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>9.000000e+00</td>\n",
       "      <td>3.640000e+02</td>\n",
       "      <td>8.903422e-01</td>\n",
       "      <td>7.493638e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>9.800000e+01</td>\n",
       "      <td>3.778015e+01</td>\n",
       "      <td>-1.223991e+02</td>\n",
       "      <td>9.500000e+01</td>\n",
       "      <td>3.778053e+01</td>\n",
       "      <td>-1.223989e+02</td>\n",
       "      <td>3.155000e+03</td>\n",
       "      <td>2.019000e+03</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>1.400000e+01</td>\n",
       "      <td>5.840000e+02</td>\n",
       "      <td>1.436649e+00</td>\n",
       "      <td>9.840164e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.230000e+02</td>\n",
       "      <td>3.779519e+01</td>\n",
       "      <td>-1.223881e+02</td>\n",
       "      <td>2.110000e+02</td>\n",
       "      <td>3.779539e+01</td>\n",
       "      <td>-1.223881e+02</td>\n",
       "      <td>9.584000e+03</td>\n",
       "      <td>2.019000e+03</td>\n",
       "      <td>9.000000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>1.700000e+01</td>\n",
       "      <td>9.260000e+02</td>\n",
       "      <td>2.250131e+00</td>\n",
       "      <td>1.206416e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.340000e+02</td>\n",
       "      <td>3.789530e+01</td>\n",
       "      <td>-1.217700e+02</td>\n",
       "      <td>5.340000e+02</td>\n",
       "      <td>3.799594e+01</td>\n",
       "      <td>-1.215606e+02</td>\n",
       "      <td>9.999600e+05</td>\n",
       "      <td>2.020000e+03</td>\n",
       "      <td>1.200000e+01</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>2.300000e+01</td>\n",
       "      <td>8.636900e+04</td>\n",
       "      <td>6.946269e+01</td>\n",
       "      <td>9.993110e+01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           start_id     start_lat     start_lng        end_id       end_lat  \\\n",
       "count  5.555037e+06  6.319450e+06  6.319450e+06  5.546182e+06  6.319450e+06   \n",
       "mean   1.397188e+02  3.776056e+01 -1.223524e+02  1.364872e+02  3.776069e+01   \n",
       "std    1.218699e+02  1.120140e-01  1.310544e-01  1.210521e+02  1.119445e-01   \n",
       "min    3.000000e+00  3.723920e+01 -1.225143e+02  3.000000e+00  3.700460e+01   \n",
       "25%    4.200000e+01  3.776920e+01 -1.224159e+02  3.600000e+01  3.776922e+01   \n",
       "50%    9.800000e+01  3.778015e+01 -1.223991e+02  9.500000e+01  3.778053e+01   \n",
       "75%    2.230000e+02  3.779519e+01 -1.223881e+02  2.110000e+02  3.779539e+01   \n",
       "max    5.340000e+02  3.789530e+01 -1.217700e+02  5.340000e+02  3.799594e+01   \n",
       "\n",
       "            end_lng       bike_id    start_year   start_month     start_dow  \\\n",
       "count  6.319450e+06  5.785916e+06  6.319450e+06  6.319450e+06  6.319450e+06   \n",
       "mean  -1.223519e+02  6.614439e+04  2.018767e+03  6.128540e+00  2.690796e+00   \n",
       "std    1.306030e-01  1.853858e+05  8.919780e-01  3.390801e+00  1.873703e+00   \n",
       "min   -1.225758e+02  4.000000e+00  2.017000e+03  1.000000e+00  0.000000e+00   \n",
       "25%   -1.224135e+02  1.634000e+03  2.018000e+03  3.000000e+00  1.000000e+00   \n",
       "50%   -1.223989e+02  3.155000e+03  2.019000e+03  6.000000e+00  3.000000e+00   \n",
       "75%   -1.223881e+02  9.584000e+03  2.019000e+03  9.000000e+00  4.000000e+00   \n",
       "max   -1.215606e+02  9.999600e+05  2.020000e+03  1.200000e+01  6.000000e+00   \n",
       "\n",
       "         start_hour      duration      distance         speed  \n",
       "count  6.319450e+06  6.319450e+06  6.319450e+06  6.319450e+06  \n",
       "mean   1.360590e+01  8.822760e+02  1.705805e+00  9.546226e+00  \n",
       "std    4.736343e+00  2.155018e+03  1.173500e+00  4.015147e+00  \n",
       "min    0.000000e+00  1.000000e+00  0.000000e+00  0.000000e+00  \n",
       "25%    9.000000e+00  3.640000e+02  8.903422e-01  7.493638e+00  \n",
       "50%    1.400000e+01  5.840000e+02  1.436649e+00  9.840164e+00  \n",
       "75%    1.700000e+01  9.260000e+02  2.250131e+00  1.206416e+01  \n",
       "max    2.300000e+01  8.636900e+04  6.946269e+01  9.993110e+01  "
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Order categorical values so they appear the same way"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ordering categorical types so they are presented the same way everytime\n",
    "user_type_class = ['Casual', 'Member']\n",
    "user_types = pd.api.types.CategoricalDtype(ordered = True, categories = user_type_class)\n",
    "bikes['user_type'] = bikes['user_type'].astype(user_types)\n",
    "\n",
    "user_class_class = ['Casual', 'Member', 'BSFA']\n",
    "user_classes = pd.api.types.CategoricalDtype(ordered = True, categories = user_class_class)\n",
    "bikes['user_class'] = bikes['user_class'].astype(user_classes)\n",
    "\n",
    "ride_type_class = ['Docked', 'Electric']\n",
    "ride_types = pd.api.types.CategoricalDtype(ordered = True, categories = ride_type_class)\n",
    "bikes['ride_type'] = bikes['ride_type'].astype(ride_types)\n",
    "\n",
    "city_type_class = ['San Francisco', 'Oakland', 'San Jose']\n",
    "city_types = pd.api.types.CategoricalDtype(ordered = True, categories = city_type_class)\n",
    "bikes['start_city'] = bikes['start_city'].astype(city_types)\n",
    "\n",
    "rental_type_class = ['App', 'Clipper']\n",
    "rental_types = pd.api.types.CategoricalDtype(ordered = True, categories = rental_type_class)\n",
    "bikes['rent_method'] = bikes['rent_method'].astype(rental_types)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6319450, 27)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Save to file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "bikes.to_csv('bikes.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What is/are the main feature(s) of interest in your dataset?\n",
    "\n",
    "I am most interested in finding patterns of bike usage, specifically how the different cities use the bikes differently. As well as what may look to be an interesting pattern\n",
    "\n",
    "\n",
    "### What features in the dataset do you think will help support your investigation into your feature(s) of interest?\n",
    "\n",
    "I expect that the time of day and day of week will play the largest role, but also the differences between the cities and the type of user that is riding the bike, though to a smaller degree. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Univariate Exploration\n",
    "\n",
    "I'll start by looking at the distribution of the main variable of interest: duration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(data = bikes, x = 'duration');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bin_edges = np.arange(0, 3600+60, 60)\n",
    "\n",
    "plt.hist(data = bikes, x = 'duration', bins=bin_edges);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bin_edges = np.arange(0, 1800+15, 15)\n",
    "\n",
    "plt.hist(data = bikes, x = 'duration', bins=bin_edges);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Long tail -> Log it\n",
    "\n",
    "log_binsize = 0.025\n",
    "bin_edges = 10 ** np.arange(1, np.log10(bikes['duration'].max())+log_binsize, log_binsize)\n",
    "\n",
    "plt.hist(data = bikes, x = 'duration', bins = bin_edges)\n",
    "plt.xscale('log')\n",
    "plt.xticks([60, 120, 300, 600, 1200, 1800, 3600, 7200], [1, 2, 5, 10, 20, 30, 60, 120])\n",
    "plt.xlabel('Duration (in minutes)')\n",
    "plt.xlim([45, 7200])\n",
    "\n",
    "plt.title('Duration of Trip distribution')\n",
    "\n",
    "plt.yticks([0, 5e4, 10e4, 15e4, 20e4, 25e4], [0, '50k', '100k', '150k', '200k', '250k']);\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Duration has a long tailed distribution, with many short trips, and very few extremely long ones. When plotted on a log-scale, the duration distribution resembles an even bell curve with the peak at about 8-10 minutes. \n",
    "\n",
    "Next up: distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(data = bikes, x = 'distance');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bin_edges = np.arange(0, 10+0.2, 0.2)\n",
    "\n",
    "plt.hist(data = bikes, x = 'distance', bins=bin_edges);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bin_edges = np.arange(0, 5+0.1, 0.1)\n",
    "\n",
    "plt.hist(data = bikes, x = 'distance', bins=bin_edges);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = [13,4])\n",
    "plt.suptitle('Distance Distribution', y = 1.01, fontsize = 16)\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "bin_edges = np.arange(0, 10+0.1, 0.1)\n",
    "\n",
    "plt.hist(data = bikes, x = 'distance', bins=bin_edges)\n",
    "plt.xticks(np.arange(0, 10+1, 1))\n",
    "plt.xlabel('Distance (in km)')\n",
    "plt.xlim([-0.5,10])\n",
    "\n",
    "plt.yticks([0, 5e4, 10e4, 15e4, 20e4, 25e4, 30e4, 35e4], [0, '50k', '100k', '150k', '200k', '250k', '300k', '350k'])\n",
    "plt.title('No Scaling')\n",
    "\n",
    "\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "log_binsize = 0.025\n",
    "bin_edges = 10 ** np.arange(-1, np.log10(bikes['distance'].max())+log_binsize, log_binsize)\n",
    "\n",
    "plt.hist(data = bikes, x = 'distance', bins = bin_edges)\n",
    "plt.xscale('log')\n",
    "plt.xticks([0.1, 0.2, 0.5, 1, 2, 5, 10], [0.1, 0.2, 0.1, 1, 2, 5, 10])\n",
    "plt.xlabel('Distance (in km)')\n",
    "plt.xlim([0.08, 10])\n",
    "plt.ylim([0, 250000])\n",
    "plt.yticks([0, 5e4, 10e4, 15e4, 20e4, 25e4, 30e4, 35e4], [0, '50k', '100k', '150k', '200k', '250k', '300k', '350k'])\n",
    "plt.title('Log Scaled');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.029790567217083765"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[bikes['distance'] == 0]['distance'].count()/bikes['distance'].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Distance has a long tailed distribution, with most of the trips being fairly short with some extremely long ones. When taking the distribution to a log scale, it normalizes with a peak at around 1.5. What gets missed on the log scale are the trips that have a value of 0. The trip started and ended at the same location, almost 3% of all trips end where they begin. \n",
    "\n",
    "Next up: Speed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(data = bikes, x = 'speed');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bin_edges = np.arange(0, 24, 0.2)\n",
    "    \n",
    "plt.hist(data = bikes, x = 'speed', bins=bin_edges)\n",
    "\n",
    "plt.xlim([-1, 22])\n",
    "plt.xticks(np.arange(0, 25, 5))\n",
    "plt.xlabel('Ave. Speed (in kph)')\n",
    "\n",
    "\n",
    "plt.yticks(np.arange(0, 30e4, 5e4), ['0', '50k', '100k', '150k', '200k', '250k'])\n",
    "\n",
    "plt.title('Speed Distribution')\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.029790567217083765"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[bikes['speed'] == 0]['speed'].count()/bikes.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Speed has a relatively normal distribution, two differences are the fat left tail as well as the 3% of rides who have a trip with 0 speed. Similar to the distance, these are users that start and end their trip at the same location, and therefore have a net distance of 0, and an equal speed. \n",
    "\n",
    "Next up: User Ridership"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "usercolours = sb.color_palette('Paired')[1:2] + sb.color_palette('Paired')[3:4] + sb.color_palette('Paired')[5:6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.countplot(data = bikes, x = 'user_class', palette=usercolours)\n",
    "\n",
    "plt.title('User Ridership')\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 6e6, 1e6), ['0', '1m', '2m', '3m', '4m', '5m'])\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Between the three user groups, Members are by far the most popular at over 4 million trips while Casuals have 1.3 and BSFA accounts for less than 400k trips each.\n",
    "\n",
    "Next up: Ride Types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "City colours are based off of respective sports teams.\n",
    "\n",
    "San Francisco = Golden State Warriors\n",
    "\n",
    "Oakland = Oakland A's\n",
    "\n",
    "San Jose = San Jose Sharks\n",
    "\n",
    "Initial colours used were from San Francisco 49ers, Oakland Raiders, and San Jose Sharks respectively. However, with the Raiders moving to Las Vegas, and the 49ers located closer to San Jose, it didn't make sense to continue with those colours.\n",
    "\n",
    "The only other team in a major sports conference being the A's, I had to use the green from the A's as the yellow wasn't a good look against a white background. \n",
    "\n",
    "Initially, the green from San Jose was used, but since Oakland's colour is also green, I had to opt for a different colour. The orange worked.\n",
    "\n",
    "Lastly, after some research, while the team is incorporated as the \"San Francisco 49ers\", their current stadium of Levi's Stadium is located in Santa Clara, a city much closer to San Jose, and even included in San Jose's metropolitan area. It didn't didn't seem right to use the 49ers after that information. The other sports teams to choose from were the San Francisco Giants and the Golden State Warriors. The Giants have black and orange being their main colours. With black not being a representative colour, and orange already taken by San Jose, it only made sense to use Golden State's blue. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "citycolours = [(0.113725490196078, 0.258823529411765, 0.541176470588235),\n",
    "              (0.0196078431372549, 0.219607843137255, 0.192156862745098),\n",
    "              (0.917647058823529, 0.447058823529412, 0)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.countplot(data = bikes, x = 'start_city', palette=citycolours)\n",
    "\n",
    "plt.title('City Ridership')\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 6e6, 1e6), ['0', '1m', '2m', '3m', '4m', '5m'])\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7590192184446432"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes['start_city'].value_counts().values[0]/bikes['start_city'].value_counts().values.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.17929614127811755"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes['start_city'].value_counts().values[1]/bikes['start_city'].value_counts().values.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.061684640277239314"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes['start_city'].value_counts().values[2]/bikes['start_city'].value_counts().values.sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Between the three cities, San Francisco has many more rides, accounting for about 75% of all of BayWheel's rides while Oakland accounts for 18%. \n",
    "\n",
    "Next up: User Share"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.countplot(data = bikes, x = 'user_type', palette=usercolours)\n",
    "\n",
    "plt.title('City Ridership')\n",
    "\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 6e6, 1e6), ['0', '1m', '2m', '3m', '4m', '5m'])\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Most of Bay Wheel's rides come from its members, their loyal base accounts for more than 77% of all of BayWheel's rides.\n",
    "\n",
    "Next up: User Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7543194423565341"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes['user_type'].value_counts().values[0]/bikes['user_type'].value_counts().values.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.countplot(data = bikes, x = 'user_class', palette=usercolours)\n",
    "\n",
    "plt.title('City Ridership')\n",
    "\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 6e6, 1e6), ['0', '1m', '2m', '3m', '4m', '5m'])\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When Breaking up member and putting BSFA into its own category, Members still make up more than 70%, with BSFA only accounting for 6% of rides, still a quarter of Casual users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6991570468949039"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes['user_class'].value_counts().values[0]/bikes['user_class'].value_counts().values.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2456805576434658"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes['user_class'].value_counts().values[1]/bikes['user_class'].value_counts().values.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.05516239546163036"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes['user_class'].value_counts().values[2]/bikes['user_class'].value_counts().values.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "ridecolours = [(0, 0.43921568627451, 0.8), \n",
    "              (0.92156862745098, 0.0392156862745098, 0.549019607843137)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.countplot(data = bikes, x = 'ride_type', palette=ridecolours)\n",
    "\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 7e6, 1e6), ['0', '1m', '2m', '3m', '4m', '5m', '6m'])\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, electric bikes have not been available throughout Bay Wheel's entire history. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "electric_era = bikes[bikes['started_at'] > dt.datetime(2019, 12, 1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.countplot(data = electric_era, x = 'ride_type', palette=ridecolours)\n",
    "\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 12e5, 2e5), ['0', '200k', '400k', '600k', '800k', '1.0m'])\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Part of this dat is misleading as from November to March, BayWheels allowed members to use electric bikes at no additional cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "paid_electric = bikes[bikes['started_at'] > dt.datetime(2020, 4, 1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.countplot(data = paid_electric, x = 'ride_type', palette=ridecolours)\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 5e5, 1e5), ['0', '100k', '200k', '300k', '400k'])\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Even when members get the extra charge when using Electric bikes, there does seem to be a preference to those electric bikes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = [16,4])\n",
    "plt.suptitle('Ride Types', y = 1.01, fontsize = 16)\n",
    "\n",
    "plt.subplot(1,3,1)\n",
    "sb.countplot(data = bikes, x = 'ride_type', palette=ridecolours)\n",
    "plt.title('Historical')\n",
    "\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 7e6, 1e6), ['0', '1m', '2m', '3m', '4m', '5m', '6m'])\n",
    "plt.ylabel('')\n",
    "\n",
    "\n",
    "\n",
    "plt.subplot(1,3,2)\n",
    "sb.countplot(data = electric_era, x = 'ride_type', palette=ridecolours)\n",
    "plt.title('Electric Age (Dec 2019 - Present)')\n",
    "\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 12e5, 2e5), ['0', '200k', '400k', '600k', '800k', '1.0m'])\n",
    "plt.ylabel('')\n",
    "\n",
    "\n",
    "plt.subplot(1,3,3)\n",
    "sb.countplot(data = paid_electric, x = 'ride_type', palette=ridecolours)\n",
    "plt.title('Paid Electric Age (Apr 2020 - Present)')\n",
    "\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 5e5, 1e5), ['0', '100k', '200k', '300k', '400k'])\n",
    "plt.ylabel('')\n",
    "\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "rentalcolours = [(0.333333333333333, 0.125490196078431, 0.517647058823529),\n",
    "                (0.788235294117647, 0.0274509803921569, 0.168627450980392)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.countplot(data = bikes, x = 'rent_method', palette=rentalcolours)\n",
    "\n",
    "plt.title('Rental Method')\n",
    "\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 10e5, 2e5), ['0', '200k', '400k', '600k', '800k'])\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This info is only available for 6 months, but users overwhelmingly perfer using the App to rent their bikes as opposed to using Clippers. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bin_edges = np.arange(0, 24+1, 1)\n",
    "\n",
    "plt.hist(data = bikes, x = 'start_hour', bins=bin_edges)\n",
    "\n",
    "plt.title('Hourly Ridership')\n",
    "\n",
    "plt.xlim([0,24])\n",
    "\n",
    "plt.ylim([0, 800000])\n",
    "plt.yticks([0, 200000, 400000, 600000, 800000], [0, '200k', '400k', '600k', '800k'])\n",
    "\n",
    "plt.xticks([0, 3, 6, 9, 12, 15, 18, 21, 24], ['Midnight', '3am', '6am', '9am', 'Noon', '3pm', '6pm', '9pm', 'Midnight']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the results being bimodal and peaks at 8-10am and 4-7pm, a sizeable portion of Bay Wheel's customer base are probably those who work office type hours. \n",
    "\n",
    "Next up: Ridership by day of week"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, '')"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.countplot(data = bikes, x = 'dow', color = sb.color_palette()[0])\n",
    "\n",
    "plt.title('Ridership by day of week')\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 125e4, 25e4), ['0', '250k', '500k', '750k', '1m'])\n",
    "plt.ylabel('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.02847014489094636"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(bikes.dow.value_counts()[4] - bikes.dow.value_counts()[0])/bikes.dow.value_counts()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6113877248616395"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1-(bikes.dow.value_counts()[:5].values.mean() - bikes.dow.value_counts()[5:].values.mean())/bikes.dow.value_counts()[:5].values.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When counting the trips on different days of the week, The weekdays have a maximum difference of about 2%, while the weekends have less than 60% the number of trips compared to their weekday counterparts. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "yymm_edges = []\n",
    "\n",
    "years = [2017, 2018, 2019, 2020]\n",
    "\n",
    "for y in years:\n",
    "    for m in np.arange(1, 12+1, 1):\n",
    "        yymm_edges.append(dt.date(y, m, 1))\n",
    "\n",
    "yymm_edges = yymm_edges[6:-4]\n",
    "\n",
    "yymm_ticks = []\n",
    "\n",
    "for i in np.arange(0,round(len(yymm_edges)/ 6)+1,1):\n",
    "    yymm_ticks.append(yymm_edges[(i*6)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "start_date = dt.date(2017, 7, 1)\n",
    "end_date = dt.date(2020, 7, 1)\n",
    "\n",
    "plt.hist(data = bikes, x = 'started_at', bins=mpl.dates.date2num(yymm_edges), color = sb.color_palette()[0])\n",
    "plt.title('Monthly Ridership')\n",
    "\n",
    "plt.xticks(mpl.dates.date2num(yymm_ticks), rotation = 45)\n",
    "plt.xlim([mpl.dates.date2num(start_date), mpl.dates.date2num(end_date)])\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks([0, 1e5, 2e5, 3e5, 4e5, 5e5], ['0', '100k', '200k' ,'300k', '400k', '500k'])\n",
    "plt.ylim([0, 5e5])\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While there are fluctuations, Bay Wheels' ridership has been on a growing trend until January and February 2020 where ridership hit record highs. January eclipsed their highest of any previous month by 16%, while February exploded seeing another 40%+ increase in ridership before dropping down to almost record lows. April 2020 saw the lowest ridership since their second month of inception almost 3 years ago. May's ridership saw an improvement to April, but still lower than March's figures.\n",
    "\n",
    "Next up: What happened in March?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "y2020_dates = []\n",
    "holding = []\n",
    "\n",
    "latest_month = 7\n",
    "\n",
    "\n",
    "y2020_months = np.arange(1,latest_month+1,1)\n",
    "y2020_days = np.arange(1, 31+1, 1)\n",
    "\n",
    "for i in y2020_months:\n",
    "    for j in y2020_days:\n",
    "        holding.append([2020,i,j])\n",
    "\n",
    "# Removes days from months that hold fewer than 31 days\n",
    "holding = holding[:60] + holding[62:] # chops off feb 30 and 31\n",
    "holding = holding[:121] + holding[122:] # chops april 31\n",
    "holding = holding[:182] + holding[183:] # chops off june 31\n",
    "holding = holding[:274] + holding[275:] # chops off sept 31\n",
    "holding = holding[:335] + holding[336:] # chops off nov 31\n",
    "\n",
    "\n",
    "for k in holding:\n",
    "    y2020_dates.append(dt.date(2020,k[1], k[2]))\n",
    "\n",
    "if latest_month < 12:\n",
    "    y2020_dates.append(dt.date(2020,latest_month+1,1))\n",
    "else:\n",
    "    y2020_dates.append(dt.date(2021, 1, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "weekly_ticks = []\n",
    "\n",
    "for i in np.arange(0,round(len(y2020_dates)/7),1):\n",
    "    weekly_ticks.append(y2020_dates[i*7])    \n",
    "    \n",
    "biweekly_ticks = []\n",
    "\n",
    "for j in np.arange(0,round(len(y2020_dates)/14)+1,1):\n",
    "    biweekly_ticks.append(y2020_dates[j*14])\n",
    "    \n",
    "monthly_ticks = []\n",
    "\n",
    "for k in np.arange(1, 8+1, 1):\n",
    "    monthly_ticks.append(dt.date(2020, k, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=[7,4])\n",
    "fig.suptitle('2020 Daily Ridership', y=1.01, fontsize = 14)\n",
    "\n",
    "ax = plt.subplot(1,1,1)\n",
    "start_date1 = dt.date(2020, 1, 1)\n",
    "end_date1 = dt.date(2020, 8, 1)\n",
    "\n",
    "plt.hist(data = bikes, x = 'start_date', bins=mpl.dates.date2num(y2020_dates))\n",
    "plt.yticks([0,5000, 10000, 15000, 20000], ['0k','5k', '10k', '15k', '20k'])\n",
    "plt.xticks(mpl.dates.date2num(monthly_ticks), ['Jan 1', 'Feb 1', 'Mar 1', 'Apr 1', 'May 1', 'Jun 1', 'Jul 1', 'Aug 1'])\n",
    "plt.xlim([mpl.dates.date2num(start_date1), mpl.dates.date2num(end_date1)])\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.19763486073082473"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes['start_yymm'].value_counts().loc['2020-04'] / bikes['start_yymm'].value_counts().loc['2020-02']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If it wasn't clear before, 2020 has been some rollercoaster for ridership for Bay Wheels. Starting off incredibly well, from the 42 days between, January 22 and March 4, Bay Wheels had their top 30 of their highest ridership days in this stretch of time. Only afterwards, to have ridership completely tank. When comparing February and April, April has less than a fifth the ridership. There is some rebound by the end of April which continues but looking at June and July, it seems to have plateaued off. Weekday figures are around 5k while weekends average about 6k. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>start_yymm</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-06</th>\n",
       "      <td>2689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-07</th>\n",
       "      <td>44073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08</th>\n",
       "      <td>83292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-04</th>\n",
       "      <td>83946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12</th>\n",
       "      <td>86539</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            duration\n",
       "start_yymm          \n",
       "2017-06         2689\n",
       "2017-07        44073\n",
       "2017-08        83292\n",
       "2020-04        83946\n",
       "2017-12        86539"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes[['start_yymm', 'duration']].groupby(['start_yymm']).count().sort_values(by='duration').head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "top30 = bikes[['start_date', 'duration']].groupby(['start_date']).count().sort_values(by='duration', ascending=False).head(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.date(2020, 1, 22)"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top30.index.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.date(2020, 3, 4)"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top30.index.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The drop steems to have started at Feb 29/Mar 1, and within two weeks dropped from a high of 17,000 trips a day to around of 2,000 less than two weeks later. This drop is no doubt due to the current ongoing Coronavirus outbreak. With a sizeable percentage of the population having to stay at home for most of the day, it makes sense that many people would not be going out and using bikes. \n",
    "\n",
    "The lowest single day ridership was just under 1,200 trips a day, in the early parts of April. The stretch between March 14 (Pi Day) to April 24, saw every single day under 5,000 trips. The last time that happened was in the early parts of 2018. Apirl's figures are the lowest Bay Wheels has had in a single month outside of the first three months of the company. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=[16,4])\n",
    "fig.suptitle('Zoom and Enhance', y=1.01, fontsize = 14)\n",
    "\n",
    "\n",
    "ax = plt.subplot(1,4,1)\n",
    "start_date2 = dt.date(2020, 2, 19)\n",
    "end_date2 = dt.date(2020, 3, 18)\n",
    "\n",
    "plt.hist(data = bikes, x = 'start_date', bins=mpl.dates.date2num(y2020_dates))\n",
    "plt.yticks([0,5000, 10000, 15000, 20000], ['0k','5k', '10k', '15k', '20k'])\n",
    "plt.xticks(mpl.dates.date2num(weekly_ticks), rotation = 45)\n",
    "plt.xlim([mpl.dates.date2num(start_date2), mpl.dates.date2num(end_date2)])\n",
    "plt.title('Drop')\n",
    "\n",
    "\n",
    "ax = plt.subplot(1,4,2)\n",
    "start_date3 = dt.date(2020, 3, 25)\n",
    "end_date3 = dt.date(2020, 4, 22)\n",
    "\n",
    "plt.hist(data = bikes, x = 'start_date', bins=mpl.dates.date2num(y2020_dates))\n",
    "plt.yticks([0,5000, 10000, 15000, 20000], ['0k','5k', '10k', '15k', '20k'])\n",
    "plt.xticks(mpl.dates.date2num(weekly_ticks), rotation = 45)\n",
    "plt.xlim([mpl.dates.date2num(start_date3), mpl.dates.date2num(end_date3)])\n",
    "plt.title('Trough')\n",
    "\n",
    "\n",
    "ax = plt.subplot(1,4,3)\n",
    "start_date4 = dt.date(2020, 5, 6)\n",
    "end_date4 = dt.date(2020, 6, 3)\n",
    "\n",
    "plt.hist(data = bikes, x = 'start_date', bins=mpl.dates.date2num(y2020_dates))\n",
    "plt.yticks([0,5000, 10000, 15000, 20000], ['0k','5k', '10k', '15k', '20k'])\n",
    "plt.xticks(mpl.dates.date2num(weekly_ticks), rotation = 45)\n",
    "plt.xlim([mpl.dates.date2num(start_date4), mpl.dates.date2num(end_date4)])\n",
    "plt.title('Slowly improving');\n",
    "\n",
    "\n",
    "ax = plt.subplot(1,4,4)\n",
    "start_date5 = dt.date(2020, 7, 1)\n",
    "end_date5 = dt.date(2020, 8, 1)\n",
    "\n",
    "plt.hist(data = bikes, x = 'start_date', bins=mpl.dates.date2num(y2020_dates))\n",
    "plt.yticks([0,5000, 10000, 15000, 20000], ['0k','5k', '10k', '15k', '20k'])\n",
    "plt.xticks(mpl.dates.date2num(weekly_ticks), rotation = 45)\n",
    "plt.xlim([mpl.dates.date2num(start_date5), mpl.dates.date2num(end_date5)])\n",
    "plt.title('Plateau')\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That last graph is more accurate now. While May did better than April, the total ridership is still less than half that of January, and a third that of February. However, given the current constraints, it seems reasonable, and it isn't something that Bay Wheels can do much to fix. \n",
    "\n",
    "Next up: What Caused the rise in January and February?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "bike_types = bikes[['start_yymm', 'ride_type', 'duration']].groupby(['start_yymm', 'ride_type']).count().reset_index()\n",
    "\n",
    "bike_types.rename(columns={'duration': 'count'}, inplace=True)\n",
    "\n",
    "electric_era_types = bike_types[-12:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start_yymm</th>\n",
       "      <th>ride_type</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>2020-02</td>\n",
       "      <td>Docked</td>\n",
       "      <td>114496.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>2020-02</td>\n",
       "      <td>Electric</td>\n",
       "      <td>310257.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>2020-03</td>\n",
       "      <td>Docked</td>\n",
       "      <td>62527.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2020-03</td>\n",
       "      <td>Electric</td>\n",
       "      <td>112531.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>2020-04</td>\n",
       "      <td>Docked</td>\n",
       "      <td>26256.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>2020-04</td>\n",
       "      <td>Electric</td>\n",
       "      <td>57690.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>2020-05</td>\n",
       "      <td>Docked</td>\n",
       "      <td>43441.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>2020-05</td>\n",
       "      <td>Electric</td>\n",
       "      <td>94215.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>2020-06</td>\n",
       "      <td>Docked</td>\n",
       "      <td>48521.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>2020-06</td>\n",
       "      <td>Electric</td>\n",
       "      <td>108993.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>2020-07</td>\n",
       "      <td>Docked</td>\n",
       "      <td>48526.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>2020-07</td>\n",
       "      <td>Electric</td>\n",
       "      <td>105892.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   start_yymm ride_type     count\n",
       "64    2020-02    Docked  114496.0\n",
       "65    2020-02  Electric  310257.0\n",
       "66    2020-03    Docked   62527.0\n",
       "67    2020-03  Electric  112531.0\n",
       "68    2020-04    Docked   26256.0\n",
       "69    2020-04  Electric   57690.0\n",
       "70    2020-05    Docked   43441.0\n",
       "71    2020-05  Electric   94215.0\n",
       "72    2020-06    Docked   48521.0\n",
       "73    2020-06  Electric  108993.0\n",
       "74    2020-07    Docked   48526.0\n",
       "75    2020-07  Electric  105892.0"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "electric_era_types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = [13,4], facecolor = 'white')\n",
    "\n",
    "ax = plt.subplot(1,2,1)\n",
    "sb.pointplot(data = bike_types, x = 'start_yymm', y = 'count', hue = 'ride_type', palette=ridecolours)\n",
    "plt.title('Trips by Bike Type')\n",
    "\n",
    "plt.xticks(np.arange(1,38, 6), yymm_ticks, rotation = 45)\n",
    "plt.xlim([-0.75, 38.75])\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 40e4, 5e4), [0, '50k', '100k', '150k', '200k', '250k', '300k', '350k'])\n",
    "plt.ylim([0, 35e4])\n",
    "plt.ylabel('')\n",
    "\n",
    "l = ax.get_legend().remove()\n",
    "\n",
    "\n",
    "\n",
    "ax = plt.subplot(1,2,2)\n",
    "sb.pointplot(data = electric_era_types, x = 'start_yymm', y = 'count', hue = 'ride_type', palette=ridecolours)\n",
    "plt.title('Trips by Bike Type in the Electric Era')\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 40e4, 5e4), [0, '50k', '100k', '150k', '200k', '250k', '300k', '350k'])\n",
    "plt.ylim([0, 35e4])\n",
    "plt.ylabel('')\n",
    "\n",
    "\n",
    "\n",
    "l = ax.legend(bbox_to_anchor=(1, 1))\n",
    "l.get_texts()[0].set_text('Docked')\n",
    "l.get_texts()[1].set_text('Electric')\n",
    "\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As mentioned previously, BayWheels provided electric bikes to Members at no additional costs, and there is a dramatic increase in the usage of electric bikes in this period. Ridership for docked bikes on the other hand remained steady. \n",
    "\n",
    "Next up: Hourly Ridership before and during corona"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "y2020 = bikes[bikes['start_year'] == 2020]\n",
    "nocorona = y2020[y2020['start_yymm'] <= '2020-02']\n",
    "corona = y2020[y2020['start_yymm'] > '2020-02']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 936x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=[13,4])\n",
    "fig.suptitle('Hourly Ridership Quarantine Difference', y=1.01, fontsize = 14)\n",
    "\n",
    "\n",
    "bin_edges = np.arange(0, 24+1, 1)\n",
    "\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.hist(data = nocorona, x = 'start_hour', bins=bin_edges)\n",
    "plt.title('Before Corona')\n",
    "\n",
    "plt.xlim([0,24])\n",
    "plt.xticks([0, 3, 6, 9, 12, 15, 18, 21, 24], ['Midnight', '3am', '6am', '9am', 'Noon', '3pm', '6pm', '9pm', 'Midnight']);\n",
    "\n",
    "plt.ylim([0, 1e5])\n",
    "plt.yticks(np.arange(0,12e4,2e4))\n",
    "\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.hist(data = corona, x = 'start_hour', bins=bin_edges)\n",
    "plt.title('During Corona')\n",
    "\n",
    "plt.xlim([0,24])\n",
    "plt.xticks([0, 3, 6, 9, 12, 15, 18, 21, 24], ['Midnight', '3am', '6am', '9am', 'Noon', '3pm', '6pm', '9pm', 'Midnight']);\n",
    "\n",
    "plt.ylim([0,8e4])\n",
    "plt.yticks(np.arange(0,12e4,2e4))\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.55"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona['start_date'].nunique()/nocorona['start_date'].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the ongoing lockdown, people seem much less reluctant to go out earlier in the day. However, these figures are totalled and don't prorate for the figure on the right accounting for 50% more days than the figure on the left"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=[13,4])\n",
    "fig.suptitle('Average Daily Hourly Ridership', y=1.01, fontsize = 14)\n",
    "\n",
    "\n",
    "bin_edges = np.arange(0, 24+1, 1)\n",
    "\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.hist(data = nocorona, x = 'start_hour', bins=bin_edges)\n",
    "plt.title('Before Quarantine')\n",
    "\n",
    "plt.xlim([0,24])\n",
    "plt.xticks([0, 3, 6, 9, 12, 15, 18, 21, 24], ['Midnight', '3am', '6am', '9am', 'Noon', '3pm', '6pm', '9pm', 'Midnight']);\n",
    "\n",
    "plt.ylim([0, 72e3])\n",
    "plt.yticks(np.arange(0,1800,300)*nocorona['start_date'].nunique(), np.arange(0,1800,300))\n",
    "\n",
    "plt.axhline(470*nocorona['start_date'].nunique())\n",
    "\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.hist(data = corona, x = 'start_hour', bins=bin_edges)\n",
    "plt.title('During Quarantine')\n",
    "\n",
    "plt.xlim([0,24])\n",
    "plt.xticks([0, 3, 6, 9, 12, 15, 18, 21, 24], ['Midnight', '3am', '6am', '9am', 'Noon', '3pm', '6pm', '9pm', 'Midnight']);\n",
    "\n",
    "plt.ylim([0,138000])\n",
    "plt.yticks(np.arange(0,1800,300)*corona['start_date'].nunique(), np.arange(0,1800,300))\n",
    "\n",
    "plt.axhline(470*corona['start_date'].nunique())\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After adjusting by the number of days in each of the segments, even the peaks during quarantine are only busier than the hours from 9pm to 7am before quarantine. \n",
    "\n",
    "Next up: Ride Behaviour from different users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=[18,4])\n",
    "fig.suptitle('User Types', fontsize = 16, y = 1.05)\n",
    "\n",
    "\n",
    "ax = plt.subplot(1,3,1)\n",
    "sb.boxplot(data = bikes, x = 'dow', y = 'distance', hue = 'user_class', showfliers = False, palette=usercolours)\n",
    "plt.title('Distance (km)')\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.ylabel('')\n",
    "plt.ylim([0, 6])\n",
    "plt.yticks([0, 1, 2, 3, 4, 5, 6])\n",
    "\n",
    "l = ax.get_legend().remove()\n",
    "\n",
    "\n",
    "\n",
    "ax = plt.subplot(1,3,2)\n",
    "sb.boxplot(data = bikes, x = 'dow', y = 'duration', hue = 'user_class', showfliers = False, palette=usercolours)\n",
    "plt.title('Duration (minutes)')\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.ylabel('')\n",
    "plt.ylim([0, 3600])\n",
    "plt.yticks(np.arange(0,3600+600,600), np.arange(0,60+10,10))\n",
    "\n",
    "l = ax.get_legend().remove()\n",
    "\n",
    "\n",
    "\n",
    "ax = plt.subplot(1,3,3)\n",
    "sb.boxplot(data = bikes, x = 'dow', y = 'speed', hue = 'user_class', showfliers = False, palette=usercolours)\n",
    "plt.title('Ave. Speed (km/hr)')\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.ylabel('')\n",
    "plt.ylim([0, 25])\n",
    "plt.yticks([0, 5, 10, 15, 20, 25])\n",
    "\n",
    "l = ax.legend(bbox_to_anchor=(1, 1))\n",
    "\n",
    "\n",
    "l.get_texts()[0].set_text('Casual')\n",
    "l.get_texts()[1].set_text('Member')\n",
    "l.get_texts()[2].set_text('BSFA')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Casual users, like their name suggests, tend to be more casual. While their trips tend to go slightly farther than the other to user types, the additional time spent on the bike results in the lowest average speed of the three. The days of the week also tend to change the behaviour of casual users the most. While Members and BSFA users don't seem to alter their behaviours from weekdays to weekends, the same can't be said for Casual users. The time spent on weekends for Casual users is noticably longer than that during the weekdays, resulting in a noticably lower average speed. \n",
    "\n",
    "Next up: Is there an incentive for different users to use the bikes differently?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:20: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "minutes = np.arange(0,120+1,1)\n",
    "pricing = pd.DataFrame(minutes)\n",
    "pricing.rename(columns={0: 'minutes'}, inplace=True)\n",
    "\n",
    "casual_dock = [2]*31 + [5]*15 + [8]*15 + [11]*15 + [14]*15 + [17]*15 + [20]*15\n",
    "pricing['casual_dock'] = casual_dock\n",
    "pricing['casual_extra'] = pricing['minutes'] * 0.20\n",
    "pricing['casual_electric'] = pricing['casual_dock'] + pricing['casual_extra']\n",
    "\n",
    "\n",
    "member_dock = [0]*46 + [3]*15 + [6]*15 + [9]*15 + [12]*15 + [15]*15\n",
    "pricing['member_dock'] = member_dock\n",
    "pricing['member_extra'] = pricing['minutes'] * 0.15\n",
    "pricing['member_electric'] = pricing['member_dock'] + pricing['member_extra']\n",
    "\n",
    "\n",
    "bsfa_dock = [0]*61 + [3]*15 + [6]*15 + [9]*15 + [12]*15\n",
    "pricing['bsfa_dock'] = bsfa_dock\n",
    "pricing['bsfa_extra'] = pricing['minutes'] * 0.05\n",
    "pricing['bsfa_extra'][21:] = 1\n",
    "pricing['bsfa_electric'] = pricing['bsfa_dock'] + pricing['bsfa_extra']\n",
    "\n",
    "\n",
    "pricing.drop(['casual_extra', 'member_extra', 'bsfa_extra'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "price_melt = pd.melt(pricing, id_vars='minutes', value_vars=list(pricing.columns[1:]))\n",
    "price_melt.rename(columns = {'variable': 'method', 'value': 'price'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "annual_pricing = {'method': ['Casual', 'Member', 'BSFA'],\n",
    "                 'price': [0, 149, 5]}\n",
    "\n",
    "annual = pd.DataFrame.from_dict(annual_pricing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "threetone = sb.color_palette('Paired')[1:2] + sb.color_palette('Paired')[3:4] + sb.color_palette('Paired')[5:6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = [16,4], facecolor = 'white')\n",
    "plt.suptitle('Bay Wheels Pricing', y=1.01, fontsize = 14)\n",
    "\n",
    "ax = plt.subplot(1,3,1)\n",
    "g = sb.lineplot(data = price_melt, x = 'minutes', y = 'price', hue = 'method', palette=sb.color_palette(\"Paired\")[0:6])\n",
    "plt.title('per minute (2 hours)')\n",
    "\n",
    "lg = g.axes.get_legend()\n",
    "labels = ['Rental Method', 'Casual Docked', 'Casual Electric', 'Member Docked', 'Member Electric', 'BSFA Docked', 'BSFA Electric']\n",
    "for t, l in zip(lg.texts, labels): t.set_text(l)\n",
    "    \n",
    "plt.xlim([0, 120])\n",
    "plt.xticks(np.arange(0, 120+20, 20))\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.ylim(0, 50)\n",
    "plt.yticks(np.arange(0, 50+10, 10), ['$0', '$10', '$20', '$30', '$40', '$50'])\n",
    "plt.ylabel('') \n",
    "\n",
    "\n",
    "ax = plt.subplot(1,3,2)\n",
    "g = sb.lineplot(data = price_melt, x = 'minutes', y = 'price', hue = 'method', palette=sb.color_palette(\"Paired\")[0:6])\n",
    "plt.title('per minute (2 hours)')\n",
    "\n",
    "lg = g.axes.get_legend()\n",
    "labels = ['Rental Method', 'Casual Docked', 'Casual Electric', 'Member Docked', 'Member Electric', 'BSFA Docked', 'BSFA Electric']\n",
    "for t, l in zip(lg.texts, labels): t.set_text(l)\n",
    "    \n",
    "plt.xlim([0, 60])\n",
    "plt.xticks(np.arange(0, 60+10, 10))\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.ylim(-1, 20)\n",
    "plt.yticks(np.arange(0, 20+5, 5), ['$0', '$5', '$10', '$15', '$20'])\n",
    "plt.ylabel('') \n",
    "\n",
    "ax = plt.subplot(1,3,3)\n",
    "sb.barplot(data = annual, x = 'method', y = 'price', palette = threetone)\n",
    "plt.title('Annual Membership')\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0,200+50,50), ['$0', '$50', '$100', '$150', '$200'])\n",
    "plt.ylim([0,200])\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bay Wheels' [pricing](https://www.lyft.com/bikes/bay-wheels/pricing) can be a bit complicated to get through. There are 3 different pricing categories for the 2 classes of bikes. Given the the quick rise in price, it is easy to justify having an annual membership. \n",
    "\n",
    "For an average 10 minute trip on a normal bike, the breakeven is after the 75th trip, or one trip every 5 days. For e-bikes, this lowers to after 60 trips, or one trip every 6 days. Considering this as a mode of transportation for someone looking to get to and from work 5 days a week, they would make around 500 trips a year (so long as they aren't working from home), at a 10 minuts each way, that would be \\\\$2,000 for Casuals, or \\\\$149 for Members. Easy to see why it has become popular. \n",
    "\n",
    "Another aspect is that the pricing is set up in such a way to get users off of the bikes as soon as possible. While some places give 'discounts' based on bulk, Bay Wheels gives a markup when wanting to stay on for longer. From a strictly cost perspective, it is more economical to switch bikes than to take the additional charge one incurs when staying on for longer than the base amount given, 30 minutes for Casuals, 45 for Members, and 60 for BSFA\n",
    "\n",
    "Next up: Hourly Ridership for each of the categories.\n",
    "\n",
    "<br>\n",
    "\n",
    "Note: BSFA is only available to qualifying residents of the Bay Area and is the obvious clear choice for those who qualify."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "hour_dow_user = bikes[['start_hour', 'dow', 'user_class', 'duration']].groupby(['start_hour', 'dow', 'user_class']).count()\n",
    "hour_dow_user.rename(columns = {'duration': 'count'}, inplace=True)\n",
    "hour_dow_user.reset_index(inplace=True)\n",
    "\n",
    "hour_dow_member = hour_dow_user[hour_dow_user['user_class'] == 'Member']\n",
    "hour_dow_casual = hour_dow_user[hour_dow_user['user_class'] == 'Casual']\n",
    "hour_dow_bsfa = hour_dow_user[hour_dow_user['user_class'] == 'BSFA']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[8,8])\n",
    "plt.suptitle('Hourly Ridership', fontsize = 16, y = 0.95)\n",
    "\n",
    "\n",
    "\n",
    "ax = plt.subplot(3,1,1)\n",
    "sb.lineplot(data = hour_dow_member, x = 'start_hour', y = 'count', hue = 'dow', palette='hls', lw=2)\n",
    "\n",
    "plt.title('Member')\n",
    "plt.xlabel('')\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.xlim([0,23])\n",
    "plt.xticks([0, 3, 6, 9, 12, 15, 18, 21], ['', '', '', '', '', ''])\n",
    "plt.yticks([0, 30000, 60000, 90000, 120000], ['0k', '30k', '60k', '90k', '120k'])\n",
    "\n",
    "l = ax.legend(bbox_to_anchor=(1, 1))\n",
    "l.get_texts()[0].set_text('Day of Week')\n",
    "\n",
    "\n",
    "\n",
    "ax = plt.subplot(3,1,2)\n",
    "sb.lineplot(data = hour_dow_casual, x = 'start_hour', y = 'count', hue = 'dow', palette='hls', lw=2)\n",
    "\n",
    "plt.title('Casual')\n",
    "plt.xlabel('')\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.xlim([0,23])\n",
    "plt.xticks([0, 3, 6, 9, 12, 15, 18, 21], ['', '', '', '', '', ''])\n",
    "plt.yticks([0, 5000, 10000, 15000, 20000, 25000], ['0k', '5k', '10k', '15k', '20k', '25k'])\n",
    "\n",
    "l = ax.get_legend().remove()\n",
    "\n",
    "\n",
    "\n",
    "ax = plt.subplot(3,1,3)\n",
    "sb.lineplot(data = hour_dow_bsfa, x = 'start_hour', y = 'count', hue = 'dow', palette='hls', lw=2)\n",
    "\n",
    "plt.title('BSFA')\n",
    "plt.xlabel('')\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.xlim([0,23])\n",
    "plt.xticks([0, 3, 6, 9, 12, 15, 18, 21], ['Midnight', '3am', '6am', '9am', 'Noon', '3pm', '6pm', '9pm',])\n",
    "plt.yticks([0, 2000, 4000, 6000], ['0k', '2k', '4k', '6k'])\n",
    "\n",
    "l = ax.get_legend().remove()\n",
    "\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While most of the lines have some overlapping making it slightly difficult to distinguish which lines are where, the weekdays and weekends seem to group themselves together. Using the peaks, it is it can probably be said that a large segment of BayWheel's customers are those working the Monday to Friday, 9-5 office job. Casual users have similar spikes while having a more active weekend userbase comparitively. With BSFA weekends move somewhat similarly to the other two, but there doesn't seem to be too much of a pattern on weekdays. There is a rise at 7-9 similar to Members and Casuals, but it plateaus until the evening instead of forming a mid-day trough. \n",
    "\n",
    "Next up: Hourly Ridership based on cities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "hour_dow_city = bikes[['start_hour', 'dow', 'start_city', 'duration']].groupby(['start_hour', 'dow', 'start_city']).count()\n",
    "hour_dow_city.rename(columns = {'duration': 'count'}, inplace=True)\n",
    "hour_dow_city.reset_index(inplace=True)\n",
    "\n",
    "hour_dow_oak = hour_dow_city[hour_dow_city['start_city'] == 'Oakland']\n",
    "hour_dow_fran = hour_dow_city[hour_dow_city['start_city'] == 'San Francisco']\n",
    "hour_dow_jose = hour_dow_city[hour_dow_city['start_city'] == 'San Jose']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x576 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[8,8])\n",
    "plt.suptitle('Hourly Ridership', fontsize = 16, y = 0.95)\n",
    "\n",
    "\n",
    "\n",
    "ax = plt.subplot(3,1,1)\n",
    "sb.lineplot(data = hour_dow_fran, x = 'start_hour', y = 'count', hue = 'dow', palette='hls', lw=2)\n",
    "\n",
    "plt.title('San Francisco')\n",
    "plt.xlabel('')\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.xlim([0,23])\n",
    "plt.xticks([0, 3, 6, 9, 12, 15, 18, 21], ['', '', '', '', '', ''])\n",
    "plt.yticks([0, 30000, 60000, 90000, 120000], ['0k', '30k', '60k', '90k', '120k'])\n",
    "\n",
    "l = ax.legend(bbox_to_anchor=(1, 1))\n",
    "l.get_texts()[0].set_text('Day of Week')\n",
    "\n",
    "\n",
    "\n",
    "ax = plt.subplot(3,1,2)\n",
    "sb.lineplot(data = hour_dow_oak, x = 'start_hour', y = 'count', hue = 'dow', palette='hls', lw=2)\n",
    "\n",
    "plt.title('Oakland')\n",
    "plt.xlabel('')\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.xlim([0,23])\n",
    "plt.xticks([0, 3, 6, 9, 12, 15, 18, 21], ['', '', '', '', '', ''])\n",
    "plt.yticks([0, 5000, 10000, 15000, 20000, 25000], ['0k', '5k', '10k', '15k', '20k', '25k'])\n",
    "\n",
    "l = ax.get_legend().remove()\n",
    "\n",
    "\n",
    "\n",
    "ax = plt.subplot(3,1,3)\n",
    "sb.lineplot(data = hour_dow_jose, x = 'start_hour', y = 'count', hue = 'dow', palette='hls', lw=2)\n",
    "\n",
    "plt.title('San Jose')\n",
    "plt.xlabel('')\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.xlim([0,23])\n",
    "plt.xticks([0, 3, 6, 9, 12, 15, 18, 21], ['Midnight', '3am', '6am', '9am', 'Noon', '3pm', '6pm', '9pm'])\n",
    "plt.yticks([0, 2000, 4000, 6000], ['0k', '2k', '4k', '6k'])\n",
    "\n",
    "l = ax.get_legend().remove()\n",
    "\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "San Francisco's hourly ridership looks nearly identical to that of Members (even with the same scaling), and with some scaling, so does Oakland's. Slight difference being that in the two city graphs, the mid-day weekend peak slightly exceeds that of the weekday's mid-day trough. This would be the comination of the Casual users as the mid-day peak is at the same level to their weekday peaks. \n",
    "\n",
    "Interestingly, San Jose's graph looks eerily similar to that of BSFA's graph, where there is a rise during weekdays at 7-9am, before plateauing off before another rise at the evening.  \n",
    "\n",
    "Next up: San Jose and BSFA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[8,6])\n",
    "plt.suptitle('Hourly Ridership', fontsize = 16, y = 0.95)\n",
    "\n",
    "\n",
    "\n",
    "ax = plt.subplot(2,1,1)\n",
    "sb.lineplot(data = hour_dow_bsfa, x = 'start_hour', y = 'count', hue = 'dow', palette='hls', lw=2)\n",
    "\n",
    "plt.title('BSFA')\n",
    "plt.xlabel('')\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.xlim([0,23])\n",
    "plt.xticks([0, 3, 6, 9, 12, 15, 18, 21], ['','','','','','','',''])\n",
    "plt.yticks([0, 2000, 4000, 6000], ['0k', '2k', '4k', '6k'])\n",
    "\n",
    "l = ax.legend(bbox_to_anchor=(1, 1))\n",
    "l.get_texts()[0].set_text('Day of Week')\n",
    "\n",
    "\n",
    "ax = plt.subplot(2,1,2)\n",
    "sb.lineplot(data = hour_dow_jose, x = 'start_hour', y = 'count', hue = 'dow', palette='hls', lw=2)\n",
    "\n",
    "plt.title('San Jose')\n",
    "plt.xlabel('')\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.xlim([0,23])\n",
    "plt.xticks([0, 3, 6, 9, 12, 15, 18, 21], ['Midnight', '3am', '6am', '9am', 'Noon', '3pm', '6pm', '9pm'])\n",
    "plt.yticks([0, 2000, 4000, 6000], ['0k', '2k', '4k', '6k'])\n",
    "\n",
    "\n",
    "\n",
    "l = ax.get_legend().remove()\n",
    "\n",
    "\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While not exactly the same, they do look very similar to one another. Both lacking a definitive 'getting to work' peak at 7-9am. However, the latter half of the day matches fairly well with the other two cities. \n",
    "\n",
    "Next up: User distribution amongsts the three cities. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  del sys.path[0]\n",
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  from ipykernel import kernelapp as app\n",
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:24: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:25: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/Users/michael/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "usercity = bikes[bikes['start_year'].isin([2018,2019, 2020])]\n",
    "\n",
    "usercity = usercity[['start_city', 'user_class', 'duration']].groupby(['start_city', 'user_class']).count()\n",
    "\n",
    "usercity.reset_index(inplace=True)\n",
    "usercity.rename(columns={'duration':'actual'}, inplace=True)\n",
    "\n",
    "\n",
    "uc_oak = usercity[usercity['start_city'] == 'Oakland']\n",
    "uc_fran = usercity[usercity['start_city'] == 'San Francisco']\n",
    "uc_jose = usercity[usercity['start_city'] == 'San Jose']\n",
    "\n",
    "uc_oak['city_sum'] = uc_oak['actual'].sum()\n",
    "uc_fran['city_sum'] = uc_fran['actual'].sum()\n",
    "uc_jose['city_sum'] = uc_jose['actual'].sum()\n",
    "\n",
    "ucgroup = uc_fran.append(uc_oak).append(uc_jose)\n",
    "\n",
    "\n",
    "uc_bsfa = ucgroup[ucgroup['user_class'] == 'BSFA']\n",
    "uc_casual = ucgroup[ucgroup['user_class'] == 'Casual']\n",
    "uc_member = ucgroup[ucgroup['user_class'] == 'Member']\n",
    "\n",
    "uc_bsfa['user_sum'] = uc_bsfa['actual'].sum()\n",
    "uc_casual['user_sum'] = uc_casual['actual'].sum()\n",
    "uc_member['user_sum'] = uc_member['actual'].sum()\n",
    "\n",
    "ucgroup = uc_casual.append(uc_member).append(uc_bsfa)\n",
    "\n",
    "\n",
    "ucgroup['city_perc'] = ucgroup['city_sum'] / ucgroup['actual'].sum()\n",
    "ucgroup['user_perc'] = ucgroup['user_sum'] / ucgroup['actual'].sum()\n",
    "\n",
    "ucgroup['expect_perc'] = ucgroup['city_perc'] * ucgroup['user_perc']\n",
    "ucgroup['actual_perc'] = ucgroup['actual'] / ucgroup['actual'].sum()\n",
    "\n",
    "ucgroup['expected'] = round(ucgroup['expect_perc'] * ucgroup['actual'].sum())\n",
    "ucgroup['diff_perc'] = (ucgroup['actual'] - ucgroup['expected']) / ucgroup['expected']\n",
    "\n",
    "ucgroup.drop(['city_sum', 'user_sum', 'city_perc', 'user_perc'], axis=1, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x720 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = [13,10], facecolor = 'white')\n",
    "plt.suptitle('Difference in Expected vs Actual Ridership')\n",
    "\n",
    "ax = plt.subplot(2,2,1)\n",
    "sb.barplot(data = ucgroup, x = 'start_city', y = 'actual', hue = 'user_class', palette = threetone)\n",
    "plt.title('Actual Values')\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 35e5+5e5, 5e5), ['0', '0.5m', '1.0m', '1.5m', '2.0m', '2.5m', '3.0m', '3.5m'])\n",
    "plt.ylim([0, 3.5e6])\n",
    "plt.ylabel('')\n",
    "\n",
    "l = ax.legend(loc=1)\n",
    "\n",
    "\n",
    "\n",
    "ax = plt.subplot(2,2,2)\n",
    "sb.barplot(data = ucgroup, x = 'start_city', y = 'expected', hue = 'user_class', palette = usercolours)\n",
    "plt.title('Expected Values')\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(0, 35e5+5e5, 5e5), ['0', '0.5m', '1.0m', '1.5m', '2.0m', '2.5m', '3.0m', '3.5m'])\n",
    "plt.ylim([0, 3.5e6])\n",
    "plt.ylabel('')\n",
    "\n",
    "l = ax.get_legend().remove() \n",
    "\n",
    "\n",
    "ax = plt.subplot(2,2,3)\n",
    "sb.barplot(data = ucgroup, x = 'start_city', y = 'diff_perc', hue = 'user_class', palette = usercolours)\n",
    "plt.title('Percentage Difference')\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(-1, 6+1, 1), ['-100%', '0%', '100%', '200%', '300%', '400%', '500%', '600%'])\n",
    "plt.ylim([-1, 6])\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.axhline(0, color='black')\n",
    "\n",
    "\n",
    "l = ax.get_legend().remove() \n",
    "\n",
    "\n",
    "\n",
    "ax = plt.subplot(2,2,4)\n",
    "sb.barplot(data = ucgroup, x = 'start_city', y = 'diff_perc', hue = 'user_class', palette = usercolours)\n",
    "plt.title('Percentage Difference (magnified)')\n",
    "\n",
    "plt.xlabel('')\n",
    "\n",
    "plt.yticks(np.arange(-.75, 0.75+0.25, 0.25), ['-75%', '-50%', '-25%', '0%', '25%', '50%', '75%'])\n",
    "plt.ylim([-.75, .75])\n",
    "plt.ylabel('')\n",
    "\n",
    "plt.axhline(0, color='black')\n",
    "\n",
    "\n",
    "l = ax.get_legend().remove() \n",
    "\n",
    "\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The expectation that the different user types are distributed proportionately throught the different cities is not accurate. The most notable difference is users under the BSFA program, specifically those living in San Jose. San Jose has almost as many BSFA trips as San Francisco, despite having less than 10% of the total number of trips taken. San Jose is also the only city that has the largest share of their trips being BSFA trips. The other have Members, Casuals, then BSFA\n",
    "\n",
    "BSFA is Bay Wheels' low income program, and it is difficult to know exactly what is going on without more information on how Bay Wheels runs their BSFA program. Barring a massive discrepancy in the average number of trips made these users in the three cities, San Francisco, San Jose and Oakland have roughly the same number of BSFA users. \n",
    "\n",
    "As the three cities have roughly the same number of trips, I would suspect that Bay Wheels is required to fit some quota, of fulfilling their BSFA program. Given that there are far fewer users in San Jose, users who wouldn't normally be qualified for BSFA in San Francisco are able to into the program in San Jose. \n",
    "\n",
    "Next up: What are city characteristics that lead to a popular bike sharing city?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "city_summary = bikes[['start_city', 'start_id', 'duration']].groupby(['start_id', 'start_city']).count().groupby(['start_city']).count()\n",
    "city_summary.rename(columns = {'duration': 'bike_stations'}, inplace=True)\n",
    "\n",
    "city_summary['bike_trips'] = bikes[['start_city', 'duration']].groupby('start_city').count().values\n",
    "\n",
    "city_summary['population'] = [433031, 881549, 1021795]\n",
    "city_summary['total_area'] = [201.66, 600.59, 467.55] \n",
    "city_summary['land_area'] = [144.76, 121.46, 459.75]\n",
    "\n",
    "# City Data was taken from:\n",
    "# https://en.wikipedia.org/wiki/Oakland,_California\n",
    "# https://en.wikipedia.org/wiki/San_Francisco\n",
    "# https://en.wikipedia.org/wiki/San_Jose,_California\n",
    "\n",
    "city_summary['without_vehicles_perc'] = [16.7, 29.9, 5.1]\n",
    "city_summary['cars_per_household'] = [1.45, 1.10, 2.12]\n",
    "\n",
    "#Data taken from https://www.governing.com/gov-data/car-ownership-numbers-of-vehicles-by-city-map.html\n",
    "\n",
    "city_summary['pop_total_density'] = city_summary['population'] / city_summary['total_area']\n",
    "city_summary['pop_land_density'] = city_summary['population'] / city_summary['land_area']\n",
    "city_summary['pop_per_station'] = city_summary['population'] / city_summary['bike_stations']\n",
    "city_summary['station_area_density'] = city_summary['bike_stations'] / city_summary['land_area']\n",
    "city_summary['trips_per_station'] = city_summary['bike_trips'] / city_summary['bike_stations']\n",
    "city_summary['trips_per_population'] = city_summary['bike_trips'] / city_summary['population']\n",
    "city_summary['pop_without_vehicle'] = city_summary['population'] * city_summary['without_vehicles_perc'] / 100\n",
    "\n",
    "city_summary.reset_index(inplace=True)\n",
    "\n",
    "city_summary.start_city.replace('San Francisco', 'San Fran', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start_city</th>\n",
       "      <th>bike_stations</th>\n",
       "      <th>bike_trips</th>\n",
       "      <th>population</th>\n",
       "      <th>total_area</th>\n",
       "      <th>land_area</th>\n",
       "      <th>without_vehicles_perc</th>\n",
       "      <th>cars_per_household</th>\n",
       "      <th>pop_total_density</th>\n",
       "      <th>pop_land_density</th>\n",
       "      <th>pop_per_station</th>\n",
       "      <th>station_area_density</th>\n",
       "      <th>trips_per_station</th>\n",
       "      <th>trips_per_population</th>\n",
       "      <th>pop_without_vehicle</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>San Fran</td>\n",
       "      <td>258</td>\n",
       "      <td>4796584</td>\n",
       "      <td>433031</td>\n",
       "      <td>201.66</td>\n",
       "      <td>144.76</td>\n",
       "      <td>16.7</td>\n",
       "      <td>1.45</td>\n",
       "      <td>2147.332143</td>\n",
       "      <td>2991.371926</td>\n",
       "      <td>1678.414729</td>\n",
       "      <td>1.782260</td>\n",
       "      <td>18591.410853</td>\n",
       "      <td>11.076768</td>\n",
       "      <td>72316.177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Oakland</td>\n",
       "      <td>133</td>\n",
       "      <td>1133053</td>\n",
       "      <td>881549</td>\n",
       "      <td>600.59</td>\n",
       "      <td>121.46</td>\n",
       "      <td>29.9</td>\n",
       "      <td>1.10</td>\n",
       "      <td>1467.804992</td>\n",
       "      <td>7257.936769</td>\n",
       "      <td>6628.187970</td>\n",
       "      <td>1.095011</td>\n",
       "      <td>8519.195489</td>\n",
       "      <td>1.285298</td>\n",
       "      <td>263583.151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>San Jose</td>\n",
       "      <td>86</td>\n",
       "      <td>389813</td>\n",
       "      <td>1021795</td>\n",
       "      <td>467.55</td>\n",
       "      <td>459.75</td>\n",
       "      <td>5.1</td>\n",
       "      <td>2.12</td>\n",
       "      <td>2185.424019</td>\n",
       "      <td>2222.501359</td>\n",
       "      <td>11881.337209</td>\n",
       "      <td>0.187058</td>\n",
       "      <td>4532.709302</td>\n",
       "      <td>0.381498</td>\n",
       "      <td>52111.545</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  start_city  bike_stations  bike_trips  population  total_area  land_area  \\\n",
       "0   San Fran            258     4796584      433031      201.66     144.76   \n",
       "1    Oakland            133     1133053      881549      600.59     121.46   \n",
       "2   San Jose             86      389813     1021795      467.55     459.75   \n",
       "\n",
       "   without_vehicles_perc  cars_per_household  pop_total_density  \\\n",
       "0                   16.7                1.45        2147.332143   \n",
       "1                   29.9                1.10        1467.804992   \n",
       "2                    5.1                2.12        2185.424019   \n",
       "\n",
       "   pop_land_density  pop_per_station  station_area_density  trips_per_station  \\\n",
       "0       2991.371926      1678.414729              1.782260       18591.410853   \n",
       "1       7257.936769      6628.187970              1.095011        8519.195489   \n",
       "2       2222.501359     11881.337209              0.187058        4532.709302   \n",
       "\n",
       "   trips_per_population  pop_without_vehicle  \n",
       "0             11.076768            72316.177  \n",
       "1              1.285298           263583.151  \n",
       "2              0.381498            52111.545  "
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "city_summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = [12,8], facecolor = 'white')\n",
    "plt.suptitle('Bay Area City Comparison')\n",
    "\n",
    "\n",
    "ax = plt.subplot(2,3,1)\n",
    "sb.barplot(data = city_summary, x = 'start_city', y = 'bike_trips', palette=citycolours)\n",
    "plt.title('Bike Trips')\n",
    "\n",
    "plt.xlabel('')\n",
    "plt.yticks(np.arange(0, 5e6+1e6, 1e6), [0, '1m', '2m', '3m', '4m', '5m'])\n",
    "plt.ylabel('')\n",
    "\n",
    "\n",
    "ax = plt.subplot(2,3,2)\n",
    "sb.barplot(data = city_summary, x = 'start_city', y = 'population', palette=citycolours)\n",
    "plt.title('City Population')\n",
    "\n",
    "plt.xlabel('')\n",
    "plt.yticks(np.arange(0,12e5+2e5, 2e5), [0, '200k', '400k', '600k', '800k', '1.0m', '1.2m'])\n",
    "plt.ylabel('')\n",
    "\n",
    "\n",
    "ax = plt.subplot(2,3,3)\n",
    "sb.barplot(data = city_summary, x = 'start_city', y = 'pop_land_density', palette=citycolours)\n",
    "plt.title('Population Density (per km^2)')\n",
    "\n",
    "plt.xlabel('')\n",
    "plt.yticks(np.arange(0, 8000+2000, 2000), ['0', '2k', '4k', '6k', '8k'])\n",
    "plt.ylabel('')\n",
    "\n",
    "\n",
    "ax = plt.subplot(2,3,4)\n",
    "sb.barplot(data = city_summary, x = 'start_city', y = 'without_vehicles_perc', palette=citycolours)\n",
    "plt.title('Percentage without a vehicle')\n",
    "\n",
    "plt.xlabel('')\n",
    "plt.yticks(np.arange(0, 40+10, 10), ['0', '10%', '20%', '30%' ,'40%'])\n",
    "plt.ylabel('')\n",
    "\n",
    "\n",
    "\n",
    "ax = plt.subplot(2,3,5)\n",
    "sb.barplot(data = city_summary, x = 'start_city', y = 'cars_per_household', palette=citycolours)\n",
    "plt.title('Cars per Household')\n",
    "\n",
    "plt.xlabel('')\n",
    "plt.yticks(np.arange(0,3+1,1))\n",
    "plt.ylabel('')\n",
    "\n",
    "\n",
    "ax = plt.subplot(2,3,6)\n",
    "sb.barplot(data = city_summary, x = 'start_city', y = 'pop_without_vehicle', palette=citycolours)\n",
    "plt.title('Population without a vehicle')\n",
    "\n",
    "plt.xlabel('')\n",
    "plt.yticks(np.arange(0,30e4+5e4,5e4), ['0', '50k', '100k', '150k', '200k', '250k', '300k'])\n",
    "plt.ylabel('')\n",
    "\n",
    "\n",
    "\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While the three city sample size isn't a great sample size, it can potentially be used to see what characteristics lead to a more successful city for Bikesharing. While a large population might seem important, metrics of Population Density, and Population without a vehicle might be more suitable to finding possible future cities for Bike sharing. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
